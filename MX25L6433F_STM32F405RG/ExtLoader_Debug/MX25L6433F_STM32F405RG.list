
MX25L6433F_STM32F405RG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000384  20000004  20000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .ARM          00000008  20000388  20000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init_array   00000004  20000390  20000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  20000394  20000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  20000398  20000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000a0  20000410  20000410  00010410  2**2
                  ALLOC
  6 .text         0000905c  200004b0  200004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .Dev_info     000000c8  2000950c  2000950c  0002950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rodata       00000024  200095d4  200095d4  000195d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 ._user_heap_stack 00000600  200095f8  200095f8  000195f8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000295d4  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d40f  00000000  00000000  00029604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002e93  00000000  00000000  00036a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000b68  00000000  00000000  000398a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00020bc4  00000000  00000000  0003a410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fe19  00000000  00000000  0005afd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000b9ba5  00000000  00000000  0006aded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00124992  2**0
                  CONTENTS, READONLY
 18 .debug_ranges 00000990  00000000  00000000  001249e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00002984  00000000  00000000  00125378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

200004b0 <__do_global_dtors_aux>:
200004b0:	b510      	push	{r4, lr}
200004b2:	4c05      	ldr	r4, [pc, #20]	; (200004c8 <__do_global_dtors_aux+0x18>)
200004b4:	7823      	ldrb	r3, [r4, #0]
200004b6:	b933      	cbnz	r3, 200004c6 <__do_global_dtors_aux+0x16>
200004b8:	4b04      	ldr	r3, [pc, #16]	; (200004cc <__do_global_dtors_aux+0x1c>)
200004ba:	b113      	cbz	r3, 200004c2 <__do_global_dtors_aux+0x12>
200004bc:	4804      	ldr	r0, [pc, #16]	; (200004d0 <__do_global_dtors_aux+0x20>)
200004be:	f3af 8000 	nop.w
200004c2:	2301      	movs	r3, #1
200004c4:	7023      	strb	r3, [r4, #0]
200004c6:	bd10      	pop	{r4, pc}
200004c8:	20000410 	.word	0x20000410
200004cc:	00000000 	.word	0x00000000
200004d0:	200094f0 	.word	0x200094f0

200004d4 <frame_dummy>:
200004d4:	b508      	push	{r3, lr}
200004d6:	4b03      	ldr	r3, [pc, #12]	; (200004e4 <frame_dummy+0x10>)
200004d8:	b11b      	cbz	r3, 200004e2 <frame_dummy+0xe>
200004da:	4903      	ldr	r1, [pc, #12]	; (200004e8 <frame_dummy+0x14>)
200004dc:	4803      	ldr	r0, [pc, #12]	; (200004ec <frame_dummy+0x18>)
200004de:	f3af 8000 	nop.w
200004e2:	bd08      	pop	{r3, pc}
200004e4:	00000000 	.word	0x00000000
200004e8:	20000414 	.word	0x20000414
200004ec:	200094f0 	.word	0x200094f0

200004f0 <_stack_init>:
200004f0:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
200004f4:	4770      	bx	lr
200004f6:	bf00      	nop

200004f8 <_mainCRTStartup>:
200004f8:	4b17      	ldr	r3, [pc, #92]	; (20000558 <_mainCRTStartup+0x60>)
200004fa:	2b00      	cmp	r3, #0
200004fc:	bf08      	it	eq
200004fe:	4b13      	ldreq	r3, [pc, #76]	; (2000054c <_mainCRTStartup+0x54>)
20000500:	469d      	mov	sp, r3
20000502:	f7ff fff5 	bl	200004f0 <_stack_init>
20000506:	2100      	movs	r1, #0
20000508:	468b      	mov	fp, r1
2000050a:	460f      	mov	r7, r1
2000050c:	4813      	ldr	r0, [pc, #76]	; (2000055c <_mainCRTStartup+0x64>)
2000050e:	4a14      	ldr	r2, [pc, #80]	; (20000560 <_mainCRTStartup+0x68>)
20000510:	1a12      	subs	r2, r2, r0
20000512:	f008 ffe5 	bl	200094e0 <memset>
20000516:	4b0e      	ldr	r3, [pc, #56]	; (20000550 <_mainCRTStartup+0x58>)
20000518:	2b00      	cmp	r3, #0
2000051a:	d000      	beq.n	2000051e <_mainCRTStartup+0x26>
2000051c:	4798      	blx	r3
2000051e:	4b0d      	ldr	r3, [pc, #52]	; (20000554 <_mainCRTStartup+0x5c>)
20000520:	2b00      	cmp	r3, #0
20000522:	d000      	beq.n	20000526 <_mainCRTStartup+0x2e>
20000524:	4798      	blx	r3
20000526:	2000      	movs	r0, #0
20000528:	2100      	movs	r1, #0
2000052a:	0004      	movs	r4, r0
2000052c:	000d      	movs	r5, r1
2000052e:	480d      	ldr	r0, [pc, #52]	; (20000564 <_mainCRTStartup+0x6c>)
20000530:	2800      	cmp	r0, #0
20000532:	d002      	beq.n	2000053a <_mainCRTStartup+0x42>
20000534:	480c      	ldr	r0, [pc, #48]	; (20000568 <_mainCRTStartup+0x70>)
20000536:	f3af 8000 	nop.w
2000053a:	f008 ffad 	bl	20009498 <__libc_init_array>
2000053e:	0020      	movs	r0, r4
20000540:	0029      	movs	r1, r5
20000542:	f000 fbd3 	bl	20000cec <main>
20000546:	f008 ff93 	bl	20009470 <exit>
2000054a:	bf00      	nop
2000054c:	00080000 	.word	0x00080000
	...
2000055c:	20000410 	.word	0x20000410
20000560:	200004b0 	.word	0x200004b0
	...
2000056c:	20000398 	.word	0x20000398
20000570:	20000398 	.word	0x20000398
20000574:	20000410 	.word	0x20000410
20000578:	20000410 	.word	0x20000410
2000057c:	200004b0 	.word	0x200004b0

20000580 <__aeabi_uldivmod>:
20000580:	b953      	cbnz	r3, 20000598 <__aeabi_uldivmod+0x18>
20000582:	b94a      	cbnz	r2, 20000598 <__aeabi_uldivmod+0x18>
20000584:	2900      	cmp	r1, #0
20000586:	bf08      	it	eq
20000588:	2800      	cmpeq	r0, #0
2000058a:	bf1c      	itt	ne
2000058c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
20000590:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
20000594:	f000 b96e 	b.w	20000874 <__aeabi_idiv0>
20000598:	f1ad 0c08 	sub.w	ip, sp, #8
2000059c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
200005a0:	f000 f806 	bl	200005b0 <__udivmoddi4>
200005a4:	f8dd e004 	ldr.w	lr, [sp, #4]
200005a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
200005ac:	b004      	add	sp, #16
200005ae:	4770      	bx	lr

200005b0 <__udivmoddi4>:
200005b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200005b4:	9d08      	ldr	r5, [sp, #32]
200005b6:	4604      	mov	r4, r0
200005b8:	468c      	mov	ip, r1
200005ba:	2b00      	cmp	r3, #0
200005bc:	f040 8083 	bne.w	200006c6 <__udivmoddi4+0x116>
200005c0:	428a      	cmp	r2, r1
200005c2:	4617      	mov	r7, r2
200005c4:	d947      	bls.n	20000656 <__udivmoddi4+0xa6>
200005c6:	fab2 f282 	clz	r2, r2
200005ca:	b142      	cbz	r2, 200005de <__udivmoddi4+0x2e>
200005cc:	f1c2 0020 	rsb	r0, r2, #32
200005d0:	fa24 f000 	lsr.w	r0, r4, r0
200005d4:	4091      	lsls	r1, r2
200005d6:	4097      	lsls	r7, r2
200005d8:	ea40 0c01 	orr.w	ip, r0, r1
200005dc:	4094      	lsls	r4, r2
200005de:	ea4f 4817 	mov.w	r8, r7, lsr #16
200005e2:	0c23      	lsrs	r3, r4, #16
200005e4:	fbbc f6f8 	udiv	r6, ip, r8
200005e8:	fa1f fe87 	uxth.w	lr, r7
200005ec:	fb08 c116 	mls	r1, r8, r6, ip
200005f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
200005f4:	fb06 f10e 	mul.w	r1, r6, lr
200005f8:	4299      	cmp	r1, r3
200005fa:	d909      	bls.n	20000610 <__udivmoddi4+0x60>
200005fc:	18fb      	adds	r3, r7, r3
200005fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
20000602:	f080 8119 	bcs.w	20000838 <__udivmoddi4+0x288>
20000606:	4299      	cmp	r1, r3
20000608:	f240 8116 	bls.w	20000838 <__udivmoddi4+0x288>
2000060c:	3e02      	subs	r6, #2
2000060e:	443b      	add	r3, r7
20000610:	1a5b      	subs	r3, r3, r1
20000612:	b2a4      	uxth	r4, r4
20000614:	fbb3 f0f8 	udiv	r0, r3, r8
20000618:	fb08 3310 	mls	r3, r8, r0, r3
2000061c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
20000620:	fb00 fe0e 	mul.w	lr, r0, lr
20000624:	45a6      	cmp	lr, r4
20000626:	d909      	bls.n	2000063c <__udivmoddi4+0x8c>
20000628:	193c      	adds	r4, r7, r4
2000062a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
2000062e:	f080 8105 	bcs.w	2000083c <__udivmoddi4+0x28c>
20000632:	45a6      	cmp	lr, r4
20000634:	f240 8102 	bls.w	2000083c <__udivmoddi4+0x28c>
20000638:	3802      	subs	r0, #2
2000063a:	443c      	add	r4, r7
2000063c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
20000640:	eba4 040e 	sub.w	r4, r4, lr
20000644:	2600      	movs	r6, #0
20000646:	b11d      	cbz	r5, 20000650 <__udivmoddi4+0xa0>
20000648:	40d4      	lsrs	r4, r2
2000064a:	2300      	movs	r3, #0
2000064c:	e9c5 4300 	strd	r4, r3, [r5]
20000650:	4631      	mov	r1, r6
20000652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000656:	b902      	cbnz	r2, 2000065a <__udivmoddi4+0xaa>
20000658:	deff      	udf	#255	; 0xff
2000065a:	fab2 f282 	clz	r2, r2
2000065e:	2a00      	cmp	r2, #0
20000660:	d150      	bne.n	20000704 <__udivmoddi4+0x154>
20000662:	1bcb      	subs	r3, r1, r7
20000664:	ea4f 4e17 	mov.w	lr, r7, lsr #16
20000668:	fa1f f887 	uxth.w	r8, r7
2000066c:	2601      	movs	r6, #1
2000066e:	fbb3 fcfe 	udiv	ip, r3, lr
20000672:	0c21      	lsrs	r1, r4, #16
20000674:	fb0e 331c 	mls	r3, lr, ip, r3
20000678:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000067c:	fb08 f30c 	mul.w	r3, r8, ip
20000680:	428b      	cmp	r3, r1
20000682:	d907      	bls.n	20000694 <__udivmoddi4+0xe4>
20000684:	1879      	adds	r1, r7, r1
20000686:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
2000068a:	d202      	bcs.n	20000692 <__udivmoddi4+0xe2>
2000068c:	428b      	cmp	r3, r1
2000068e:	f200 80e9 	bhi.w	20000864 <__udivmoddi4+0x2b4>
20000692:	4684      	mov	ip, r0
20000694:	1ac9      	subs	r1, r1, r3
20000696:	b2a3      	uxth	r3, r4
20000698:	fbb1 f0fe 	udiv	r0, r1, lr
2000069c:	fb0e 1110 	mls	r1, lr, r0, r1
200006a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
200006a4:	fb08 f800 	mul.w	r8, r8, r0
200006a8:	45a0      	cmp	r8, r4
200006aa:	d907      	bls.n	200006bc <__udivmoddi4+0x10c>
200006ac:	193c      	adds	r4, r7, r4
200006ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
200006b2:	d202      	bcs.n	200006ba <__udivmoddi4+0x10a>
200006b4:	45a0      	cmp	r8, r4
200006b6:	f200 80d9 	bhi.w	2000086c <__udivmoddi4+0x2bc>
200006ba:	4618      	mov	r0, r3
200006bc:	eba4 0408 	sub.w	r4, r4, r8
200006c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
200006c4:	e7bf      	b.n	20000646 <__udivmoddi4+0x96>
200006c6:	428b      	cmp	r3, r1
200006c8:	d909      	bls.n	200006de <__udivmoddi4+0x12e>
200006ca:	2d00      	cmp	r5, #0
200006cc:	f000 80b1 	beq.w	20000832 <__udivmoddi4+0x282>
200006d0:	2600      	movs	r6, #0
200006d2:	e9c5 0100 	strd	r0, r1, [r5]
200006d6:	4630      	mov	r0, r6
200006d8:	4631      	mov	r1, r6
200006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200006de:	fab3 f683 	clz	r6, r3
200006e2:	2e00      	cmp	r6, #0
200006e4:	d14a      	bne.n	2000077c <__udivmoddi4+0x1cc>
200006e6:	428b      	cmp	r3, r1
200006e8:	d302      	bcc.n	200006f0 <__udivmoddi4+0x140>
200006ea:	4282      	cmp	r2, r0
200006ec:	f200 80b8 	bhi.w	20000860 <__udivmoddi4+0x2b0>
200006f0:	1a84      	subs	r4, r0, r2
200006f2:	eb61 0103 	sbc.w	r1, r1, r3
200006f6:	2001      	movs	r0, #1
200006f8:	468c      	mov	ip, r1
200006fa:	2d00      	cmp	r5, #0
200006fc:	d0a8      	beq.n	20000650 <__udivmoddi4+0xa0>
200006fe:	e9c5 4c00 	strd	r4, ip, [r5]
20000702:	e7a5      	b.n	20000650 <__udivmoddi4+0xa0>
20000704:	f1c2 0320 	rsb	r3, r2, #32
20000708:	fa20 f603 	lsr.w	r6, r0, r3
2000070c:	4097      	lsls	r7, r2
2000070e:	fa01 f002 	lsl.w	r0, r1, r2
20000712:	ea4f 4e17 	mov.w	lr, r7, lsr #16
20000716:	40d9      	lsrs	r1, r3
20000718:	4330      	orrs	r0, r6
2000071a:	0c03      	lsrs	r3, r0, #16
2000071c:	fbb1 f6fe 	udiv	r6, r1, lr
20000720:	fa1f f887 	uxth.w	r8, r7
20000724:	fb0e 1116 	mls	r1, lr, r6, r1
20000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000072c:	fb06 f108 	mul.w	r1, r6, r8
20000730:	4299      	cmp	r1, r3
20000732:	fa04 f402 	lsl.w	r4, r4, r2
20000736:	d909      	bls.n	2000074c <__udivmoddi4+0x19c>
20000738:	18fb      	adds	r3, r7, r3
2000073a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
2000073e:	f080 808d 	bcs.w	2000085c <__udivmoddi4+0x2ac>
20000742:	4299      	cmp	r1, r3
20000744:	f240 808a 	bls.w	2000085c <__udivmoddi4+0x2ac>
20000748:	3e02      	subs	r6, #2
2000074a:	443b      	add	r3, r7
2000074c:	1a5b      	subs	r3, r3, r1
2000074e:	b281      	uxth	r1, r0
20000750:	fbb3 f0fe 	udiv	r0, r3, lr
20000754:	fb0e 3310 	mls	r3, lr, r0, r3
20000758:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000075c:	fb00 f308 	mul.w	r3, r0, r8
20000760:	428b      	cmp	r3, r1
20000762:	d907      	bls.n	20000774 <__udivmoddi4+0x1c4>
20000764:	1879      	adds	r1, r7, r1
20000766:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
2000076a:	d273      	bcs.n	20000854 <__udivmoddi4+0x2a4>
2000076c:	428b      	cmp	r3, r1
2000076e:	d971      	bls.n	20000854 <__udivmoddi4+0x2a4>
20000770:	3802      	subs	r0, #2
20000772:	4439      	add	r1, r7
20000774:	1acb      	subs	r3, r1, r3
20000776:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
2000077a:	e778      	b.n	2000066e <__udivmoddi4+0xbe>
2000077c:	f1c6 0c20 	rsb	ip, r6, #32
20000780:	fa03 f406 	lsl.w	r4, r3, r6
20000784:	fa22 f30c 	lsr.w	r3, r2, ip
20000788:	431c      	orrs	r4, r3
2000078a:	fa20 f70c 	lsr.w	r7, r0, ip
2000078e:	fa01 f306 	lsl.w	r3, r1, r6
20000792:	ea4f 4e14 	mov.w	lr, r4, lsr #16
20000796:	fa21 f10c 	lsr.w	r1, r1, ip
2000079a:	431f      	orrs	r7, r3
2000079c:	0c3b      	lsrs	r3, r7, #16
2000079e:	fbb1 f9fe 	udiv	r9, r1, lr
200007a2:	fa1f f884 	uxth.w	r8, r4
200007a6:	fb0e 1119 	mls	r1, lr, r9, r1
200007aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
200007ae:	fb09 fa08 	mul.w	sl, r9, r8
200007b2:	458a      	cmp	sl, r1
200007b4:	fa02 f206 	lsl.w	r2, r2, r6
200007b8:	fa00 f306 	lsl.w	r3, r0, r6
200007bc:	d908      	bls.n	200007d0 <__udivmoddi4+0x220>
200007be:	1861      	adds	r1, r4, r1
200007c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
200007c4:	d248      	bcs.n	20000858 <__udivmoddi4+0x2a8>
200007c6:	458a      	cmp	sl, r1
200007c8:	d946      	bls.n	20000858 <__udivmoddi4+0x2a8>
200007ca:	f1a9 0902 	sub.w	r9, r9, #2
200007ce:	4421      	add	r1, r4
200007d0:	eba1 010a 	sub.w	r1, r1, sl
200007d4:	b2bf      	uxth	r7, r7
200007d6:	fbb1 f0fe 	udiv	r0, r1, lr
200007da:	fb0e 1110 	mls	r1, lr, r0, r1
200007de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
200007e2:	fb00 f808 	mul.w	r8, r0, r8
200007e6:	45b8      	cmp	r8, r7
200007e8:	d907      	bls.n	200007fa <__udivmoddi4+0x24a>
200007ea:	19e7      	adds	r7, r4, r7
200007ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
200007f0:	d22e      	bcs.n	20000850 <__udivmoddi4+0x2a0>
200007f2:	45b8      	cmp	r8, r7
200007f4:	d92c      	bls.n	20000850 <__udivmoddi4+0x2a0>
200007f6:	3802      	subs	r0, #2
200007f8:	4427      	add	r7, r4
200007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
200007fe:	eba7 0708 	sub.w	r7, r7, r8
20000802:	fba0 8902 	umull	r8, r9, r0, r2
20000806:	454f      	cmp	r7, r9
20000808:	46c6      	mov	lr, r8
2000080a:	4649      	mov	r1, r9
2000080c:	d31a      	bcc.n	20000844 <__udivmoddi4+0x294>
2000080e:	d017      	beq.n	20000840 <__udivmoddi4+0x290>
20000810:	b15d      	cbz	r5, 2000082a <__udivmoddi4+0x27a>
20000812:	ebb3 020e 	subs.w	r2, r3, lr
20000816:	eb67 0701 	sbc.w	r7, r7, r1
2000081a:	fa07 fc0c 	lsl.w	ip, r7, ip
2000081e:	40f2      	lsrs	r2, r6
20000820:	ea4c 0202 	orr.w	r2, ip, r2
20000824:	40f7      	lsrs	r7, r6
20000826:	e9c5 2700 	strd	r2, r7, [r5]
2000082a:	2600      	movs	r6, #0
2000082c:	4631      	mov	r1, r6
2000082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20000832:	462e      	mov	r6, r5
20000834:	4628      	mov	r0, r5
20000836:	e70b      	b.n	20000650 <__udivmoddi4+0xa0>
20000838:	4606      	mov	r6, r0
2000083a:	e6e9      	b.n	20000610 <__udivmoddi4+0x60>
2000083c:	4618      	mov	r0, r3
2000083e:	e6fd      	b.n	2000063c <__udivmoddi4+0x8c>
20000840:	4543      	cmp	r3, r8
20000842:	d2e5      	bcs.n	20000810 <__udivmoddi4+0x260>
20000844:	ebb8 0e02 	subs.w	lr, r8, r2
20000848:	eb69 0104 	sbc.w	r1, r9, r4
2000084c:	3801      	subs	r0, #1
2000084e:	e7df      	b.n	20000810 <__udivmoddi4+0x260>
20000850:	4608      	mov	r0, r1
20000852:	e7d2      	b.n	200007fa <__udivmoddi4+0x24a>
20000854:	4660      	mov	r0, ip
20000856:	e78d      	b.n	20000774 <__udivmoddi4+0x1c4>
20000858:	4681      	mov	r9, r0
2000085a:	e7b9      	b.n	200007d0 <__udivmoddi4+0x220>
2000085c:	4666      	mov	r6, ip
2000085e:	e775      	b.n	2000074c <__udivmoddi4+0x19c>
20000860:	4630      	mov	r0, r6
20000862:	e74a      	b.n	200006fa <__udivmoddi4+0x14a>
20000864:	f1ac 0c02 	sub.w	ip, ip, #2
20000868:	4439      	add	r1, r7
2000086a:	e713      	b.n	20000694 <__udivmoddi4+0xe4>
2000086c:	3802      	subs	r0, #2
2000086e:	443c      	add	r4, r7
20000870:	e724      	b.n	200006bc <__udivmoddi4+0x10c>
20000872:	bf00      	nop

20000874 <__aeabi_idiv0>:
20000874:	4770      	bx	lr
20000876:	bf00      	nop

20000878 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Init(void)
{
20000878:	b580      	push	{r7, lr}
2000087a:	b082      	sub	sp, #8
2000087c:	af00      	add	r7, sp, #0
    *(uint32_t*)0xE000EDF0 = 0xA05F0000; //enable interrupts in debug
2000087e:	4b10      	ldr	r3, [pc, #64]	; (200008c0 <Init+0x48>)
20000880:	4a10      	ldr	r2, [pc, #64]	; (200008c4 <Init+0x4c>)
20000882:	601a      	str	r2, [r3, #0]


    SystemInit();
20000884:	f000 fee4 	bl	20001650 <SystemInit>
     * change VTOR setting for other devices
     * SCB->VTOR = 0x20000000 | 0x200;
     *
     * */

    SCB->VTOR = 0x20000000 | 0x200;
20000888:	4b0f      	ldr	r3, [pc, #60]	; (200008c8 <Init+0x50>)
2000088a:	4a10      	ldr	r2, [pc, #64]	; (200008cc <Init+0x54>)
2000088c:	609a      	str	r2, [r3, #8]
2000088e:	2300      	movs	r3, #0
20000890:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000892:	683b      	ldr	r3, [r7, #0]
20000894:	f383 8810 	msr	PRIMASK, r3
}
20000898:	bf00      	nop

    __set_PRIMASK(0); //enable interrupts

    HAL_Init();
2000089a:	f000 ff95 	bl	200017c8 <HAL_Init>

    SystemClock_Config();
2000089e:	f000 fa31 	bl	20000d04 <SystemClock_Config>

    MX_GPIO_Init();
200008a2:	f000 f9d1 	bl	20000c48 <MX_GPIO_Init>

    MX_SPI2_Init();
200008a6:	f000 fa9d 	bl	20000de4 <MX_SPI2_Init>
200008aa:	2301      	movs	r3, #1
200008ac:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	f383 8810 	msr	PRIMASK, r3
}
200008b4:	bf00      	nop

    __set_PRIMASK(1); //disable interrupts
    return LOADER_OK;
200008b6:	2301      	movs	r3, #1
}
200008b8:	4618      	mov	r0, r3
200008ba:	3708      	adds	r7, #8
200008bc:	46bd      	mov	sp, r7
200008be:	bd80      	pop	{r7, pc}
200008c0:	e000edf0 	.word	0xe000edf0
200008c4:	a05f0000 	.word	0xa05f0000
200008c8:	e000ed00 	.word	0xe000ed00
200008cc:	20000200 	.word	0x20000200

200008d0 <Read>:
  *      R0             : "1" 			: Operation succeeded
  * 			  "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM
  */
int Read (uint32_t Address, uint32_t Size, uint8_t* buffer)
{
200008d0:	b580      	push	{r7, lr}
200008d2:	b084      	sub	sp, #16
200008d4:	af00      	add	r7, sp, #0
200008d6:	60f8      	str	r0, [r7, #12]
200008d8:	60b9      	str	r1, [r7, #8]
200008da:	607a      	str	r2, [r7, #4]
	sFLASH_ReadBuffer(buffer, Address, Size);
200008dc:	68ba      	ldr	r2, [r7, #8]
200008de:	68f9      	ldr	r1, [r7, #12]
200008e0:	6878      	ldr	r0, [r7, #4]
200008e2:	f000 fbd3 	bl	2000108c <sFLASH_ReadBuffer>
	return 1;
200008e6:	2301      	movs	r3, #1
}
200008e8:	4618      	mov	r0, r3
200008ea:	3710      	adds	r7, #16
200008ec:	46bd      	mov	sp, r7
200008ee:	bd80      	pop	{r7, pc}

200008f0 <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer)
{
200008f0:	b580      	push	{r7, lr}
200008f2:	b084      	sub	sp, #16
200008f4:	af00      	add	r7, sp, #0
200008f6:	60f8      	str	r0, [r7, #12]
200008f8:	60b9      	str	r1, [r7, #8]
200008fa:	607a      	str	r2, [r7, #4]
	sFLASH_WriteBuffer(buffer, Address, Size);
200008fc:	68ba      	ldr	r2, [r7, #8]
200008fe:	68f9      	ldr	r1, [r7, #12]
20000900:	6878      	ldr	r0, [r7, #4]
20000902:	f000 fbfb 	bl	200010fc <sFLASH_WriteBuffer>
	return LOADER_OK;
20000906:	2301      	movs	r3, #1
}
20000908:	4618      	mov	r0, r3
2000090a:	3710      	adds	r7, #16
2000090c:	46bd      	mov	sp, r7
2000090e:	bd80      	pop	{r7, pc}

20000910 <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
20000910:	b580      	push	{r7, lr}
20000912:	b082      	sub	sp, #8
20000914:	af00      	add	r7, sp, #0
20000916:	6078      	str	r0, [r7, #4]
20000918:	6039      	str	r1, [r7, #0]
	EraseStartAddress = EraseStartAddress -  EraseStartAddress % sFLASH_SPI_SECTOR_SIZE;
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
20000920:	f023 030f 	bic.w	r3, r3, #15
20000924:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress)
20000926:	e006      	b.n	20000936 <SectorErase+0x26>
	{
		sFLASH_EraseSector(EraseStartAddress);
20000928:	6878      	ldr	r0, [r7, #4]
2000092a:	f000 fb1d 	bl	20000f68 <sFLASH_EraseSector>
		EraseStartAddress += sFLASH_SPI_SECTOR_SIZE;
2000092e:	687b      	ldr	r3, [r7, #4]
20000930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
20000934:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress)
20000936:	683a      	ldr	r2, [r7, #0]
20000938:	687b      	ldr	r3, [r7, #4]
2000093a:	429a      	cmp	r2, r3
2000093c:	d2f4      	bcs.n	20000928 <SectorErase+0x18>
	}

	return LOADER_OK;
2000093e:	2301      	movs	r3, #1
}
20000940:	4618      	mov	r0, r3
20000942:	3708      	adds	r7, #8
20000944:	46bd      	mov	sp, r7
20000946:	bd80      	pop	{r7, pc}

20000948 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void)
{
20000948:	b580      	push	{r7, lr}
2000094a:	af00      	add	r7, sp, #0
	sFLASH_EraseChip();
2000094c:	f000 fb3e 	bl	20000fcc <sFLASH_EraseChip>
    return LOADER_OK;
20000950:	2301      	movs	r3, #1
}
20000952:	4618      	mov	r0, r3
20000954:	bd80      	pop	{r7, pc}

20000956 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal)
{
20000956:	b580      	push	{r7, lr}
20000958:	b088      	sub	sp, #32
2000095a:	af00      	add	r7, sp, #0
2000095c:	60f8      	str	r0, [r7, #12]
2000095e:	60b9      	str	r1, [r7, #8]
20000960:	607a      	str	r2, [r7, #4]
	uint8_t missalignementAddress = StartAddress%4;
20000962:	68fb      	ldr	r3, [r7, #12]
20000964:	b2db      	uxtb	r3, r3
20000966:	f003 0303 	and.w	r3, r3, #3
2000096a:	77fb      	strb	r3, [r7, #31]
	uint8_t missalignementSize = Size ;
2000096c:	68bb      	ldr	r3, [r7, #8]
2000096e:	77bb      	strb	r3, [r7, #30]
	int cnt;
	uint32_t Val;
	uint8_t value;

	StartAddress-=StartAddress%4;
20000970:	68fb      	ldr	r3, [r7, #12]
20000972:	f023 0303 	bic.w	r3, r3, #3
20000976:	60fb      	str	r3, [r7, #12]
	Size += (Size%4==0)?0:4-(Size%4);
20000978:	68bb      	ldr	r3, [r7, #8]
2000097a:	f003 0303 	and.w	r3, r3, #3
2000097e:	2b00      	cmp	r3, #0
20000980:	d005      	beq.n	2000098e <CheckSum+0x38>
20000982:	68bb      	ldr	r3, [r7, #8]
20000984:	f003 0303 	and.w	r3, r3, #3
20000988:	f1c3 0304 	rsb	r3, r3, #4
2000098c:	e000      	b.n	20000990 <CheckSum+0x3a>
2000098e:	2300      	movs	r3, #0
20000990:	68ba      	ldr	r2, [r7, #8]
20000992:	4413      	add	r3, r2
20000994:	60bb      	str	r3, [r7, #8]

	for(cnt=0; cnt<Size ; cnt+=4)
20000996:	2300      	movs	r3, #0
20000998:	61bb      	str	r3, [r7, #24]
2000099a:	e0e3      	b.n	20000b64 <CheckSum+0x20e>
	{
		sFLASH_ReadBuffer(&value, StartAddress ,1);
2000099c:	f107 0313 	add.w	r3, r7, #19
200009a0:	2201      	movs	r2, #1
200009a2:	68f9      	ldr	r1, [r7, #12]
200009a4:	4618      	mov	r0, r3
200009a6:	f000 fb71 	bl	2000108c <sFLASH_ReadBuffer>
		Val = value;
200009aa:	7cfb      	ldrb	r3, [r7, #19]
200009ac:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 1,1);
200009ae:	68fb      	ldr	r3, [r7, #12]
200009b0:	1c59      	adds	r1, r3, #1
200009b2:	f107 0313 	add.w	r3, r7, #19
200009b6:	2201      	movs	r2, #1
200009b8:	4618      	mov	r0, r3
200009ba:	f000 fb67 	bl	2000108c <sFLASH_ReadBuffer>
		Val+= value<<8;
200009be:	7cfb      	ldrb	r3, [r7, #19]
200009c0:	021b      	lsls	r3, r3, #8
200009c2:	461a      	mov	r2, r3
200009c4:	697b      	ldr	r3, [r7, #20]
200009c6:	4413      	add	r3, r2
200009c8:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 2,1);
200009ca:	68fb      	ldr	r3, [r7, #12]
200009cc:	1c99      	adds	r1, r3, #2
200009ce:	f107 0313 	add.w	r3, r7, #19
200009d2:	2201      	movs	r2, #1
200009d4:	4618      	mov	r0, r3
200009d6:	f000 fb59 	bl	2000108c <sFLASH_ReadBuffer>
		Val+= value<<16;
200009da:	7cfb      	ldrb	r3, [r7, #19]
200009dc:	041b      	lsls	r3, r3, #16
200009de:	461a      	mov	r2, r3
200009e0:	697b      	ldr	r3, [r7, #20]
200009e2:	4413      	add	r3, r2
200009e4:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 3,1);
200009e6:	68fb      	ldr	r3, [r7, #12]
200009e8:	1cd9      	adds	r1, r3, #3
200009ea:	f107 0313 	add.w	r3, r7, #19
200009ee:	2201      	movs	r2, #1
200009f0:	4618      	mov	r0, r3
200009f2:	f000 fb4b 	bl	2000108c <sFLASH_ReadBuffer>
		Val+= value<<24;
200009f6:	7cfb      	ldrb	r3, [r7, #19]
200009f8:	061b      	lsls	r3, r3, #24
200009fa:	461a      	mov	r2, r3
200009fc:	697b      	ldr	r3, [r7, #20]
200009fe:	4413      	add	r3, r2
20000a00:	617b      	str	r3, [r7, #20]
		if(missalignementAddress)
20000a02:	7ffb      	ldrb	r3, [r7, #31]
20000a04:	2b00      	cmp	r3, #0
20000a06:	d040      	beq.n	20000a8a <CheckSum+0x134>
		{
			switch (missalignementAddress)
20000a08:	7ffb      	ldrb	r3, [r7, #31]
20000a0a:	2b03      	cmp	r3, #3
20000a0c:	d032      	beq.n	20000a74 <CheckSum+0x11e>
20000a0e:	2b03      	cmp	r3, #3
20000a10:	f300 80a2 	bgt.w	20000b58 <CheckSum+0x202>
20000a14:	2b01      	cmp	r3, #1
20000a16:	d002      	beq.n	20000a1e <CheckSum+0xc8>
20000a18:	2b02      	cmp	r3, #2
20000a1a:	d019      	beq.n	20000a50 <CheckSum+0xfa>
20000a1c:	e09c      	b.n	20000b58 <CheckSum+0x202>
			{
				case 1:
					InitVal += (uint8_t) (Val>>8 & 0xff);
20000a1e:	697b      	ldr	r3, [r7, #20]
20000a20:	0a1b      	lsrs	r3, r3, #8
20000a22:	b2db      	uxtb	r3, r3
20000a24:	461a      	mov	r2, r3
20000a26:	687b      	ldr	r3, [r7, #4]
20000a28:	4413      	add	r3, r2
20000a2a:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>16 & 0xff);
20000a2c:	697b      	ldr	r3, [r7, #20]
20000a2e:	0c1b      	lsrs	r3, r3, #16
20000a30:	b2db      	uxtb	r3, r3
20000a32:	461a      	mov	r2, r3
20000a34:	687b      	ldr	r3, [r7, #4]
20000a36:	4413      	add	r3, r2
20000a38:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>24 & 0xff);
20000a3a:	697b      	ldr	r3, [r7, #20]
20000a3c:	0e1b      	lsrs	r3, r3, #24
20000a3e:	b2db      	uxtb	r3, r3
20000a40:	461a      	mov	r2, r3
20000a42:	687b      	ldr	r3, [r7, #4]
20000a44:	4413      	add	r3, r2
20000a46:	607b      	str	r3, [r7, #4]
					missalignementAddress-=1;
20000a48:	7ffb      	ldrb	r3, [r7, #31]
20000a4a:	3b01      	subs	r3, #1
20000a4c:	77fb      	strb	r3, [r7, #31]
				break;
20000a4e:	e083      	b.n	20000b58 <CheckSum+0x202>
				case 2:
					InitVal += (uint8_t) (Val>>16 & 0xff);
20000a50:	697b      	ldr	r3, [r7, #20]
20000a52:	0c1b      	lsrs	r3, r3, #16
20000a54:	b2db      	uxtb	r3, r3
20000a56:	461a      	mov	r2, r3
20000a58:	687b      	ldr	r3, [r7, #4]
20000a5a:	4413      	add	r3, r2
20000a5c:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>24 & 0xff);
20000a5e:	697b      	ldr	r3, [r7, #20]
20000a60:	0e1b      	lsrs	r3, r3, #24
20000a62:	b2db      	uxtb	r3, r3
20000a64:	461a      	mov	r2, r3
20000a66:	687b      	ldr	r3, [r7, #4]
20000a68:	4413      	add	r3, r2
20000a6a:	607b      	str	r3, [r7, #4]
					missalignementAddress-=2;
20000a6c:	7ffb      	ldrb	r3, [r7, #31]
20000a6e:	3b02      	subs	r3, #2
20000a70:	77fb      	strb	r3, [r7, #31]
				break;
20000a72:	e071      	b.n	20000b58 <CheckSum+0x202>
				case 3:
					InitVal += (uint8_t) (Val>>24 & 0xff);
20000a74:	697b      	ldr	r3, [r7, #20]
20000a76:	0e1b      	lsrs	r3, r3, #24
20000a78:	b2db      	uxtb	r3, r3
20000a7a:	461a      	mov	r2, r3
20000a7c:	687b      	ldr	r3, [r7, #4]
20000a7e:	4413      	add	r3, r2
20000a80:	607b      	str	r3, [r7, #4]
					missalignementAddress-=3;
20000a82:	7ffb      	ldrb	r3, [r7, #31]
20000a84:	3b03      	subs	r3, #3
20000a86:	77fb      	strb	r3, [r7, #31]
				break;
20000a88:	e066      	b.n	20000b58 <CheckSum+0x202>
			}
		}
		else if((Size-missalignementSize)%4 && (Size-cnt) <=4)
20000a8a:	7fbb      	ldrb	r3, [r7, #30]
20000a8c:	68ba      	ldr	r2, [r7, #8]
20000a8e:	1ad3      	subs	r3, r2, r3
20000a90:	f003 0303 	and.w	r3, r3, #3
20000a94:	2b00      	cmp	r3, #0
20000a96:	d044      	beq.n	20000b22 <CheckSum+0x1cc>
20000a98:	69bb      	ldr	r3, [r7, #24]
20000a9a:	68ba      	ldr	r2, [r7, #8]
20000a9c:	1ad3      	subs	r3, r2, r3
20000a9e:	2b04      	cmp	r3, #4
20000aa0:	d83f      	bhi.n	20000b22 <CheckSum+0x1cc>
		{
			switch (Size-missalignementSize)
20000aa2:	7fbb      	ldrb	r3, [r7, #30]
20000aa4:	68ba      	ldr	r2, [r7, #8]
20000aa6:	1ad3      	subs	r3, r2, r3
20000aa8:	2b03      	cmp	r3, #3
20000aaa:	d02f      	beq.n	20000b0c <CheckSum+0x1b6>
20000aac:	2b03      	cmp	r3, #3
20000aae:	d853      	bhi.n	20000b58 <CheckSum+0x202>
20000ab0:	2b01      	cmp	r3, #1
20000ab2:	d002      	beq.n	20000aba <CheckSum+0x164>
20000ab4:	2b02      	cmp	r3, #2
20000ab6:	d018      	beq.n	20000aea <CheckSum+0x194>
20000ab8:	e04e      	b.n	20000b58 <CheckSum+0x202>
			{
			case 1:
				InitVal += (uint8_t) Val;
20000aba:	697b      	ldr	r3, [r7, #20]
20000abc:	b2db      	uxtb	r3, r3
20000abe:	461a      	mov	r2, r3
20000ac0:	687b      	ldr	r3, [r7, #4]
20000ac2:	4413      	add	r3, r2
20000ac4:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>8 & 0xff);
20000ac6:	697b      	ldr	r3, [r7, #20]
20000ac8:	0a1b      	lsrs	r3, r3, #8
20000aca:	b2db      	uxtb	r3, r3
20000acc:	461a      	mov	r2, r3
20000ace:	687b      	ldr	r3, [r7, #4]
20000ad0:	4413      	add	r3, r2
20000ad2:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>16 & 0xff);
20000ad4:	697b      	ldr	r3, [r7, #20]
20000ad6:	0c1b      	lsrs	r3, r3, #16
20000ad8:	b2db      	uxtb	r3, r3
20000ada:	461a      	mov	r2, r3
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	4413      	add	r3, r2
20000ae0:	607b      	str	r3, [r7, #4]
				missalignementSize-=1;
20000ae2:	7fbb      	ldrb	r3, [r7, #30]
20000ae4:	3b01      	subs	r3, #1
20000ae6:	77bb      	strb	r3, [r7, #30]
			break;
20000ae8:	e01a      	b.n	20000b20 <CheckSum+0x1ca>
			case 2:
				InitVal += (uint8_t) Val;
20000aea:	697b      	ldr	r3, [r7, #20]
20000aec:	b2db      	uxtb	r3, r3
20000aee:	461a      	mov	r2, r3
20000af0:	687b      	ldr	r3, [r7, #4]
20000af2:	4413      	add	r3, r2
20000af4:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>8 & 0xff);
20000af6:	697b      	ldr	r3, [r7, #20]
20000af8:	0a1b      	lsrs	r3, r3, #8
20000afa:	b2db      	uxtb	r3, r3
20000afc:	461a      	mov	r2, r3
20000afe:	687b      	ldr	r3, [r7, #4]
20000b00:	4413      	add	r3, r2
20000b02:	607b      	str	r3, [r7, #4]
				missalignementSize-=2;
20000b04:	7fbb      	ldrb	r3, [r7, #30]
20000b06:	3b02      	subs	r3, #2
20000b08:	77bb      	strb	r3, [r7, #30]
			break;
20000b0a:	e009      	b.n	20000b20 <CheckSum+0x1ca>
			case 3:
				InitVal += (uint8_t) Val;
20000b0c:	697b      	ldr	r3, [r7, #20]
20000b0e:	b2db      	uxtb	r3, r3
20000b10:	461a      	mov	r2, r3
20000b12:	687b      	ldr	r3, [r7, #4]
20000b14:	4413      	add	r3, r2
20000b16:	607b      	str	r3, [r7, #4]
				missalignementSize-=3;
20000b18:	7fbb      	ldrb	r3, [r7, #30]
20000b1a:	3b03      	subs	r3, #3
20000b1c:	77bb      	strb	r3, [r7, #30]
				break;
20000b1e:	bf00      	nop
			switch (Size-missalignementSize)
20000b20:	e01a      	b.n	20000b58 <CheckSum+0x202>
			}
		}
		else
		{
			InitVal += (uint8_t) Val;
20000b22:	697b      	ldr	r3, [r7, #20]
20000b24:	b2db      	uxtb	r3, r3
20000b26:	461a      	mov	r2, r3
20000b28:	687b      	ldr	r3, [r7, #4]
20000b2a:	4413      	add	r3, r2
20000b2c:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>8 & 0xff);
20000b2e:	697b      	ldr	r3, [r7, #20]
20000b30:	0a1b      	lsrs	r3, r3, #8
20000b32:	b2db      	uxtb	r3, r3
20000b34:	461a      	mov	r2, r3
20000b36:	687b      	ldr	r3, [r7, #4]
20000b38:	4413      	add	r3, r2
20000b3a:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>16 & 0xff);
20000b3c:	697b      	ldr	r3, [r7, #20]
20000b3e:	0c1b      	lsrs	r3, r3, #16
20000b40:	b2db      	uxtb	r3, r3
20000b42:	461a      	mov	r2, r3
20000b44:	687b      	ldr	r3, [r7, #4]
20000b46:	4413      	add	r3, r2
20000b48:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>24 & 0xff);
20000b4a:	697b      	ldr	r3, [r7, #20]
20000b4c:	0e1b      	lsrs	r3, r3, #24
20000b4e:	b2db      	uxtb	r3, r3
20000b50:	461a      	mov	r2, r3
20000b52:	687b      	ldr	r3, [r7, #4]
20000b54:	4413      	add	r3, r2
20000b56:	607b      	str	r3, [r7, #4]
		}
		StartAddress+=4;
20000b58:	68fb      	ldr	r3, [r7, #12]
20000b5a:	3304      	adds	r3, #4
20000b5c:	60fb      	str	r3, [r7, #12]
	for(cnt=0; cnt<Size ; cnt+=4)
20000b5e:	69bb      	ldr	r3, [r7, #24]
20000b60:	3304      	adds	r3, #4
20000b62:	61bb      	str	r3, [r7, #24]
20000b64:	69bb      	ldr	r3, [r7, #24]
20000b66:	68ba      	ldr	r2, [r7, #8]
20000b68:	429a      	cmp	r2, r3
20000b6a:	f63f af17 	bhi.w	2000099c <CheckSum+0x46>
	}

	return (InitVal);
20000b6e:	687b      	ldr	r3, [r7, #4]
}
20000b70:	4618      	mov	r0, r3
20000b72:	3720      	adds	r7, #32
20000b74:	46bd      	mov	sp, r7
20000b76:	bd80      	pop	{r7, pc}

20000b78 <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement)
{
20000b78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
20000b7c:	b08a      	sub	sp, #40	; 0x28
20000b7e:	af00      	add	r7, sp, #0
20000b80:	60f8      	str	r0, [r7, #12]
20000b82:	60b9      	str	r1, [r7, #8]
20000b84:	607a      	str	r2, [r7, #4]
20000b86:	603b      	str	r3, [r7, #0]
	uint32_t InitVal = 0;
20000b88:	2300      	movs	r3, #0
20000b8a:	623b      	str	r3, [r7, #32]
	uint32_t VerifiedData = 0;
20000b8c:	2300      	movs	r3, #0
20000b8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t TmpBuffer = 0x00;
20000b90:	2300      	movs	r3, #0
20000b92:	75fb      	strb	r3, [r7, #23]
	uint64_t checksum;
	Size*=4;
20000b94:	687b      	ldr	r3, [r7, #4]
20000b96:	009b      	lsls	r3, r3, #2
20000b98:	607b      	str	r3, [r7, #4]

	checksum = CheckSum((uint32_t)MemoryAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
20000b9a:	683b      	ldr	r3, [r7, #0]
20000b9c:	f003 020f 	and.w	r2, r3, #15
20000ba0:	68fb      	ldr	r3, [r7, #12]
20000ba2:	18d0      	adds	r0, r2, r3
20000ba4:	683b      	ldr	r3, [r7, #0]
20000ba6:	0c1b      	lsrs	r3, r3, #16
20000ba8:	f003 030f 	and.w	r3, r3, #15
20000bac:	687a      	ldr	r2, [r7, #4]
20000bae:	1ad3      	subs	r3, r2, r3
20000bb0:	6a3a      	ldr	r2, [r7, #32]
20000bb2:	4619      	mov	r1, r3
20000bb4:	f7ff fecf 	bl	20000956 <CheckSum>
20000bb8:	4603      	mov	r3, r0
20000bba:	461a      	mov	r2, r3
20000bbc:	f04f 0300 	mov.w	r3, #0
20000bc0:	e9c7 2306 	strd	r2, r3, [r7, #24]

	while (Size>VerifiedData)
20000bc4:	e02b      	b.n	20000c1e <Verify+0xa6>
	{
		sFLASH_ReadBuffer(&TmpBuffer, MemoryAddr+VerifiedData, 1);
20000bc6:	68fa      	ldr	r2, [r7, #12]
20000bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000bca:	18d1      	adds	r1, r2, r3
20000bcc:	f107 0317 	add.w	r3, r7, #23
20000bd0:	2201      	movs	r2, #1
20000bd2:	4618      	mov	r0, r3
20000bd4:	f000 fa5a 	bl	2000108c <sFLASH_ReadBuffer>

		if (TmpBuffer != *((uint8_t*)RAMBufferAddr+VerifiedData))
20000bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20000bda:	68bb      	ldr	r3, [r7, #8]
20000bdc:	4413      	add	r3, r2
20000bde:	781a      	ldrb	r2, [r3, #0]
20000be0:	7dfb      	ldrb	r3, [r7, #23]
20000be2:	429a      	cmp	r2, r3
20000be4:	d018      	beq.n	20000c18 <Verify+0xa0>
			return ((checksum<<32) + MemoryAddr+VerifiedData);
20000be6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
20000bea:	f04f 0200 	mov.w	r2, #0
20000bee:	f04f 0300 	mov.w	r3, #0
20000bf2:	0003      	movs	r3, r0
20000bf4:	2200      	movs	r2, #0
20000bf6:	68f9      	ldr	r1, [r7, #12]
20000bf8:	4608      	mov	r0, r1
20000bfa:	f04f 0100 	mov.w	r1, #0
20000bfe:	eb12 0800 	adds.w	r8, r2, r0
20000c02:	eb43 0901 	adc.w	r9, r3, r1
20000c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c08:	461a      	mov	r2, r3
20000c0a:	f04f 0300 	mov.w	r3, #0
20000c0e:	eb18 0402 	adds.w	r4, r8, r2
20000c12:	eb49 0503 	adc.w	r5, r9, r3
20000c16:	e00e      	b.n	20000c36 <Verify+0xbe>

		VerifiedData++;
20000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c1a:	3301      	adds	r3, #1
20000c1c:	627b      	str	r3, [r7, #36]	; 0x24
	while (Size>VerifiedData)
20000c1e:	687a      	ldr	r2, [r7, #4]
20000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000c22:	429a      	cmp	r2, r3
20000c24:	d8cf      	bhi.n	20000bc6 <Verify+0x4e>
	}

	return (checksum<<32);
20000c26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20000c2a:	f04f 0400 	mov.w	r4, #0
20000c2e:	f04f 0500 	mov.w	r5, #0
20000c32:	0015      	movs	r5, r2
20000c34:	2400      	movs	r4, #0
20000c36:	4622      	mov	r2, r4
20000c38:	462b      	mov	r3, r5
}
20000c3a:	4610      	mov	r0, r2
20000c3c:	4619      	mov	r1, r3
20000c3e:	3728      	adds	r7, #40	; 0x28
20000c40:	46bd      	mov	sp, r7
20000c42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

20000c48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
20000c48:	b580      	push	{r7, lr}
20000c4a:	b088      	sub	sp, #32
20000c4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000c4e:	f107 030c 	add.w	r3, r7, #12
20000c52:	2200      	movs	r2, #0
20000c54:	601a      	str	r2, [r3, #0]
20000c56:	605a      	str	r2, [r3, #4]
20000c58:	609a      	str	r2, [r3, #8]
20000c5a:	60da      	str	r2, [r3, #12]
20000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
20000c5e:	2300      	movs	r3, #0
20000c60:	60bb      	str	r3, [r7, #8]
20000c62:	4b20      	ldr	r3, [pc, #128]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000c66:	4a1f      	ldr	r2, [pc, #124]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000c68:	f043 0304 	orr.w	r3, r3, #4
20000c6c:	6313      	str	r3, [r2, #48]	; 0x30
20000c6e:	4b1d      	ldr	r3, [pc, #116]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000c72:	f003 0304 	and.w	r3, r3, #4
20000c76:	60bb      	str	r3, [r7, #8]
20000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
20000c7a:	2300      	movs	r3, #0
20000c7c:	607b      	str	r3, [r7, #4]
20000c7e:	4b19      	ldr	r3, [pc, #100]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000c82:	4a18      	ldr	r2, [pc, #96]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000c84:	f043 0302 	orr.w	r3, r3, #2
20000c88:	6313      	str	r3, [r2, #48]	; 0x30
20000c8a:	4b16      	ldr	r3, [pc, #88]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000c8e:	f003 0302 	and.w	r3, r3, #2
20000c92:	607b      	str	r3, [r7, #4]
20000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
20000c96:	2300      	movs	r3, #0
20000c98:	603b      	str	r3, [r7, #0]
20000c9a:	4b12      	ldr	r3, [pc, #72]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000c9e:	4a11      	ldr	r2, [pc, #68]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000ca0:	f043 0301 	orr.w	r3, r3, #1
20000ca4:	6313      	str	r3, [r2, #48]	; 0x30
20000ca6:	4b0f      	ldr	r3, [pc, #60]	; (20000ce4 <MX_GPIO_Init+0x9c>)
20000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000caa:	f003 0301 	and.w	r3, r3, #1
20000cae:	603b      	str	r3, [r7, #0]
20000cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
20000cb2:	2201      	movs	r2, #1
20000cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
20000cb8:	480b      	ldr	r0, [pc, #44]	; (20000ce8 <MX_GPIO_Init+0xa0>)
20000cba:	f004 fdb5 	bl	20005828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
20000cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
20000cc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
20000cc4:	2301      	movs	r3, #1
20000cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
20000cc8:	2300      	movs	r3, #0
20000cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20000ccc:	2303      	movs	r3, #3
20000cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
20000cd0:	f107 030c 	add.w	r3, r7, #12
20000cd4:	4619      	mov	r1, r3
20000cd6:	4804      	ldr	r0, [pc, #16]	; (20000ce8 <MX_GPIO_Init+0xa0>)
20000cd8:	f004 faf6 	bl	200052c8 <HAL_GPIO_Init>

}
20000cdc:	bf00      	nop
20000cde:	3720      	adds	r7, #32
20000ce0:	46bd      	mov	sp, r7
20000ce2:	bd80      	pop	{r7, pc}
20000ce4:	40023800 	.word	0x40023800
20000ce8:	40020400 	.word	0x40020400

20000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000cec:	b580      	push	{r7, lr}
20000cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000cf0:	f000 fd6a 	bl	200017c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
20000cf4:	f000 f806 	bl	20000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000cf8:	f7ff ffa6 	bl	20000c48 <MX_GPIO_Init>
  MX_SPI2_Init();
20000cfc:	f000 f872 	bl	20000de4 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20000d00:	e7fe      	b.n	20000d00 <main+0x14>
	...

20000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
20000d04:	b580      	push	{r7, lr}
20000d06:	b094      	sub	sp, #80	; 0x50
20000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000d0a:	f107 0320 	add.w	r3, r7, #32
20000d0e:	2230      	movs	r2, #48	; 0x30
20000d10:	2100      	movs	r1, #0
20000d12:	4618      	mov	r0, r3
20000d14:	f008 fbe4 	bl	200094e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
20000d18:	f107 030c 	add.w	r3, r7, #12
20000d1c:	2200      	movs	r2, #0
20000d1e:	601a      	str	r2, [r3, #0]
20000d20:	605a      	str	r2, [r3, #4]
20000d22:	609a      	str	r2, [r3, #8]
20000d24:	60da      	str	r2, [r3, #12]
20000d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
20000d28:	2300      	movs	r3, #0
20000d2a:	60bb      	str	r3, [r7, #8]
20000d2c:	4b28      	ldr	r3, [pc, #160]	; (20000dd0 <SystemClock_Config+0xcc>)
20000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000d30:	4a27      	ldr	r2, [pc, #156]	; (20000dd0 <SystemClock_Config+0xcc>)
20000d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000d36:	6413      	str	r3, [r2, #64]	; 0x40
20000d38:	4b25      	ldr	r3, [pc, #148]	; (20000dd0 <SystemClock_Config+0xcc>)
20000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000d40:	60bb      	str	r3, [r7, #8]
20000d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
20000d44:	2300      	movs	r3, #0
20000d46:	607b      	str	r3, [r7, #4]
20000d48:	4b22      	ldr	r3, [pc, #136]	; (20000dd4 <SystemClock_Config+0xd0>)
20000d4a:	681b      	ldr	r3, [r3, #0]
20000d4c:	4a21      	ldr	r2, [pc, #132]	; (20000dd4 <SystemClock_Config+0xd0>)
20000d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20000d52:	6013      	str	r3, [r2, #0]
20000d54:	4b1f      	ldr	r3, [pc, #124]	; (20000dd4 <SystemClock_Config+0xd0>)
20000d56:	681b      	ldr	r3, [r3, #0]
20000d58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20000d5c:	607b      	str	r3, [r7, #4]
20000d5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20000d60:	2302      	movs	r3, #2
20000d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20000d64:	2301      	movs	r3, #1
20000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
20000d68:	2310      	movs	r3, #16
20000d6a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000d6c:	2302      	movs	r3, #2
20000d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
20000d70:	2300      	movs	r3, #0
20000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
20000d74:	2308      	movs	r3, #8
20000d76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
20000d78:	23a8      	movs	r3, #168	; 0xa8
20000d7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20000d7c:	2302      	movs	r3, #2
20000d7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
20000d80:	2304      	movs	r3, #4
20000d82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
20000d84:	f107 0320 	add.w	r3, r7, #32
20000d88:	4618      	mov	r0, r3
20000d8a:	f005 f81f 	bl	20005dcc <HAL_RCC_OscConfig>
20000d8e:	4603      	mov	r3, r0
20000d90:	2b00      	cmp	r3, #0
20000d92:	d001      	beq.n	20000d98 <SystemClock_Config+0x94>
  {
    Error_Handler();
20000d94:	f000 f820 	bl	20000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000d98:	230f      	movs	r3, #15
20000d9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20000d9c:	2302      	movs	r3, #2
20000d9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
20000da0:	2300      	movs	r3, #0
20000da2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
20000da4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
20000da8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
20000daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20000dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
20000db0:	f107 030c 	add.w	r3, r7, #12
20000db4:	2105      	movs	r1, #5
20000db6:	4618      	mov	r0, r3
20000db8:	f005 fa80 	bl	200062bc <HAL_RCC_ClockConfig>
20000dbc:	4603      	mov	r3, r0
20000dbe:	2b00      	cmp	r3, #0
20000dc0:	d001      	beq.n	20000dc6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
20000dc2:	f000 f809 	bl	20000dd8 <Error_Handler>
  }
}
20000dc6:	bf00      	nop
20000dc8:	3750      	adds	r7, #80	; 0x50
20000dca:	46bd      	mov	sp, r7
20000dcc:	bd80      	pop	{r7, pc}
20000dce:	bf00      	nop
20000dd0:	40023800 	.word	0x40023800
20000dd4:	40007000 	.word	0x40007000

20000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
20000dd8:	b480      	push	{r7}
20000dda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
20000ddc:	b672      	cpsid	i
}
20000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
20000de0:	e7fe      	b.n	20000de0 <Error_Handler+0x8>
	...

20000de4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
20000de4:	b580      	push	{r7, lr}
20000de6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
20000de8:	4b17      	ldr	r3, [pc, #92]	; (20000e48 <MX_SPI2_Init+0x64>)
20000dea:	4a18      	ldr	r2, [pc, #96]	; (20000e4c <MX_SPI2_Init+0x68>)
20000dec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
20000dee:	4b16      	ldr	r3, [pc, #88]	; (20000e48 <MX_SPI2_Init+0x64>)
20000df0:	f44f 7282 	mov.w	r2, #260	; 0x104
20000df4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
20000df6:	4b14      	ldr	r3, [pc, #80]	; (20000e48 <MX_SPI2_Init+0x64>)
20000df8:	2200      	movs	r2, #0
20000dfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
20000dfc:	4b12      	ldr	r3, [pc, #72]	; (20000e48 <MX_SPI2_Init+0x64>)
20000dfe:	2200      	movs	r2, #0
20000e00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
20000e02:	4b11      	ldr	r3, [pc, #68]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e04:	2200      	movs	r2, #0
20000e06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
20000e08:	4b0f      	ldr	r3, [pc, #60]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e0a:	2200      	movs	r2, #0
20000e0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
20000e0e:	4b0e      	ldr	r3, [pc, #56]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e10:	f44f 7200 	mov.w	r2, #512	; 0x200
20000e14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20000e16:	4b0c      	ldr	r3, [pc, #48]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e18:	2200      	movs	r2, #0
20000e1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
20000e1c:	4b0a      	ldr	r3, [pc, #40]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e1e:	2200      	movs	r2, #0
20000e20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
20000e22:	4b09      	ldr	r3, [pc, #36]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e24:	2200      	movs	r2, #0
20000e26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20000e28:	4b07      	ldr	r3, [pc, #28]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e2a:	2200      	movs	r2, #0
20000e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
20000e2e:	4b06      	ldr	r3, [pc, #24]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e30:	220a      	movs	r2, #10
20000e32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
20000e34:	4804      	ldr	r0, [pc, #16]	; (20000e48 <MX_SPI2_Init+0x64>)
20000e36:	f006 f83f 	bl	20006eb8 <HAL_SPI_Init>
20000e3a:	4603      	mov	r3, r0
20000e3c:	2b00      	cmp	r3, #0
20000e3e:	d001      	beq.n	20000e44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
20000e40:	f7ff ffca 	bl	20000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
20000e44:	bf00      	nop
20000e46:	bd80      	pop	{r7, pc}
20000e48:	20000434 	.word	0x20000434
20000e4c:	40003800 	.word	0x40003800

20000e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
20000e50:	b580      	push	{r7, lr}
20000e52:	b08a      	sub	sp, #40	; 0x28
20000e54:	af00      	add	r7, sp, #0
20000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000e58:	f107 0314 	add.w	r3, r7, #20
20000e5c:	2200      	movs	r2, #0
20000e5e:	601a      	str	r2, [r3, #0]
20000e60:	605a      	str	r2, [r3, #4]
20000e62:	609a      	str	r2, [r3, #8]
20000e64:	60da      	str	r2, [r3, #12]
20000e66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
20000e68:	687b      	ldr	r3, [r7, #4]
20000e6a:	681b      	ldr	r3, [r3, #0]
20000e6c:	4a28      	ldr	r2, [pc, #160]	; (20000f10 <HAL_SPI_MspInit+0xc0>)
20000e6e:	4293      	cmp	r3, r2
20000e70:	d14a      	bne.n	20000f08 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
20000e72:	2300      	movs	r3, #0
20000e74:	613b      	str	r3, [r7, #16]
20000e76:	4b27      	ldr	r3, [pc, #156]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000e7a:	4a26      	ldr	r2, [pc, #152]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20000e80:	6413      	str	r3, [r2, #64]	; 0x40
20000e82:	4b24      	ldr	r3, [pc, #144]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20000e8a:	613b      	str	r3, [r7, #16]
20000e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
20000e8e:	2300      	movs	r3, #0
20000e90:	60fb      	str	r3, [r7, #12]
20000e92:	4b20      	ldr	r3, [pc, #128]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000e96:	4a1f      	ldr	r2, [pc, #124]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000e98:	f043 0304 	orr.w	r3, r3, #4
20000e9c:	6313      	str	r3, [r2, #48]	; 0x30
20000e9e:	4b1d      	ldr	r3, [pc, #116]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000ea2:	f003 0304 	and.w	r3, r3, #4
20000ea6:	60fb      	str	r3, [r7, #12]
20000ea8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
20000eaa:	2300      	movs	r3, #0
20000eac:	60bb      	str	r3, [r7, #8]
20000eae:	4b19      	ldr	r3, [pc, #100]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000eb2:	4a18      	ldr	r2, [pc, #96]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000eb4:	f043 0302 	orr.w	r3, r3, #2
20000eb8:	6313      	str	r3, [r2, #48]	; 0x30
20000eba:	4b16      	ldr	r3, [pc, #88]	; (20000f14 <HAL_SPI_MspInit+0xc4>)
20000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000ebe:	f003 0302 	and.w	r3, r3, #2
20000ec2:	60bb      	str	r3, [r7, #8]
20000ec4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = FLASH_MISO_Pin|FLASH_MOSI_Pin;
20000ec6:	230c      	movs	r3, #12
20000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20000eca:	2302      	movs	r3, #2
20000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20000ece:	2302      	movs	r3, #2
20000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20000ed2:	2303      	movs	r3, #3
20000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
20000ed6:	2305      	movs	r3, #5
20000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
20000eda:	f107 0314 	add.w	r3, r7, #20
20000ede:	4619      	mov	r1, r3
20000ee0:	480d      	ldr	r0, [pc, #52]	; (20000f18 <HAL_SPI_MspInit+0xc8>)
20000ee2:	f004 f9f1 	bl	200052c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_SCK_Pin;
20000ee6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
20000eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20000eec:	2302      	movs	r3, #2
20000eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20000ef0:	2302      	movs	r3, #2
20000ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20000ef4:	2303      	movs	r3, #3
20000ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
20000ef8:	2305      	movs	r3, #5
20000efa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FLASH_SCK_GPIO_Port, &GPIO_InitStruct);
20000efc:	f107 0314 	add.w	r3, r7, #20
20000f00:	4619      	mov	r1, r3
20000f02:	4806      	ldr	r0, [pc, #24]	; (20000f1c <HAL_SPI_MspInit+0xcc>)
20000f04:	f004 f9e0 	bl	200052c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
20000f08:	bf00      	nop
20000f0a:	3728      	adds	r7, #40	; 0x28
20000f0c:	46bd      	mov	sp, r7
20000f0e:	bd80      	pop	{r7, pc}
20000f10:	40003800 	.word	0x40003800
20000f14:	40023800 	.word	0x40023800
20000f18:	40020800 	.word	0x40020800
20000f1c:	40020400 	.word	0x40020400

20000f20 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
20000f20:	b580      	push	{r7, lr}
20000f22:	b082      	sub	sp, #8
20000f24:	af00      	add	r7, sp, #0
20000f26:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI2)
20000f28:	687b      	ldr	r3, [r7, #4]
20000f2a:	681b      	ldr	r3, [r3, #0]
20000f2c:	4a0a      	ldr	r2, [pc, #40]	; (20000f58 <HAL_SPI_MspDeInit+0x38>)
20000f2e:	4293      	cmp	r3, r2
20000f30:	d10e      	bne.n	20000f50 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
20000f32:	4b0a      	ldr	r3, [pc, #40]	; (20000f5c <HAL_SPI_MspDeInit+0x3c>)
20000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20000f36:	4a09      	ldr	r2, [pc, #36]	; (20000f5c <HAL_SPI_MspDeInit+0x3c>)
20000f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
20000f3c:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(GPIOC, FLASH_MISO_Pin|FLASH_MOSI_Pin);
20000f3e:	210c      	movs	r1, #12
20000f40:	4807      	ldr	r0, [pc, #28]	; (20000f60 <HAL_SPI_MspDeInit+0x40>)
20000f42:	f004 fb5d 	bl	20005600 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(FLASH_SCK_GPIO_Port, FLASH_SCK_Pin);
20000f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
20000f4a:	4806      	ldr	r0, [pc, #24]	; (20000f64 <HAL_SPI_MspDeInit+0x44>)
20000f4c:	f004 fb58 	bl	20005600 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
20000f50:	bf00      	nop
20000f52:	3708      	adds	r7, #8
20000f54:	46bd      	mov	sp, r7
20000f56:	bd80      	pop	{r7, pc}
20000f58:	40003800 	.word	0x40003800
20000f5c:	40023800 	.word	0x40023800
20000f60:	40020800 	.word	0x40020800
20000f64:	40020400 	.word	0x40020400

20000f68 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
20000f68:	b580      	push	{r7, lr}
20000f6a:	b084      	sub	sp, #16
20000f6c:	af00      	add	r7, sp, #0
20000f6e:	6078      	str	r0, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_SE;
20000f70:	2320      	movs	r3, #32
20000f72:	733b      	strb	r3, [r7, #12]
	txData[1] = (SectorAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
20000f74:	687b      	ldr	r3, [r7, #4]
20000f76:	0c1b      	lsrs	r3, r3, #16
20000f78:	b2db      	uxtb	r3, r3
20000f7a:	737b      	strb	r3, [r7, #13]
	txData[2] = (SectorAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
20000f7c:	687b      	ldr	r3, [r7, #4]
20000f7e:	0a1b      	lsrs	r3, r3, #8
20000f80:	b2db      	uxtb	r3, r3
20000f82:	73bb      	strb	r3, [r7, #14]
	txData[3] = SectorAddr & 0xFF;				/* low nibble address byte to write to */
20000f84:	687b      	ldr	r3, [r7, #4]
20000f86:	b2db      	uxtb	r3, r3
20000f88:	73fb      	strb	r3, [r7, #15]

	/* Send write enable instruction */
	sFLASH_WriteEnable();
20000f8a:	f000 f983 	bl	20001294 <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000f8e:	2200      	movs	r2, #0
20000f90:	f44f 7100 	mov.w	r1, #512	; 0x200
20000f94:	480b      	ldr	r0, [pc, #44]	; (20000fc4 <sFLASH_EraseSector+0x5c>)
20000f96:	f004 fc47 	bl	20005828 <HAL_GPIO_WritePin>

	/* Send Sector Erase instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000f9a:	f107 010c 	add.w	r1, r7, #12
20000f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000fa2:	2204      	movs	r2, #4
20000fa4:	4808      	ldr	r0, [pc, #32]	; (20000fc8 <sFLASH_EraseSector+0x60>)
20000fa6:	f006 f84c 	bl	20007042 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000faa:	2201      	movs	r2, #1
20000fac:	f44f 7100 	mov.w	r1, #512	; 0x200
20000fb0:	4804      	ldr	r0, [pc, #16]	; (20000fc4 <sFLASH_EraseSector+0x5c>)
20000fb2:	f004 fc39 	bl	20005828 <HAL_GPIO_WritePin>

	/*!< Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
20000fb6:	f000 f98d 	bl	200012d4 <sFLASH_WaitForWriteEnd>
}
20000fba:	bf00      	nop
20000fbc:	3710      	adds	r7, #16
20000fbe:	46bd      	mov	sp, r7
20000fc0:	bd80      	pop	{r7, pc}
20000fc2:	bf00      	nop
20000fc4:	40020400 	.word	0x40020400
20000fc8:	20000434 	.word	0x20000434

20000fcc <sFLASH_EraseChip>:
  * @brief  Erases the entire FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_EraseChip(void)
{
20000fcc:	b580      	push	{r7, lr}
20000fce:	b082      	sub	sp, #8
20000fd0:	af00      	add	r7, sp, #0
	uint8_t txData[1];

	txData[0] = FLASH_CMD_CE;
20000fd2:	2360      	movs	r3, #96	; 0x60
20000fd4:	713b      	strb	r3, [r7, #4]

	/* Send write enable instruction */
	sFLASH_WriteEnable();
20000fd6:	f000 f95d 	bl	20001294 <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000fda:	2200      	movs	r2, #0
20000fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
20000fe0:	480a      	ldr	r0, [pc, #40]	; (2000100c <sFLASH_EraseChip+0x40>)
20000fe2:	f004 fc21 	bl	20005828 <HAL_GPIO_WritePin>

	/* Send Bulk Erase instruction  */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000fe6:	1d39      	adds	r1, r7, #4
20000fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20000fec:	2201      	movs	r2, #1
20000fee:	4808      	ldr	r0, [pc, #32]	; (20001010 <sFLASH_EraseChip+0x44>)
20000ff0:	f006 f827 	bl	20007042 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000ff4:	2201      	movs	r2, #1
20000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
20000ffa:	4804      	ldr	r0, [pc, #16]	; (2000100c <sFLASH_EraseChip+0x40>)
20000ffc:	f004 fc14 	bl	20005828 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
20001000:	f000 f968 	bl	200012d4 <sFLASH_WaitForWriteEnd>
}
20001004:	bf00      	nop
20001006:	3708      	adds	r7, #8
20001008:	46bd      	mov	sp, r7
2000100a:	bd80      	pop	{r7, pc}
2000100c:	40020400 	.word	0x40020400
20001010:	20000434 	.word	0x20000434

20001014 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
20001014:	b580      	push	{r7, lr}
20001016:	b086      	sub	sp, #24
20001018:	af00      	add	r7, sp, #0
2000101a:	60f8      	str	r0, [r7, #12]
2000101c:	60b9      	str	r1, [r7, #8]
2000101e:	607a      	str	r2, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_PP;
20001020:	2302      	movs	r3, #2
20001022:	753b      	strb	r3, [r7, #20]
	txData[1] = (WriteAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
20001024:	68bb      	ldr	r3, [r7, #8]
20001026:	0c1b      	lsrs	r3, r3, #16
20001028:	b2db      	uxtb	r3, r3
2000102a:	757b      	strb	r3, [r7, #21]
	txData[2] = (WriteAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
2000102c:	68bb      	ldr	r3, [r7, #8]
2000102e:	0a1b      	lsrs	r3, r3, #8
20001030:	b2db      	uxtb	r3, r3
20001032:	75bb      	strb	r3, [r7, #22]
	txData[3] = WriteAddr & 0xFF;				/* low nibble address byte to write to */
20001034:	68bb      	ldr	r3, [r7, #8]
20001036:	b2db      	uxtb	r3, r3
20001038:	75fb      	strb	r3, [r7, #23]

	/* Enable the write access to the FLASH */
	sFLASH_WriteEnable();
2000103a:	f000 f92b 	bl	20001294 <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
2000103e:	2200      	movs	r2, #0
20001040:	f44f 7100 	mov.w	r1, #512	; 0x200
20001044:	480f      	ldr	r0, [pc, #60]	; (20001084 <sFLASH_WritePage+0x70>)
20001046:	f004 fbef 	bl	20005828 <HAL_GPIO_WritePin>

	/* Send "Write to Memory " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
2000104a:	f107 0114 	add.w	r1, r7, #20
2000104e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001052:	2204      	movs	r2, #4
20001054:	480c      	ldr	r0, [pc, #48]	; (20001088 <sFLASH_WritePage+0x74>)
20001056:	f005 fff4 	bl	20007042 <HAL_SPI_Transmit>

	/* Send data */
	HAL_SPI_Transmit(&hspi2, pBuffer, NumByteToWrite, HAL_MAX_DELAY);
2000105a:	687b      	ldr	r3, [r7, #4]
2000105c:	b29a      	uxth	r2, r3
2000105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001062:	68f9      	ldr	r1, [r7, #12]
20001064:	4808      	ldr	r0, [pc, #32]	; (20001088 <sFLASH_WritePage+0x74>)
20001066:	f005 ffec 	bl	20007042 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
2000106a:	2201      	movs	r2, #1
2000106c:	f44f 7100 	mov.w	r1, #512	; 0x200
20001070:	4804      	ldr	r0, [pc, #16]	; (20001084 <sFLASH_WritePage+0x70>)
20001072:	f004 fbd9 	bl	20005828 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
20001076:	f000 f92d 	bl	200012d4 <sFLASH_WaitForWriteEnd>
}
2000107a:	bf00      	nop
2000107c:	3718      	adds	r7, #24
2000107e:	46bd      	mov	sp, r7
20001080:	bd80      	pop	{r7, pc}
20001082:	bf00      	nop
20001084:	40020400 	.word	0x40020400
20001088:	20000434 	.word	0x20000434

2000108c <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
2000108c:	b580      	push	{r7, lr}
2000108e:	b086      	sub	sp, #24
20001090:	af00      	add	r7, sp, #0
20001092:	60f8      	str	r0, [r7, #12]
20001094:	60b9      	str	r1, [r7, #8]
20001096:	607a      	str	r2, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_READ;
20001098:	2303      	movs	r3, #3
2000109a:	753b      	strb	r3, [r7, #20]
	txData[1] = (ReadAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
2000109c:	68bb      	ldr	r3, [r7, #8]
2000109e:	0c1b      	lsrs	r3, r3, #16
200010a0:	b2db      	uxtb	r3, r3
200010a2:	757b      	strb	r3, [r7, #21]
	txData[2] = (ReadAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
200010a4:	68bb      	ldr	r3, [r7, #8]
200010a6:	0a1b      	lsrs	r3, r3, #8
200010a8:	b2db      	uxtb	r3, r3
200010aa:	75bb      	strb	r3, [r7, #22]
	txData[3] = ReadAddr & 0xFF;				/* low nibble address byte to write to */
200010ac:	68bb      	ldr	r3, [r7, #8]
200010ae:	b2db      	uxtb	r3, r3
200010b0:	75fb      	strb	r3, [r7, #23]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
200010b2:	2200      	movs	r2, #0
200010b4:	f44f 7100 	mov.w	r1, #512	; 0x200
200010b8:	480e      	ldr	r0, [pc, #56]	; (200010f4 <sFLASH_ReadBuffer+0x68>)
200010ba:	f004 fbb5 	bl	20005828 <HAL_GPIO_WritePin>

	/* Send "Read from Memory " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
200010be:	f107 0114 	add.w	r1, r7, #20
200010c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200010c6:	2204      	movs	r2, #4
200010c8:	480b      	ldr	r0, [pc, #44]	; (200010f8 <sFLASH_ReadBuffer+0x6c>)
200010ca:	f005 ffba 	bl	20007042 <HAL_SPI_Transmit>

	/* Read data from the FLASH */
	HAL_SPI_Receive(&hspi2, pBuffer, NumByteToRead, HAL_MAX_DELAY);
200010ce:	687b      	ldr	r3, [r7, #4]
200010d0:	b29a      	uxth	r2, r3
200010d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200010d6:	68f9      	ldr	r1, [r7, #12]
200010d8:	4807      	ldr	r0, [pc, #28]	; (200010f8 <sFLASH_ReadBuffer+0x6c>)
200010da:	f006 f8ee 	bl	200072ba <HAL_SPI_Receive>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
200010de:	2201      	movs	r2, #1
200010e0:	f44f 7100 	mov.w	r1, #512	; 0x200
200010e4:	4803      	ldr	r0, [pc, #12]	; (200010f4 <sFLASH_ReadBuffer+0x68>)
200010e6:	f004 fb9f 	bl	20005828 <HAL_GPIO_WritePin>
}
200010ea:	bf00      	nop
200010ec:	3718      	adds	r7, #24
200010ee:	46bd      	mov	sp, r7
200010f0:	bd80      	pop	{r7, pc}
200010f2:	bf00      	nop
200010f4:	40020400 	.word	0x40020400
200010f8:	20000434 	.word	0x20000434

200010fc <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
200010fc:	b580      	push	{r7, lr}
200010fe:	b08a      	sub	sp, #40	; 0x28
20001100:	af00      	add	r7, sp, #0
20001102:	60f8      	str	r0, [r7, #12]
20001104:	60b9      	str	r1, [r7, #8]
20001106:	607a      	str	r2, [r7, #4]
	uint32_t NumOfPage = 0;
20001108:	2300      	movs	r3, #0
2000110a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t NumOfSingle = 0;
2000110c:	2300      	movs	r3, #0
2000110e:	623b      	str	r3, [r7, #32]
	uint32_t Addr = 0;
20001110:	2300      	movs	r3, #0
20001112:	61fb      	str	r3, [r7, #28]
	uint32_t count = 0;
20001114:	2300      	movs	r3, #0
20001116:	61bb      	str	r3, [r7, #24]
	uint32_t temp = 0;
20001118:	2300      	movs	r3, #0
2000111a:	617b      	str	r3, [r7, #20]

	Addr = WriteAddr % sFLASH_SPI_PAGE_SIZE;
2000111c:	68bb      	ldr	r3, [r7, #8]
2000111e:	b2db      	uxtb	r3, r3
20001120:	61fb      	str	r3, [r7, #28]
	count = sFLASH_SPI_PAGE_SIZE - Addr;
20001122:	69fb      	ldr	r3, [r7, #28]
20001124:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
20001128:	61bb      	str	r3, [r7, #24]
	NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGE_SIZE;
2000112a:	687b      	ldr	r3, [r7, #4]
2000112c:	0a1b      	lsrs	r3, r3, #8
2000112e:	627b      	str	r3, [r7, #36]	; 0x24
	NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGE_SIZE;
20001130:	687b      	ldr	r3, [r7, #4]
20001132:	b2db      	uxtb	r3, r3
20001134:	623b      	str	r3, [r7, #32]

	if (Addr == 0) /* WriteAddr is sFLASH_PAGESIZE aligned  */
20001136:	69fb      	ldr	r3, [r7, #28]
20001138:	2b00      	cmp	r3, #0
2000113a:	d121      	bne.n	20001180 <sFLASH_WriteBuffer+0x84>
	{
		if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
2000113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000113e:	2b00      	cmp	r3, #0
20001140:	d113      	bne.n	2000116a <sFLASH_WriteBuffer+0x6e>
		{
			sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
20001142:	687a      	ldr	r2, [r7, #4]
20001144:	68b9      	ldr	r1, [r7, #8]
20001146:	68f8      	ldr	r0, [r7, #12]
20001148:	f7ff ff64 	bl	20001014 <sFLASH_WritePage>
			{
				sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
			}
		}
	}
}
2000114c:	e06f      	b.n	2000122e <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGE_SIZE);
2000114e:	f44f 7280 	mov.w	r2, #256	; 0x100
20001152:	68b9      	ldr	r1, [r7, #8]
20001154:	68f8      	ldr	r0, [r7, #12]
20001156:	f7ff ff5d 	bl	20001014 <sFLASH_WritePage>
				WriteAddr +=  sFLASH_SPI_PAGE_SIZE;
2000115a:	68bb      	ldr	r3, [r7, #8]
2000115c:	f503 7380 	add.w	r3, r3, #256	; 0x100
20001160:	60bb      	str	r3, [r7, #8]
				pBuffer += sFLASH_SPI_PAGE_SIZE;
20001162:	68fb      	ldr	r3, [r7, #12]
20001164:	f503 7380 	add.w	r3, r3, #256	; 0x100
20001168:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
2000116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000116c:	1e5a      	subs	r2, r3, #1
2000116e:	627a      	str	r2, [r7, #36]	; 0x24
20001170:	2b00      	cmp	r3, #0
20001172:	d1ec      	bne.n	2000114e <sFLASH_WriteBuffer+0x52>
			sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
20001174:	6a3a      	ldr	r2, [r7, #32]
20001176:	68b9      	ldr	r1, [r7, #8]
20001178:	68f8      	ldr	r0, [r7, #12]
2000117a:	f7ff ff4b 	bl	20001014 <sFLASH_WritePage>
}
2000117e:	e056      	b.n	2000122e <sFLASH_WriteBuffer+0x132>
		if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
20001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001182:	2b00      	cmp	r3, #0
20001184:	d120      	bne.n	200011c8 <sFLASH_WriteBuffer+0xcc>
			if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
20001186:	6a3a      	ldr	r2, [r7, #32]
20001188:	69bb      	ldr	r3, [r7, #24]
2000118a:	429a      	cmp	r2, r3
2000118c:	d916      	bls.n	200011bc <sFLASH_WriteBuffer+0xc0>
				temp = NumOfSingle - count;
2000118e:	6a3a      	ldr	r2, [r7, #32]
20001190:	69bb      	ldr	r3, [r7, #24]
20001192:	1ad3      	subs	r3, r2, r3
20001194:	617b      	str	r3, [r7, #20]
				sFLASH_WritePage(pBuffer, WriteAddr, count);
20001196:	69ba      	ldr	r2, [r7, #24]
20001198:	68b9      	ldr	r1, [r7, #8]
2000119a:	68f8      	ldr	r0, [r7, #12]
2000119c:	f7ff ff3a 	bl	20001014 <sFLASH_WritePage>
				WriteAddr +=  count;
200011a0:	68ba      	ldr	r2, [r7, #8]
200011a2:	69bb      	ldr	r3, [r7, #24]
200011a4:	4413      	add	r3, r2
200011a6:	60bb      	str	r3, [r7, #8]
				pBuffer += count;
200011a8:	68fa      	ldr	r2, [r7, #12]
200011aa:	69bb      	ldr	r3, [r7, #24]
200011ac:	4413      	add	r3, r2
200011ae:	60fb      	str	r3, [r7, #12]
				sFLASH_WritePage(pBuffer, WriteAddr, temp);
200011b0:	697a      	ldr	r2, [r7, #20]
200011b2:	68b9      	ldr	r1, [r7, #8]
200011b4:	68f8      	ldr	r0, [r7, #12]
200011b6:	f7ff ff2d 	bl	20001014 <sFLASH_WritePage>
}
200011ba:	e038      	b.n	2000122e <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
200011bc:	687a      	ldr	r2, [r7, #4]
200011be:	68b9      	ldr	r1, [r7, #8]
200011c0:	68f8      	ldr	r0, [r7, #12]
200011c2:	f7ff ff27 	bl	20001014 <sFLASH_WritePage>
}
200011c6:	e032      	b.n	2000122e <sFLASH_WriteBuffer+0x132>
			NumByteToWrite -= count;
200011c8:	687a      	ldr	r2, [r7, #4]
200011ca:	69bb      	ldr	r3, [r7, #24]
200011cc:	1ad3      	subs	r3, r2, r3
200011ce:	607b      	str	r3, [r7, #4]
			NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGE_SIZE;
200011d0:	687b      	ldr	r3, [r7, #4]
200011d2:	0a1b      	lsrs	r3, r3, #8
200011d4:	627b      	str	r3, [r7, #36]	; 0x24
			NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGE_SIZE;
200011d6:	687b      	ldr	r3, [r7, #4]
200011d8:	b2db      	uxtb	r3, r3
200011da:	623b      	str	r3, [r7, #32]
			sFLASH_WritePage(pBuffer, WriteAddr, count);
200011dc:	69ba      	ldr	r2, [r7, #24]
200011de:	68b9      	ldr	r1, [r7, #8]
200011e0:	68f8      	ldr	r0, [r7, #12]
200011e2:	f7ff ff17 	bl	20001014 <sFLASH_WritePage>
			WriteAddr +=  count;
200011e6:	68ba      	ldr	r2, [r7, #8]
200011e8:	69bb      	ldr	r3, [r7, #24]
200011ea:	4413      	add	r3, r2
200011ec:	60bb      	str	r3, [r7, #8]
			pBuffer += count;
200011ee:	68fa      	ldr	r2, [r7, #12]
200011f0:	69bb      	ldr	r3, [r7, #24]
200011f2:	4413      	add	r3, r2
200011f4:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
200011f6:	e00d      	b.n	20001214 <sFLASH_WriteBuffer+0x118>
				sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGE_SIZE);
200011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200011fc:	68b9      	ldr	r1, [r7, #8]
200011fe:	68f8      	ldr	r0, [r7, #12]
20001200:	f7ff ff08 	bl	20001014 <sFLASH_WritePage>
				WriteAddr +=  sFLASH_SPI_PAGE_SIZE;
20001204:	68bb      	ldr	r3, [r7, #8]
20001206:	f503 7380 	add.w	r3, r3, #256	; 0x100
2000120a:	60bb      	str	r3, [r7, #8]
				pBuffer += sFLASH_SPI_PAGE_SIZE;
2000120c:	68fb      	ldr	r3, [r7, #12]
2000120e:	f503 7380 	add.w	r3, r3, #256	; 0x100
20001212:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
20001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20001216:	1e5a      	subs	r2, r3, #1
20001218:	627a      	str	r2, [r7, #36]	; 0x24
2000121a:	2b00      	cmp	r3, #0
2000121c:	d1ec      	bne.n	200011f8 <sFLASH_WriteBuffer+0xfc>
			if (NumOfSingle != 0)
2000121e:	6a3b      	ldr	r3, [r7, #32]
20001220:	2b00      	cmp	r3, #0
20001222:	d004      	beq.n	2000122e <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
20001224:	6a3a      	ldr	r2, [r7, #32]
20001226:	68b9      	ldr	r1, [r7, #8]
20001228:	68f8      	ldr	r0, [r7, #12]
2000122a:	f7ff fef3 	bl	20001014 <sFLASH_WritePage>
}
2000122e:	bf00      	nop
20001230:	3728      	adds	r7, #40	; 0x28
20001232:	46bd      	mov	sp, r7
20001234:	bd80      	pop	{r7, pc}
	...

20001238 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
20001238:	b580      	push	{r7, lr}
2000123a:	b082      	sub	sp, #8
2000123c:	af00      	add	r7, sp, #0
	uint8_t txData[1];
	uint8_t rxData[3];

	txData[0] = FLASH_CMD_RDID;
2000123e:	239f      	movs	r3, #159	; 0x9f
20001240:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20001242:	2200      	movs	r2, #0
20001244:	f44f 7100 	mov.w	r1, #512	; 0x200
20001248:	4810      	ldr	r0, [pc, #64]	; (2000128c <sFLASH_ReadID+0x54>)
2000124a:	f004 faed 	bl	20005828 <HAL_GPIO_WritePin>

	/* Send "RDID " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
2000124e:	1d39      	adds	r1, r7, #4
20001250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001254:	2201      	movs	r2, #1
20001256:	480e      	ldr	r0, [pc, #56]	; (20001290 <sFLASH_ReadID+0x58>)
20001258:	f005 fef3 	bl	20007042 <HAL_SPI_Transmit>
	/* Receive ID value */
	HAL_SPI_Receive(&hspi2, rxData, sizeof(rxData), HAL_MAX_DELAY);
2000125c:	4639      	mov	r1, r7
2000125e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001262:	2203      	movs	r2, #3
20001264:	480a      	ldr	r0, [pc, #40]	; (20001290 <sFLASH_ReadID+0x58>)
20001266:	f006 f828 	bl	200072ba <HAL_SPI_Receive>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
2000126a:	2201      	movs	r2, #1
2000126c:	f44f 7100 	mov.w	r1, #512	; 0x200
20001270:	4806      	ldr	r0, [pc, #24]	; (2000128c <sFLASH_ReadID+0x54>)
20001272:	f004 fad9 	bl	20005828 <HAL_GPIO_WritePin>

	return (rxData[0] << 16) | (rxData[1] << 8) | rxData[2];
20001276:	783b      	ldrb	r3, [r7, #0]
20001278:	041a      	lsls	r2, r3, #16
2000127a:	787b      	ldrb	r3, [r7, #1]
2000127c:	021b      	lsls	r3, r3, #8
2000127e:	4313      	orrs	r3, r2
20001280:	78ba      	ldrb	r2, [r7, #2]
20001282:	4313      	orrs	r3, r2
}
20001284:	4618      	mov	r0, r3
20001286:	3708      	adds	r7, #8
20001288:	46bd      	mov	sp, r7
2000128a:	bd80      	pop	{r7, pc}
2000128c:	40020400 	.word	0x40020400
20001290:	20000434 	.word	0x20000434

20001294 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
20001294:	b580      	push	{r7, lr}
20001296:	b082      	sub	sp, #8
20001298:	af00      	add	r7, sp, #0
	uint8_t txData[1];

	txData[0] = FLASH_CMD_WREN;
2000129a:	2306      	movs	r3, #6
2000129c:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
2000129e:	2200      	movs	r2, #0
200012a0:	f44f 7100 	mov.w	r1, #512	; 0x200
200012a4:	4809      	ldr	r0, [pc, #36]	; (200012cc <sFLASH_WriteEnable+0x38>)
200012a6:	f004 fabf 	bl	20005828 <HAL_GPIO_WritePin>

	/* Send "Write Enable" instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
200012aa:	1d39      	adds	r1, r7, #4
200012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200012b0:	2201      	movs	r2, #1
200012b2:	4807      	ldr	r0, [pc, #28]	; (200012d0 <sFLASH_WriteEnable+0x3c>)
200012b4:	f005 fec5 	bl	20007042 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
200012b8:	2201      	movs	r2, #1
200012ba:	f44f 7100 	mov.w	r1, #512	; 0x200
200012be:	4803      	ldr	r0, [pc, #12]	; (200012cc <sFLASH_WriteEnable+0x38>)
200012c0:	f004 fab2 	bl	20005828 <HAL_GPIO_WritePin>
}
200012c4:	bf00      	nop
200012c6:	3708      	adds	r7, #8
200012c8:	46bd      	mov	sp, r7
200012ca:	bd80      	pop	{r7, pc}
200012cc:	40020400 	.word	0x40020400
200012d0:	20000434 	.word	0x20000434

200012d4 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write operation has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
200012d4:	b580      	push	{r7, lr}
200012d6:	b082      	sub	sp, #8
200012d8:	af00      	add	r7, sp, #0
	uint8_t txData[1];
	uint8_t rxData[1];

	txData[0] = FLASH_CMD_RDSR;
200012da:	2305      	movs	r3, #5
200012dc:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
200012de:	2200      	movs	r2, #0
200012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
200012e4:	480f      	ldr	r0, [pc, #60]	; (20001324 <sFLASH_WaitForWriteEnd+0x50>)
200012e6:	f004 fa9f 	bl	20005828 <HAL_GPIO_WritePin>

	/* Send "Read Status Register" instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
200012ea:	1d39      	adds	r1, r7, #4
200012ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200012f0:	2201      	movs	r2, #1
200012f2:	480d      	ldr	r0, [pc, #52]	; (20001328 <sFLASH_WaitForWriteEnd+0x54>)
200012f4:	f005 fea5 	bl	20007042 <HAL_SPI_Transmit>

	/* Loop as long as the memory is busy with a write cycle */
	do
	{
		/* Receive "Read Status Register" value */
		HAL_SPI_Receive(&hspi2, rxData, sizeof(rxData), HAL_MAX_DELAY);
200012f8:	4639      	mov	r1, r7
200012fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200012fe:	2201      	movs	r2, #1
20001300:	4809      	ldr	r0, [pc, #36]	; (20001328 <sFLASH_WaitForWriteEnd+0x54>)
20001302:	f005 ffda 	bl	200072ba <HAL_SPI_Receive>
	}
	while ((rxData[0] & FLASH_WIP_MASK) == FLASH_WIP_MASK); /* Write in progress */
20001306:	783b      	ldrb	r3, [r7, #0]
20001308:	f003 0301 	and.w	r3, r3, #1
2000130c:	2b00      	cmp	r3, #0
2000130e:	d1f3      	bne.n	200012f8 <sFLASH_WaitForWriteEnd+0x24>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20001310:	2201      	movs	r2, #1
20001312:	f44f 7100 	mov.w	r1, #512	; 0x200
20001316:	4803      	ldr	r0, [pc, #12]	; (20001324 <sFLASH_WaitForWriteEnd+0x50>)
20001318:	f004 fa86 	bl	20005828 <HAL_GPIO_WritePin>
}
2000131c:	bf00      	nop
2000131e:	3708      	adds	r7, #8
20001320:	46bd      	mov	sp, r7
20001322:	bd80      	pop	{r7, pc}
20001324:	40020400 	.word	0x40020400
20001328:	20000434 	.word	0x20000434

2000132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000132c:	b580      	push	{r7, lr}
2000132e:	b082      	sub	sp, #8
20001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20001332:	2300      	movs	r3, #0
20001334:	607b      	str	r3, [r7, #4]
20001336:	4b10      	ldr	r3, [pc, #64]	; (20001378 <HAL_MspInit+0x4c>)
20001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000133a:	4a0f      	ldr	r2, [pc, #60]	; (20001378 <HAL_MspInit+0x4c>)
2000133c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20001340:	6453      	str	r3, [r2, #68]	; 0x44
20001342:	4b0d      	ldr	r3, [pc, #52]	; (20001378 <HAL_MspInit+0x4c>)
20001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20001346:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000134a:	607b      	str	r3, [r7, #4]
2000134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000134e:	2300      	movs	r3, #0
20001350:	603b      	str	r3, [r7, #0]
20001352:	4b09      	ldr	r3, [pc, #36]	; (20001378 <HAL_MspInit+0x4c>)
20001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001356:	4a08      	ldr	r2, [pc, #32]	; (20001378 <HAL_MspInit+0x4c>)
20001358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000135c:	6413      	str	r3, [r2, #64]	; 0x40
2000135e:	4b06      	ldr	r3, [pc, #24]	; (20001378 <HAL_MspInit+0x4c>)
20001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20001366:	603b      	str	r3, [r7, #0]
20001368:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
2000136a:	2007      	movs	r0, #7
2000136c:	f000 fe04 	bl	20001f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20001370:	bf00      	nop
20001372:	3708      	adds	r7, #8
20001374:	46bd      	mov	sp, r7
20001376:	bd80      	pop	{r7, pc}
20001378:	40023800 	.word	0x40023800

2000137c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000137c:	b480      	push	{r7}
2000137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
20001380:	e7fe      	b.n	20001380 <NMI_Handler+0x4>

20001382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20001382:	b480      	push	{r7}
20001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20001386:	e7fe      	b.n	20001386 <HardFault_Handler+0x4>

20001388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20001388:	b480      	push	{r7}
2000138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000138c:	e7fe      	b.n	2000138c <MemManage_Handler+0x4>

2000138e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000138e:	b480      	push	{r7}
20001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20001392:	e7fe      	b.n	20001392 <BusFault_Handler+0x4>

20001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20001394:	b480      	push	{r7}
20001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20001398:	e7fe      	b.n	20001398 <UsageFault_Handler+0x4>

2000139a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000139a:	b480      	push	{r7}
2000139c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000139e:	bf00      	nop
200013a0:	46bd      	mov	sp, r7
200013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200013a6:	4770      	bx	lr

200013a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
200013a8:	b480      	push	{r7}
200013aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
200013ac:	bf00      	nop
200013ae:	46bd      	mov	sp, r7
200013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
200013b4:	4770      	bx	lr

200013b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
200013b6:	b480      	push	{r7}
200013b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
200013ba:	bf00      	nop
200013bc:	46bd      	mov	sp, r7
200013be:	f85d 7b04 	ldr.w	r7, [sp], #4
200013c2:	4770      	bx	lr

200013c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
200013c4:	b580      	push	{r7, lr}
200013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
200013c8:	f000 fa8a 	bl	200018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
200013cc:	bf00      	nop
200013ce:	bd80      	pop	{r7, pc}

200013d0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
200013d0:	b480      	push	{r7}
200013d2:	af00      	add	r7, sp, #0
}
200013d4:	bf00      	nop
200013d6:	46bd      	mov	sp, r7
200013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200013dc:	4770      	bx	lr

200013de <_getpid>:

int _getpid(void)
{
200013de:	b480      	push	{r7}
200013e0:	af00      	add	r7, sp, #0
	return 1;
200013e2:	2301      	movs	r3, #1
}
200013e4:	4618      	mov	r0, r3
200013e6:	46bd      	mov	sp, r7
200013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
200013ec:	4770      	bx	lr

200013ee <_kill>:

int _kill(int pid, int sig)
{
200013ee:	b580      	push	{r7, lr}
200013f0:	b082      	sub	sp, #8
200013f2:	af00      	add	r7, sp, #0
200013f4:	6078      	str	r0, [r7, #4]
200013f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
200013f8:	f008 f834 	bl	20009464 <__errno>
200013fc:	4603      	mov	r3, r0
200013fe:	2216      	movs	r2, #22
20001400:	601a      	str	r2, [r3, #0]
	return -1;
20001402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20001406:	4618      	mov	r0, r3
20001408:	3708      	adds	r7, #8
2000140a:	46bd      	mov	sp, r7
2000140c:	bd80      	pop	{r7, pc}

2000140e <_exit>:

void _exit (int status)
{
2000140e:	b580      	push	{r7, lr}
20001410:	b082      	sub	sp, #8
20001412:	af00      	add	r7, sp, #0
20001414:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
20001416:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
2000141a:	6878      	ldr	r0, [r7, #4]
2000141c:	f7ff ffe7 	bl	200013ee <_kill>
	while (1) {}		/* Make sure we hang here */
20001420:	e7fe      	b.n	20001420 <_exit+0x12>

20001422 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
20001422:	b580      	push	{r7, lr}
20001424:	b086      	sub	sp, #24
20001426:	af00      	add	r7, sp, #0
20001428:	60f8      	str	r0, [r7, #12]
2000142a:	60b9      	str	r1, [r7, #8]
2000142c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
2000142e:	2300      	movs	r3, #0
20001430:	617b      	str	r3, [r7, #20]
20001432:	e00a      	b.n	2000144a <_read+0x28>
	{
		*ptr++ = __io_getchar();
20001434:	f3af 8000 	nop.w
20001438:	4601      	mov	r1, r0
2000143a:	68bb      	ldr	r3, [r7, #8]
2000143c:	1c5a      	adds	r2, r3, #1
2000143e:	60ba      	str	r2, [r7, #8]
20001440:	b2ca      	uxtb	r2, r1
20001442:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
20001444:	697b      	ldr	r3, [r7, #20]
20001446:	3301      	adds	r3, #1
20001448:	617b      	str	r3, [r7, #20]
2000144a:	697a      	ldr	r2, [r7, #20]
2000144c:	687b      	ldr	r3, [r7, #4]
2000144e:	429a      	cmp	r2, r3
20001450:	dbf0      	blt.n	20001434 <_read+0x12>
	}

return len;
20001452:	687b      	ldr	r3, [r7, #4]
}
20001454:	4618      	mov	r0, r3
20001456:	3718      	adds	r7, #24
20001458:	46bd      	mov	sp, r7
2000145a:	bd80      	pop	{r7, pc}

2000145c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
2000145c:	b580      	push	{r7, lr}
2000145e:	b086      	sub	sp, #24
20001460:	af00      	add	r7, sp, #0
20001462:	60f8      	str	r0, [r7, #12]
20001464:	60b9      	str	r1, [r7, #8]
20001466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
20001468:	2300      	movs	r3, #0
2000146a:	617b      	str	r3, [r7, #20]
2000146c:	e009      	b.n	20001482 <_write+0x26>
	{
		__io_putchar(*ptr++);
2000146e:	68bb      	ldr	r3, [r7, #8]
20001470:	1c5a      	adds	r2, r3, #1
20001472:	60ba      	str	r2, [r7, #8]
20001474:	781b      	ldrb	r3, [r3, #0]
20001476:	4618      	mov	r0, r3
20001478:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
2000147c:	697b      	ldr	r3, [r7, #20]
2000147e:	3301      	adds	r3, #1
20001480:	617b      	str	r3, [r7, #20]
20001482:	697a      	ldr	r2, [r7, #20]
20001484:	687b      	ldr	r3, [r7, #4]
20001486:	429a      	cmp	r2, r3
20001488:	dbf1      	blt.n	2000146e <_write+0x12>
	}
	return len;
2000148a:	687b      	ldr	r3, [r7, #4]
}
2000148c:	4618      	mov	r0, r3
2000148e:	3718      	adds	r7, #24
20001490:	46bd      	mov	sp, r7
20001492:	bd80      	pop	{r7, pc}

20001494 <_close>:

int _close(int file)
{
20001494:	b480      	push	{r7}
20001496:	b083      	sub	sp, #12
20001498:	af00      	add	r7, sp, #0
2000149a:	6078      	str	r0, [r7, #4]
	return -1;
2000149c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200014a0:	4618      	mov	r0, r3
200014a2:	370c      	adds	r7, #12
200014a4:	46bd      	mov	sp, r7
200014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
200014aa:	4770      	bx	lr

200014ac <_fstat>:


int _fstat(int file, struct stat *st)
{
200014ac:	b480      	push	{r7}
200014ae:	b083      	sub	sp, #12
200014b0:	af00      	add	r7, sp, #0
200014b2:	6078      	str	r0, [r7, #4]
200014b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
200014b6:	683b      	ldr	r3, [r7, #0]
200014b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
200014bc:	605a      	str	r2, [r3, #4]
	return 0;
200014be:	2300      	movs	r3, #0
}
200014c0:	4618      	mov	r0, r3
200014c2:	370c      	adds	r7, #12
200014c4:	46bd      	mov	sp, r7
200014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200014ca:	4770      	bx	lr

200014cc <_isatty>:

int _isatty(int file)
{
200014cc:	b480      	push	{r7}
200014ce:	b083      	sub	sp, #12
200014d0:	af00      	add	r7, sp, #0
200014d2:	6078      	str	r0, [r7, #4]
	return 1;
200014d4:	2301      	movs	r3, #1
}
200014d6:	4618      	mov	r0, r3
200014d8:	370c      	adds	r7, #12
200014da:	46bd      	mov	sp, r7
200014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
200014e0:	4770      	bx	lr

200014e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
200014e2:	b480      	push	{r7}
200014e4:	b085      	sub	sp, #20
200014e6:	af00      	add	r7, sp, #0
200014e8:	60f8      	str	r0, [r7, #12]
200014ea:	60b9      	str	r1, [r7, #8]
200014ec:	607a      	str	r2, [r7, #4]
	return 0;
200014ee:	2300      	movs	r3, #0
}
200014f0:	4618      	mov	r0, r3
200014f2:	3714      	adds	r7, #20
200014f4:	46bd      	mov	sp, r7
200014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200014fa:	4770      	bx	lr

200014fc <_open>:

int _open(char *path, int flags, ...)
{
200014fc:	b40e      	push	{r1, r2, r3}
200014fe:	b480      	push	{r7}
20001500:	b082      	sub	sp, #8
20001502:	af00      	add	r7, sp, #0
20001504:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
20001506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2000150a:	4618      	mov	r0, r3
2000150c:	3708      	adds	r7, #8
2000150e:	46bd      	mov	sp, r7
20001510:	f85d 7b04 	ldr.w	r7, [sp], #4
20001514:	b003      	add	sp, #12
20001516:	4770      	bx	lr

20001518 <_wait>:

int _wait(int *status)
{
20001518:	b580      	push	{r7, lr}
2000151a:	b082      	sub	sp, #8
2000151c:	af00      	add	r7, sp, #0
2000151e:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
20001520:	f007 ffa0 	bl	20009464 <__errno>
20001524:	4603      	mov	r3, r0
20001526:	220a      	movs	r2, #10
20001528:	601a      	str	r2, [r3, #0]
	return -1;
2000152a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2000152e:	4618      	mov	r0, r3
20001530:	3708      	adds	r7, #8
20001532:	46bd      	mov	sp, r7
20001534:	bd80      	pop	{r7, pc}

20001536 <_unlink>:

int _unlink(char *name)
{
20001536:	b580      	push	{r7, lr}
20001538:	b082      	sub	sp, #8
2000153a:	af00      	add	r7, sp, #0
2000153c:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
2000153e:	f007 ff91 	bl	20009464 <__errno>
20001542:	4603      	mov	r3, r0
20001544:	2202      	movs	r2, #2
20001546:	601a      	str	r2, [r3, #0]
	return -1;
20001548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
2000154c:	4618      	mov	r0, r3
2000154e:	3708      	adds	r7, #8
20001550:	46bd      	mov	sp, r7
20001552:	bd80      	pop	{r7, pc}

20001554 <_times>:

int _times(struct tms *buf)
{
20001554:	b480      	push	{r7}
20001556:	b083      	sub	sp, #12
20001558:	af00      	add	r7, sp, #0
2000155a:	6078      	str	r0, [r7, #4]
	return -1;
2000155c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
20001560:	4618      	mov	r0, r3
20001562:	370c      	adds	r7, #12
20001564:	46bd      	mov	sp, r7
20001566:	f85d 7b04 	ldr.w	r7, [sp], #4
2000156a:	4770      	bx	lr

2000156c <_stat>:

int _stat(char *file, struct stat *st)
{
2000156c:	b480      	push	{r7}
2000156e:	b083      	sub	sp, #12
20001570:	af00      	add	r7, sp, #0
20001572:	6078      	str	r0, [r7, #4]
20001574:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
20001576:	683b      	ldr	r3, [r7, #0]
20001578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
2000157c:	605a      	str	r2, [r3, #4]
	return 0;
2000157e:	2300      	movs	r3, #0
}
20001580:	4618      	mov	r0, r3
20001582:	370c      	adds	r7, #12
20001584:	46bd      	mov	sp, r7
20001586:	f85d 7b04 	ldr.w	r7, [sp], #4
2000158a:	4770      	bx	lr

2000158c <_link>:

int _link(char *old, char *new)
{
2000158c:	b580      	push	{r7, lr}
2000158e:	b082      	sub	sp, #8
20001590:	af00      	add	r7, sp, #0
20001592:	6078      	str	r0, [r7, #4]
20001594:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
20001596:	f007 ff65 	bl	20009464 <__errno>
2000159a:	4603      	mov	r3, r0
2000159c:	221f      	movs	r2, #31
2000159e:	601a      	str	r2, [r3, #0]
	return -1;
200015a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200015a4:	4618      	mov	r0, r3
200015a6:	3708      	adds	r7, #8
200015a8:	46bd      	mov	sp, r7
200015aa:	bd80      	pop	{r7, pc}

200015ac <_fork>:

int _fork(void)
{
200015ac:	b580      	push	{r7, lr}
200015ae:	af00      	add	r7, sp, #0
	errno = EAGAIN;
200015b0:	f007 ff58 	bl	20009464 <__errno>
200015b4:	4603      	mov	r3, r0
200015b6:	220b      	movs	r2, #11
200015b8:	601a      	str	r2, [r3, #0]
	return -1;
200015ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200015be:	4618      	mov	r0, r3
200015c0:	bd80      	pop	{r7, pc}

200015c2 <_execve>:

int _execve(char *name, char **argv, char **env)
{
200015c2:	b580      	push	{r7, lr}
200015c4:	b084      	sub	sp, #16
200015c6:	af00      	add	r7, sp, #0
200015c8:	60f8      	str	r0, [r7, #12]
200015ca:	60b9      	str	r1, [r7, #8]
200015cc:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
200015ce:	f007 ff49 	bl	20009464 <__errno>
200015d2:	4603      	mov	r3, r0
200015d4:	220c      	movs	r2, #12
200015d6:	601a      	str	r2, [r3, #0]
	return -1;
200015d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
200015dc:	4618      	mov	r0, r3
200015de:	3710      	adds	r7, #16
200015e0:	46bd      	mov	sp, r7
200015e2:	bd80      	pop	{r7, pc}

200015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
200015e4:	b580      	push	{r7, lr}
200015e6:	b086      	sub	sp, #24
200015e8:	af00      	add	r7, sp, #0
200015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
200015ec:	4a14      	ldr	r2, [pc, #80]	; (20001640 <_sbrk+0x5c>)
200015ee:	4b15      	ldr	r3, [pc, #84]	; (20001644 <_sbrk+0x60>)
200015f0:	1ad3      	subs	r3, r2, r3
200015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
200015f4:	697b      	ldr	r3, [r7, #20]
200015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
200015f8:	4b13      	ldr	r3, [pc, #76]	; (20001648 <_sbrk+0x64>)
200015fa:	681b      	ldr	r3, [r3, #0]
200015fc:	2b00      	cmp	r3, #0
200015fe:	d102      	bne.n	20001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
20001600:	4b11      	ldr	r3, [pc, #68]	; (20001648 <_sbrk+0x64>)
20001602:	4a12      	ldr	r2, [pc, #72]	; (2000164c <_sbrk+0x68>)
20001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
20001606:	4b10      	ldr	r3, [pc, #64]	; (20001648 <_sbrk+0x64>)
20001608:	681a      	ldr	r2, [r3, #0]
2000160a:	687b      	ldr	r3, [r7, #4]
2000160c:	4413      	add	r3, r2
2000160e:	693a      	ldr	r2, [r7, #16]
20001610:	429a      	cmp	r2, r3
20001612:	d207      	bcs.n	20001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
20001614:	f007 ff26 	bl	20009464 <__errno>
20001618:	4603      	mov	r3, r0
2000161a:	220c      	movs	r2, #12
2000161c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000161e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
20001622:	e009      	b.n	20001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
20001624:	4b08      	ldr	r3, [pc, #32]	; (20001648 <_sbrk+0x64>)
20001626:	681b      	ldr	r3, [r3, #0]
20001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000162a:	4b07      	ldr	r3, [pc, #28]	; (20001648 <_sbrk+0x64>)
2000162c:	681a      	ldr	r2, [r3, #0]
2000162e:	687b      	ldr	r3, [r7, #4]
20001630:	4413      	add	r3, r2
20001632:	4a05      	ldr	r2, [pc, #20]	; (20001648 <_sbrk+0x64>)
20001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
20001636:	68fb      	ldr	r3, [r7, #12]
}
20001638:	4618      	mov	r0, r3
2000163a:	3718      	adds	r7, #24
2000163c:	46bd      	mov	sp, r7
2000163e:	bd80      	pop	{r7, pc}
20001640:	20020004 	.word	0x20020004
20001644:	00000400 	.word	0x00000400
20001648:	20000430 	.word	0x20000430
2000164c:	200095f8 	.word	0x200095f8

20001650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
20001650:	b480      	push	{r7}
20001652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
20001654:	4b06      	ldr	r3, [pc, #24]	; (20001670 <SystemInit+0x20>)
20001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000165a:	4a05      	ldr	r2, [pc, #20]	; (20001670 <SystemInit+0x20>)
2000165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20001664:	bf00      	nop
20001666:	46bd      	mov	sp, r7
20001668:	f85d 7b04 	ldr.w	r7, [sp], #4
2000166c:	4770      	bx	lr
2000166e:	bf00      	nop
20001670:	e000ed00 	.word	0xe000ed00

20001674 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
20001674:	b480      	push	{r7}
20001676:	b087      	sub	sp, #28
20001678:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
2000167a:	2300      	movs	r3, #0
2000167c:	613b      	str	r3, [r7, #16]
2000167e:	2300      	movs	r3, #0
20001680:	617b      	str	r3, [r7, #20]
20001682:	2302      	movs	r3, #2
20001684:	60fb      	str	r3, [r7, #12]
20001686:	2300      	movs	r3, #0
20001688:	60bb      	str	r3, [r7, #8]
2000168a:	2302      	movs	r3, #2
2000168c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
2000168e:	4b34      	ldr	r3, [pc, #208]	; (20001760 <SystemCoreClockUpdate+0xec>)
20001690:	689b      	ldr	r3, [r3, #8]
20001692:	f003 030c 	and.w	r3, r3, #12
20001696:	613b      	str	r3, [r7, #16]

  switch (tmp)
20001698:	693b      	ldr	r3, [r7, #16]
2000169a:	2b08      	cmp	r3, #8
2000169c:	d011      	beq.n	200016c2 <SystemCoreClockUpdate+0x4e>
2000169e:	693b      	ldr	r3, [r7, #16]
200016a0:	2b08      	cmp	r3, #8
200016a2:	d844      	bhi.n	2000172e <SystemCoreClockUpdate+0xba>
200016a4:	693b      	ldr	r3, [r7, #16]
200016a6:	2b00      	cmp	r3, #0
200016a8:	d003      	beq.n	200016b2 <SystemCoreClockUpdate+0x3e>
200016aa:	693b      	ldr	r3, [r7, #16]
200016ac:	2b04      	cmp	r3, #4
200016ae:	d004      	beq.n	200016ba <SystemCoreClockUpdate+0x46>
200016b0:	e03d      	b.n	2000172e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
200016b2:	4b2c      	ldr	r3, [pc, #176]	; (20001764 <SystemCoreClockUpdate+0xf0>)
200016b4:	4a2c      	ldr	r2, [pc, #176]	; (20001768 <SystemCoreClockUpdate+0xf4>)
200016b6:	601a      	str	r2, [r3, #0]
      break;
200016b8:	e03d      	b.n	20001736 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
200016ba:	4b2a      	ldr	r3, [pc, #168]	; (20001764 <SystemCoreClockUpdate+0xf0>)
200016bc:	4a2b      	ldr	r2, [pc, #172]	; (2000176c <SystemCoreClockUpdate+0xf8>)
200016be:	601a      	str	r2, [r3, #0]
      break;
200016c0:	e039      	b.n	20001736 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
200016c2:	4b27      	ldr	r3, [pc, #156]	; (20001760 <SystemCoreClockUpdate+0xec>)
200016c4:	685b      	ldr	r3, [r3, #4]
200016c6:	0d9b      	lsrs	r3, r3, #22
200016c8:	f003 0301 	and.w	r3, r3, #1
200016cc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200016ce:	4b24      	ldr	r3, [pc, #144]	; (20001760 <SystemCoreClockUpdate+0xec>)
200016d0:	685b      	ldr	r3, [r3, #4]
200016d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200016d6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
200016d8:	68bb      	ldr	r3, [r7, #8]
200016da:	2b00      	cmp	r3, #0
200016dc:	d00c      	beq.n	200016f8 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200016de:	4a23      	ldr	r2, [pc, #140]	; (2000176c <SystemCoreClockUpdate+0xf8>)
200016e0:	687b      	ldr	r3, [r7, #4]
200016e2:	fbb2 f3f3 	udiv	r3, r2, r3
200016e6:	4a1e      	ldr	r2, [pc, #120]	; (20001760 <SystemCoreClockUpdate+0xec>)
200016e8:	6852      	ldr	r2, [r2, #4]
200016ea:	0992      	lsrs	r2, r2, #6
200016ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
200016f0:	fb02 f303 	mul.w	r3, r2, r3
200016f4:	617b      	str	r3, [r7, #20]
200016f6:	e00b      	b.n	20001710 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
200016f8:	4a1b      	ldr	r2, [pc, #108]	; (20001768 <SystemCoreClockUpdate+0xf4>)
200016fa:	687b      	ldr	r3, [r7, #4]
200016fc:	fbb2 f3f3 	udiv	r3, r2, r3
20001700:	4a17      	ldr	r2, [pc, #92]	; (20001760 <SystemCoreClockUpdate+0xec>)
20001702:	6852      	ldr	r2, [r2, #4]
20001704:	0992      	lsrs	r2, r2, #6
20001706:	f3c2 0208 	ubfx	r2, r2, #0, #9
2000170a:	fb02 f303 	mul.w	r3, r2, r3
2000170e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
20001710:	4b13      	ldr	r3, [pc, #76]	; (20001760 <SystemCoreClockUpdate+0xec>)
20001712:	685b      	ldr	r3, [r3, #4]
20001714:	0c1b      	lsrs	r3, r3, #16
20001716:	f003 0303 	and.w	r3, r3, #3
2000171a:	3301      	adds	r3, #1
2000171c:	005b      	lsls	r3, r3, #1
2000171e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
20001720:	697a      	ldr	r2, [r7, #20]
20001722:	68fb      	ldr	r3, [r7, #12]
20001724:	fbb2 f3f3 	udiv	r3, r2, r3
20001728:	4a0e      	ldr	r2, [pc, #56]	; (20001764 <SystemCoreClockUpdate+0xf0>)
2000172a:	6013      	str	r3, [r2, #0]
      break;
2000172c:	e003      	b.n	20001736 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
2000172e:	4b0d      	ldr	r3, [pc, #52]	; (20001764 <SystemCoreClockUpdate+0xf0>)
20001730:	4a0d      	ldr	r2, [pc, #52]	; (20001768 <SystemCoreClockUpdate+0xf4>)
20001732:	601a      	str	r2, [r3, #0]
      break;
20001734:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
20001736:	4b0a      	ldr	r3, [pc, #40]	; (20001760 <SystemCoreClockUpdate+0xec>)
20001738:	689b      	ldr	r3, [r3, #8]
2000173a:	091b      	lsrs	r3, r3, #4
2000173c:	f003 030f 	and.w	r3, r3, #15
20001740:	4a0b      	ldr	r2, [pc, #44]	; (20001770 <SystemCoreClockUpdate+0xfc>)
20001742:	5cd3      	ldrb	r3, [r2, r3]
20001744:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
20001746:	4b07      	ldr	r3, [pc, #28]	; (20001764 <SystemCoreClockUpdate+0xf0>)
20001748:	681a      	ldr	r2, [r3, #0]
2000174a:	693b      	ldr	r3, [r7, #16]
2000174c:	fa22 f303 	lsr.w	r3, r2, r3
20001750:	4a04      	ldr	r2, [pc, #16]	; (20001764 <SystemCoreClockUpdate+0xf0>)
20001752:	6013      	str	r3, [r2, #0]
}
20001754:	bf00      	nop
20001756:	371c      	adds	r7, #28
20001758:	46bd      	mov	sp, r7
2000175a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000175e:	4770      	bx	lr
20001760:	40023800 	.word	0x40023800
20001764:	200003a0 	.word	0x200003a0
20001768:	00f42400 	.word	0x00f42400
2000176c:	007a1200 	.word	0x007a1200
20001770:	200095d4 	.word	0x200095d4

20001774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
20001774:	f8df d034 	ldr.w	sp, [pc, #52]	; 200017ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
20001778:	480d      	ldr	r0, [pc, #52]	; (200017b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
2000177a:	490e      	ldr	r1, [pc, #56]	; (200017b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
2000177c:	4a0e      	ldr	r2, [pc, #56]	; (200017b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
2000177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
20001780:	e002      	b.n	20001788 <LoopCopyDataInit>

20001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20001786:	3304      	adds	r3, #4

20001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
2000178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
2000178c:	d3f9      	bcc.n	20001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
2000178e:	4a0b      	ldr	r2, [pc, #44]	; (200017bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
20001790:	4c0b      	ldr	r4, [pc, #44]	; (200017c0 <LoopFillZerobss+0x26>)
  movs r3, #0
20001792:	2300      	movs	r3, #0
  b LoopFillZerobss
20001794:	e001      	b.n	2000179a <LoopFillZerobss>

20001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20001798:	3204      	adds	r2, #4

2000179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
2000179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
2000179c:	d3fb      	bcc.n	20001796 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
2000179e:	f7ff ff57 	bl	20001650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
200017a2:	f007 fe79 	bl	20009498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
200017a6:	f7ff faa1 	bl	20000cec <main>
  bx  lr    
200017aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
200017ac:	20020004 	.word	0x20020004
  ldr r0, =_sdata
200017b0:	20000398 	.word	0x20000398
  ldr r1, =_edata
200017b4:	20000410 	.word	0x20000410
  ldr r2, =_sidata
200017b8:	20000398 	.word	0x20000398
  ldr r2, =_sbss
200017bc:	20000410 	.word	0x20000410
  ldr r4, =_ebss
200017c0:	200004b0 	.word	0x200004b0

200017c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
200017c4:	e7fe      	b.n	200017c4 <ADC_IRQHandler>
	...

200017c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
200017c8:	b580      	push	{r7, lr}
200017ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
200017cc:	4b0e      	ldr	r3, [pc, #56]	; (20001808 <HAL_Init+0x40>)
200017ce:	681b      	ldr	r3, [r3, #0]
200017d0:	4a0d      	ldr	r2, [pc, #52]	; (20001808 <HAL_Init+0x40>)
200017d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200017d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
200017d8:	4b0b      	ldr	r3, [pc, #44]	; (20001808 <HAL_Init+0x40>)
200017da:	681b      	ldr	r3, [r3, #0]
200017dc:	4a0a      	ldr	r2, [pc, #40]	; (20001808 <HAL_Init+0x40>)
200017de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
200017e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
200017e4:	4b08      	ldr	r3, [pc, #32]	; (20001808 <HAL_Init+0x40>)
200017e6:	681b      	ldr	r3, [r3, #0]
200017e8:	4a07      	ldr	r2, [pc, #28]	; (20001808 <HAL_Init+0x40>)
200017ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200017ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
200017f0:	2003      	movs	r0, #3
200017f2:	f000 fbc1 	bl	20001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
200017f6:	2000      	movs	r0, #0
200017f8:	f000 f842 	bl	20001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
200017fc:	f7ff fd96 	bl	2000132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
20001800:	2300      	movs	r3, #0
}
20001802:	4618      	mov	r0, r3
20001804:	bd80      	pop	{r7, pc}
20001806:	bf00      	nop
20001808:	40023c00 	.word	0x40023c00

2000180c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
2000180c:	b580      	push	{r7, lr}
2000180e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
20001810:	4b13      	ldr	r3, [pc, #76]	; (20001860 <HAL_DeInit+0x54>)
20001812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001816:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
20001818:	4b11      	ldr	r3, [pc, #68]	; (20001860 <HAL_DeInit+0x54>)
2000181a:	2200      	movs	r2, #0
2000181c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
2000181e:	4b10      	ldr	r3, [pc, #64]	; (20001860 <HAL_DeInit+0x54>)
20001820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001824:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
20001826:	4b0e      	ldr	r3, [pc, #56]	; (20001860 <HAL_DeInit+0x54>)
20001828:	2200      	movs	r2, #0
2000182a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
2000182c:	4b0c      	ldr	r3, [pc, #48]	; (20001860 <HAL_DeInit+0x54>)
2000182e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001832:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
20001834:	4b0a      	ldr	r3, [pc, #40]	; (20001860 <HAL_DeInit+0x54>)
20001836:	2200      	movs	r2, #0
20001838:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
2000183a:	4b09      	ldr	r3, [pc, #36]	; (20001860 <HAL_DeInit+0x54>)
2000183c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001840:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
20001842:	4b07      	ldr	r3, [pc, #28]	; (20001860 <HAL_DeInit+0x54>)
20001844:	2200      	movs	r2, #0
20001846:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
20001848:	4b05      	ldr	r3, [pc, #20]	; (20001860 <HAL_DeInit+0x54>)
2000184a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
2000184e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
20001850:	4b03      	ldr	r3, [pc, #12]	; (20001860 <HAL_DeInit+0x54>)
20001852:	2200      	movs	r2, #0
20001854:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
20001856:	f000 f80c 	bl	20001872 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
2000185a:	2300      	movs	r3, #0
}
2000185c:	4618      	mov	r0, r3
2000185e:	bd80      	pop	{r7, pc}
20001860:	40023800 	.word	0x40023800
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
20001864:	b480      	push	{r7}
20001866:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
20001868:	bf00      	nop
2000186a:	46bd      	mov	sp, r7
2000186c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001870:	4770      	bx	lr

20001872 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
20001872:	b480      	push	{r7}
20001874:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
20001876:	bf00      	nop
20001878:	46bd      	mov	sp, r7
2000187a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000187e:	4770      	bx	lr

20001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20001880:	b580      	push	{r7, lr}
20001882:	b082      	sub	sp, #8
20001884:	af00      	add	r7, sp, #0
20001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
20001888:	4b12      	ldr	r3, [pc, #72]	; (200018d4 <HAL_InitTick+0x54>)
2000188a:	681a      	ldr	r2, [r3, #0]
2000188c:	4b12      	ldr	r3, [pc, #72]	; (200018d8 <HAL_InitTick+0x58>)
2000188e:	781b      	ldrb	r3, [r3, #0]
20001890:	4619      	mov	r1, r3
20001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
20001896:	fbb3 f3f1 	udiv	r3, r3, r1
2000189a:	fbb2 f3f3 	udiv	r3, r2, r3
2000189e:	4618      	mov	r0, r3
200018a0:	f000 fbb1 	bl	20002006 <HAL_SYSTICK_Config>
200018a4:	4603      	mov	r3, r0
200018a6:	2b00      	cmp	r3, #0
200018a8:	d001      	beq.n	200018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
200018aa:	2301      	movs	r3, #1
200018ac:	e00e      	b.n	200018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
200018ae:	687b      	ldr	r3, [r7, #4]
200018b0:	2b0f      	cmp	r3, #15
200018b2:	d80a      	bhi.n	200018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
200018b4:	2200      	movs	r2, #0
200018b6:	6879      	ldr	r1, [r7, #4]
200018b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
200018bc:	f000 fb67 	bl	20001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
200018c0:	4a06      	ldr	r2, [pc, #24]	; (200018dc <HAL_InitTick+0x5c>)
200018c2:	687b      	ldr	r3, [r7, #4]
200018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
200018c6:	2300      	movs	r3, #0
200018c8:	e000      	b.n	200018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
200018ca:	2301      	movs	r3, #1
}
200018cc:	4618      	mov	r0, r3
200018ce:	3708      	adds	r7, #8
200018d0:	46bd      	mov	sp, r7
200018d2:	bd80      	pop	{r7, pc}
200018d4:	200003a0 	.word	0x200003a0
200018d8:	200003a8 	.word	0x200003a8
200018dc:	200003a4 	.word	0x200003a4

200018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
200018e0:	b480      	push	{r7}
200018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
200018e4:	4b06      	ldr	r3, [pc, #24]	; (20001900 <HAL_IncTick+0x20>)
200018e6:	781b      	ldrb	r3, [r3, #0]
200018e8:	461a      	mov	r2, r3
200018ea:	4b06      	ldr	r3, [pc, #24]	; (20001904 <HAL_IncTick+0x24>)
200018ec:	681b      	ldr	r3, [r3, #0]
200018ee:	4413      	add	r3, r2
200018f0:	4a04      	ldr	r2, [pc, #16]	; (20001904 <HAL_IncTick+0x24>)
200018f2:	6013      	str	r3, [r2, #0]
}
200018f4:	bf00      	nop
200018f6:	46bd      	mov	sp, r7
200018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
200018fc:	4770      	bx	lr
200018fe:	bf00      	nop
20001900:	200003a8 	.word	0x200003a8
20001904:	2000048c 	.word	0x2000048c

20001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
20001908:	b480      	push	{r7}
2000190a:	af00      	add	r7, sp, #0
  return uwTick;
2000190c:	4b03      	ldr	r3, [pc, #12]	; (2000191c <HAL_GetTick+0x14>)
2000190e:	681b      	ldr	r3, [r3, #0]
}
20001910:	4618      	mov	r0, r3
20001912:	46bd      	mov	sp, r7
20001914:	f85d 7b04 	ldr.w	r7, [sp], #4
20001918:	4770      	bx	lr
2000191a:	bf00      	nop
2000191c:	2000048c 	.word	0x2000048c

20001920 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
20001920:	b480      	push	{r7}
20001922:	af00      	add	r7, sp, #0
  return uwTickPrio;
20001924:	4b03      	ldr	r3, [pc, #12]	; (20001934 <HAL_GetTickPrio+0x14>)
20001926:	681b      	ldr	r3, [r3, #0]
}
20001928:	4618      	mov	r0, r3
2000192a:	46bd      	mov	sp, r7
2000192c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001930:	4770      	bx	lr
20001932:	bf00      	nop
20001934:	200003a4 	.word	0x200003a4

20001938 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
20001938:	b580      	push	{r7, lr}
2000193a:	b084      	sub	sp, #16
2000193c:	af00      	add	r7, sp, #0
2000193e:	4603      	mov	r3, r0
20001940:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
20001942:	2300      	movs	r3, #0
20001944:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
20001946:	4b0e      	ldr	r3, [pc, #56]	; (20001980 <HAL_SetTickFreq+0x48>)
20001948:	781b      	ldrb	r3, [r3, #0]
2000194a:	79fa      	ldrb	r2, [r7, #7]
2000194c:	429a      	cmp	r2, r3
2000194e:	d012      	beq.n	20001976 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
20001950:	4b0b      	ldr	r3, [pc, #44]	; (20001980 <HAL_SetTickFreq+0x48>)
20001952:	781b      	ldrb	r3, [r3, #0]
20001954:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
20001956:	4a0a      	ldr	r2, [pc, #40]	; (20001980 <HAL_SetTickFreq+0x48>)
20001958:	79fb      	ldrb	r3, [r7, #7]
2000195a:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
2000195c:	4b09      	ldr	r3, [pc, #36]	; (20001984 <HAL_SetTickFreq+0x4c>)
2000195e:	681b      	ldr	r3, [r3, #0]
20001960:	4618      	mov	r0, r3
20001962:	f7ff ff8d 	bl	20001880 <HAL_InitTick>
20001966:	4603      	mov	r3, r0
20001968:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
2000196a:	7bfb      	ldrb	r3, [r7, #15]
2000196c:	2b00      	cmp	r3, #0
2000196e:	d002      	beq.n	20001976 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
20001970:	4a03      	ldr	r2, [pc, #12]	; (20001980 <HAL_SetTickFreq+0x48>)
20001972:	7bbb      	ldrb	r3, [r7, #14]
20001974:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
20001976:	7bfb      	ldrb	r3, [r7, #15]
}
20001978:	4618      	mov	r0, r3
2000197a:	3710      	adds	r7, #16
2000197c:	46bd      	mov	sp, r7
2000197e:	bd80      	pop	{r7, pc}
20001980:	200003a8 	.word	0x200003a8
20001984:	200003a4 	.word	0x200003a4

20001988 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
20001988:	b480      	push	{r7}
2000198a:	af00      	add	r7, sp, #0
  return uwTickFreq;
2000198c:	4b03      	ldr	r3, [pc, #12]	; (2000199c <HAL_GetTickFreq+0x14>)
2000198e:	781b      	ldrb	r3, [r3, #0]
}
20001990:	4618      	mov	r0, r3
20001992:	46bd      	mov	sp, r7
20001994:	f85d 7b04 	ldr.w	r7, [sp], #4
20001998:	4770      	bx	lr
2000199a:	bf00      	nop
2000199c:	200003a8 	.word	0x200003a8

200019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
200019a0:	b580      	push	{r7, lr}
200019a2:	b084      	sub	sp, #16
200019a4:	af00      	add	r7, sp, #0
200019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
200019a8:	f7ff ffae 	bl	20001908 <HAL_GetTick>
200019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
200019ae:	687b      	ldr	r3, [r7, #4]
200019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
200019b2:	68fb      	ldr	r3, [r7, #12]
200019b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
200019b8:	d005      	beq.n	200019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
200019ba:	4b0a      	ldr	r3, [pc, #40]	; (200019e4 <HAL_Delay+0x44>)
200019bc:	781b      	ldrb	r3, [r3, #0]
200019be:	461a      	mov	r2, r3
200019c0:	68fb      	ldr	r3, [r7, #12]
200019c2:	4413      	add	r3, r2
200019c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
200019c6:	bf00      	nop
200019c8:	f7ff ff9e 	bl	20001908 <HAL_GetTick>
200019cc:	4602      	mov	r2, r0
200019ce:	68bb      	ldr	r3, [r7, #8]
200019d0:	1ad3      	subs	r3, r2, r3
200019d2:	68fa      	ldr	r2, [r7, #12]
200019d4:	429a      	cmp	r2, r3
200019d6:	d8f7      	bhi.n	200019c8 <HAL_Delay+0x28>
  {
  }
}
200019d8:	bf00      	nop
200019da:	bf00      	nop
200019dc:	3710      	adds	r7, #16
200019de:	46bd      	mov	sp, r7
200019e0:	bd80      	pop	{r7, pc}
200019e2:	bf00      	nop
200019e4:	200003a8 	.word	0x200003a8

200019e8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
200019e8:	b480      	push	{r7}
200019ea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
200019ec:	4b05      	ldr	r3, [pc, #20]	; (20001a04 <HAL_SuspendTick+0x1c>)
200019ee:	681b      	ldr	r3, [r3, #0]
200019f0:	4a04      	ldr	r2, [pc, #16]	; (20001a04 <HAL_SuspendTick+0x1c>)
200019f2:	f023 0302 	bic.w	r3, r3, #2
200019f6:	6013      	str	r3, [r2, #0]
}
200019f8:	bf00      	nop
200019fa:	46bd      	mov	sp, r7
200019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a00:	4770      	bx	lr
20001a02:	bf00      	nop
20001a04:	e000e010 	.word	0xe000e010

20001a08 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
20001a08:	b480      	push	{r7}
20001a0a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
20001a0c:	4b05      	ldr	r3, [pc, #20]	; (20001a24 <HAL_ResumeTick+0x1c>)
20001a0e:	681b      	ldr	r3, [r3, #0]
20001a10:	4a04      	ldr	r2, [pc, #16]	; (20001a24 <HAL_ResumeTick+0x1c>)
20001a12:	f043 0302 	orr.w	r3, r3, #2
20001a16:	6013      	str	r3, [r2, #0]
}
20001a18:	bf00      	nop
20001a1a:	46bd      	mov	sp, r7
20001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a20:	4770      	bx	lr
20001a22:	bf00      	nop
20001a24:	e000e010 	.word	0xe000e010

20001a28 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
20001a28:	b480      	push	{r7}
20001a2a:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
20001a2c:	4b02      	ldr	r3, [pc, #8]	; (20001a38 <HAL_GetHalVersion+0x10>)
}
20001a2e:	4618      	mov	r0, r3
20001a30:	46bd      	mov	sp, r7
20001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a36:	4770      	bx	lr
20001a38:	01070b00 	.word	0x01070b00

20001a3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
20001a3c:	b480      	push	{r7}
20001a3e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
20001a40:	4b03      	ldr	r3, [pc, #12]	; (20001a50 <HAL_GetREVID+0x14>)
20001a42:	681b      	ldr	r3, [r3, #0]
20001a44:	0c1b      	lsrs	r3, r3, #16
}
20001a46:	4618      	mov	r0, r3
20001a48:	46bd      	mov	sp, r7
20001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a4e:	4770      	bx	lr
20001a50:	e0042000 	.word	0xe0042000

20001a54 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
20001a54:	b480      	push	{r7}
20001a56:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
20001a58:	4b04      	ldr	r3, [pc, #16]	; (20001a6c <HAL_GetDEVID+0x18>)
20001a5a:	681b      	ldr	r3, [r3, #0]
20001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
20001a60:	4618      	mov	r0, r3
20001a62:	46bd      	mov	sp, r7
20001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a68:	4770      	bx	lr
20001a6a:	bf00      	nop
20001a6c:	e0042000 	.word	0xe0042000

20001a70 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
20001a70:	b480      	push	{r7}
20001a72:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001a74:	4b05      	ldr	r3, [pc, #20]	; (20001a8c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001a76:	685b      	ldr	r3, [r3, #4]
20001a78:	4a04      	ldr	r2, [pc, #16]	; (20001a8c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
20001a7a:	f043 0301 	orr.w	r3, r3, #1
20001a7e:	6053      	str	r3, [r2, #4]
}
20001a80:	bf00      	nop
20001a82:	46bd      	mov	sp, r7
20001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
20001a88:	4770      	bx	lr
20001a8a:	bf00      	nop
20001a8c:	e0042000 	.word	0xe0042000

20001a90 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
20001a90:	b480      	push	{r7}
20001a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
20001a94:	4b05      	ldr	r3, [pc, #20]	; (20001aac <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001a96:	685b      	ldr	r3, [r3, #4]
20001a98:	4a04      	ldr	r2, [pc, #16]	; (20001aac <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
20001a9a:	f023 0301 	bic.w	r3, r3, #1
20001a9e:	6053      	str	r3, [r2, #4]
}
20001aa0:	bf00      	nop
20001aa2:	46bd      	mov	sp, r7
20001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001aa8:	4770      	bx	lr
20001aaa:	bf00      	nop
20001aac:	e0042000 	.word	0xe0042000

20001ab0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
20001ab0:	b480      	push	{r7}
20001ab2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001ab4:	4b05      	ldr	r3, [pc, #20]	; (20001acc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001ab6:	685b      	ldr	r3, [r3, #4]
20001ab8:	4a04      	ldr	r2, [pc, #16]	; (20001acc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
20001aba:	f043 0302 	orr.w	r3, r3, #2
20001abe:	6053      	str	r3, [r2, #4]
}
20001ac0:	bf00      	nop
20001ac2:	46bd      	mov	sp, r7
20001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ac8:	4770      	bx	lr
20001aca:	bf00      	nop
20001acc:	e0042000 	.word	0xe0042000

20001ad0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
20001ad0:	b480      	push	{r7}
20001ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
20001ad4:	4b05      	ldr	r3, [pc, #20]	; (20001aec <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001ad6:	685b      	ldr	r3, [r3, #4]
20001ad8:	4a04      	ldr	r2, [pc, #16]	; (20001aec <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
20001ada:	f023 0302 	bic.w	r3, r3, #2
20001ade:	6053      	str	r3, [r2, #4]
}
20001ae0:	bf00      	nop
20001ae2:	46bd      	mov	sp, r7
20001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ae8:	4770      	bx	lr
20001aea:	bf00      	nop
20001aec:	e0042000 	.word	0xe0042000

20001af0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
20001af0:	b480      	push	{r7}
20001af2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001af4:	4b05      	ldr	r3, [pc, #20]	; (20001b0c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001af6:	685b      	ldr	r3, [r3, #4]
20001af8:	4a04      	ldr	r2, [pc, #16]	; (20001b0c <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
20001afa:	f043 0304 	orr.w	r3, r3, #4
20001afe:	6053      	str	r3, [r2, #4]
}
20001b00:	bf00      	nop
20001b02:	46bd      	mov	sp, r7
20001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b08:	4770      	bx	lr
20001b0a:	bf00      	nop
20001b0c:	e0042000 	.word	0xe0042000

20001b10 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
20001b10:	b480      	push	{r7}
20001b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
20001b14:	4b05      	ldr	r3, [pc, #20]	; (20001b2c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001b16:	685b      	ldr	r3, [r3, #4]
20001b18:	4a04      	ldr	r2, [pc, #16]	; (20001b2c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
20001b1a:	f023 0304 	bic.w	r3, r3, #4
20001b1e:	6053      	str	r3, [r2, #4]
}
20001b20:	bf00      	nop
20001b22:	46bd      	mov	sp, r7
20001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b28:	4770      	bx	lr
20001b2a:	bf00      	nop
20001b2c:	e0042000 	.word	0xe0042000

20001b30 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
20001b30:	b480      	push	{r7}
20001b32:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
20001b34:	4b03      	ldr	r3, [pc, #12]	; (20001b44 <HAL_EnableCompensationCell+0x14>)
20001b36:	2201      	movs	r2, #1
20001b38:	601a      	str	r2, [r3, #0]
}
20001b3a:	bf00      	nop
20001b3c:	46bd      	mov	sp, r7
20001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b42:	4770      	bx	lr
20001b44:	42270400 	.word	0x42270400

20001b48 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
20001b48:	b480      	push	{r7}
20001b4a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
20001b4c:	4b03      	ldr	r3, [pc, #12]	; (20001b5c <HAL_DisableCompensationCell+0x14>)
20001b4e:	2200      	movs	r2, #0
20001b50:	601a      	str	r2, [r3, #0]
}
20001b52:	bf00      	nop
20001b54:	46bd      	mov	sp, r7
20001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b5a:	4770      	bx	lr
20001b5c:	42270400 	.word	0x42270400

20001b60 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
20001b60:	b480      	push	{r7}
20001b62:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
20001b64:	4b03      	ldr	r3, [pc, #12]	; (20001b74 <HAL_GetUIDw0+0x14>)
20001b66:	681b      	ldr	r3, [r3, #0]
}
20001b68:	4618      	mov	r0, r3
20001b6a:	46bd      	mov	sp, r7
20001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b70:	4770      	bx	lr
20001b72:	bf00      	nop
20001b74:	1fff7a10 	.word	0x1fff7a10

20001b78 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
20001b78:	b480      	push	{r7}
20001b7a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
20001b7c:	4b03      	ldr	r3, [pc, #12]	; (20001b8c <HAL_GetUIDw1+0x14>)
20001b7e:	681b      	ldr	r3, [r3, #0]
}
20001b80:	4618      	mov	r0, r3
20001b82:	46bd      	mov	sp, r7
20001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
20001b88:	4770      	bx	lr
20001b8a:	bf00      	nop
20001b8c:	1fff7a14 	.word	0x1fff7a14

20001b90 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
20001b90:	b480      	push	{r7}
20001b92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
20001b94:	4b03      	ldr	r3, [pc, #12]	; (20001ba4 <HAL_GetUIDw2+0x14>)
20001b96:	681b      	ldr	r3, [r3, #0]
}
20001b98:	4618      	mov	r0, r3
20001b9a:	46bd      	mov	sp, r7
20001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ba0:	4770      	bx	lr
20001ba2:	bf00      	nop
20001ba4:	1fff7a18 	.word	0x1fff7a18

20001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001ba8:	b480      	push	{r7}
20001baa:	b085      	sub	sp, #20
20001bac:	af00      	add	r7, sp, #0
20001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
20001bb0:	687b      	ldr	r3, [r7, #4]
20001bb2:	f003 0307 	and.w	r3, r3, #7
20001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
20001bb8:	4b0c      	ldr	r3, [pc, #48]	; (20001bec <__NVIC_SetPriorityGrouping+0x44>)
20001bba:	68db      	ldr	r3, [r3, #12]
20001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
20001bbe:	68ba      	ldr	r2, [r7, #8]
20001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
20001bc4:	4013      	ands	r3, r2
20001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
20001bc8:	68fb      	ldr	r3, [r7, #12]
20001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
20001bcc:	68bb      	ldr	r3, [r7, #8]
20001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
20001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
20001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
20001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
20001bda:	4a04      	ldr	r2, [pc, #16]	; (20001bec <__NVIC_SetPriorityGrouping+0x44>)
20001bdc:	68bb      	ldr	r3, [r7, #8]
20001bde:	60d3      	str	r3, [r2, #12]
}
20001be0:	bf00      	nop
20001be2:	3714      	adds	r7, #20
20001be4:	46bd      	mov	sp, r7
20001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001bea:	4770      	bx	lr
20001bec:	e000ed00 	.word	0xe000ed00

20001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
20001bf0:	b480      	push	{r7}
20001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
20001bf4:	4b04      	ldr	r3, [pc, #16]	; (20001c08 <__NVIC_GetPriorityGrouping+0x18>)
20001bf6:	68db      	ldr	r3, [r3, #12]
20001bf8:	0a1b      	lsrs	r3, r3, #8
20001bfa:	f003 0307 	and.w	r3, r3, #7
}
20001bfe:	4618      	mov	r0, r3
20001c00:	46bd      	mov	sp, r7
20001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c06:	4770      	bx	lr
20001c08:	e000ed00 	.word	0xe000ed00

20001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001c0c:	b480      	push	{r7}
20001c0e:	b083      	sub	sp, #12
20001c10:	af00      	add	r7, sp, #0
20001c12:	4603      	mov	r3, r0
20001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001c1a:	2b00      	cmp	r3, #0
20001c1c:	db0b      	blt.n	20001c36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001c1e:	79fb      	ldrb	r3, [r7, #7]
20001c20:	f003 021f 	and.w	r2, r3, #31
20001c24:	4907      	ldr	r1, [pc, #28]	; (20001c44 <__NVIC_EnableIRQ+0x38>)
20001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001c2a:	095b      	lsrs	r3, r3, #5
20001c2c:	2001      	movs	r0, #1
20001c2e:	fa00 f202 	lsl.w	r2, r0, r2
20001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20001c36:	bf00      	nop
20001c38:	370c      	adds	r7, #12
20001c3a:	46bd      	mov	sp, r7
20001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c40:	4770      	bx	lr
20001c42:	bf00      	nop
20001c44:	e000e100 	.word	0xe000e100

20001c48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
20001c48:	b480      	push	{r7}
20001c4a:	b083      	sub	sp, #12
20001c4c:	af00      	add	r7, sp, #0
20001c4e:	4603      	mov	r3, r0
20001c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001c56:	2b00      	cmp	r3, #0
20001c58:	db12      	blt.n	20001c80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001c5a:	79fb      	ldrb	r3, [r7, #7]
20001c5c:	f003 021f 	and.w	r2, r3, #31
20001c60:	490a      	ldr	r1, [pc, #40]	; (20001c8c <__NVIC_DisableIRQ+0x44>)
20001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001c66:	095b      	lsrs	r3, r3, #5
20001c68:	2001      	movs	r0, #1
20001c6a:	fa00 f202 	lsl.w	r2, r0, r2
20001c6e:	3320      	adds	r3, #32
20001c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
20001c74:	f3bf 8f4f 	dsb	sy
}
20001c78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
20001c7a:	f3bf 8f6f 	isb	sy
}
20001c7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
20001c80:	bf00      	nop
20001c82:	370c      	adds	r7, #12
20001c84:	46bd      	mov	sp, r7
20001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
20001c8a:	4770      	bx	lr
20001c8c:	e000e100 	.word	0xe000e100

20001c90 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
20001c90:	b480      	push	{r7}
20001c92:	b083      	sub	sp, #12
20001c94:	af00      	add	r7, sp, #0
20001c96:	4603      	mov	r3, r0
20001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001c9e:	2b00      	cmp	r3, #0
20001ca0:	db0e      	blt.n	20001cc0 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20001ca2:	4a0b      	ldr	r2, [pc, #44]	; (20001cd0 <__NVIC_GetPendingIRQ+0x40>)
20001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001ca8:	095b      	lsrs	r3, r3, #5
20001caa:	3340      	adds	r3, #64	; 0x40
20001cac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20001cb0:	79fb      	ldrb	r3, [r7, #7]
20001cb2:	f003 031f 	and.w	r3, r3, #31
20001cb6:	fa22 f303 	lsr.w	r3, r2, r3
20001cba:	f003 0301 	and.w	r3, r3, #1
20001cbe:	e000      	b.n	20001cc2 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
20001cc0:	2300      	movs	r3, #0
  }
}
20001cc2:	4618      	mov	r0, r3
20001cc4:	370c      	adds	r7, #12
20001cc6:	46bd      	mov	sp, r7
20001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
20001ccc:	4770      	bx	lr
20001cce:	bf00      	nop
20001cd0:	e000e100 	.word	0xe000e100

20001cd4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20001cd4:	b480      	push	{r7}
20001cd6:	b083      	sub	sp, #12
20001cd8:	af00      	add	r7, sp, #0
20001cda:	4603      	mov	r3, r0
20001cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001ce2:	2b00      	cmp	r3, #0
20001ce4:	db0c      	blt.n	20001d00 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001ce6:	79fb      	ldrb	r3, [r7, #7]
20001ce8:	f003 021f 	and.w	r2, r3, #31
20001cec:	4907      	ldr	r1, [pc, #28]	; (20001d0c <__NVIC_SetPendingIRQ+0x38>)
20001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001cf2:	095b      	lsrs	r3, r3, #5
20001cf4:	2001      	movs	r0, #1
20001cf6:	fa00 f202 	lsl.w	r2, r0, r2
20001cfa:	3340      	adds	r3, #64	; 0x40
20001cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20001d00:	bf00      	nop
20001d02:	370c      	adds	r7, #12
20001d04:	46bd      	mov	sp, r7
20001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d0a:	4770      	bx	lr
20001d0c:	e000e100 	.word	0xe000e100

20001d10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
20001d10:	b480      	push	{r7}
20001d12:	b083      	sub	sp, #12
20001d14:	af00      	add	r7, sp, #0
20001d16:	4603      	mov	r3, r0
20001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d1e:	2b00      	cmp	r3, #0
20001d20:	db0c      	blt.n	20001d3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
20001d22:	79fb      	ldrb	r3, [r7, #7]
20001d24:	f003 021f 	and.w	r2, r3, #31
20001d28:	4907      	ldr	r1, [pc, #28]	; (20001d48 <__NVIC_ClearPendingIRQ+0x38>)
20001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d2e:	095b      	lsrs	r3, r3, #5
20001d30:	2001      	movs	r0, #1
20001d32:	fa00 f202 	lsl.w	r2, r0, r2
20001d36:	3360      	adds	r3, #96	; 0x60
20001d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
20001d3c:	bf00      	nop
20001d3e:	370c      	adds	r7, #12
20001d40:	46bd      	mov	sp, r7
20001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d46:	4770      	bx	lr
20001d48:	e000e100 	.word	0xe000e100

20001d4c <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
20001d4c:	b480      	push	{r7}
20001d4e:	b083      	sub	sp, #12
20001d50:	af00      	add	r7, sp, #0
20001d52:	4603      	mov	r3, r0
20001d54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d5a:	2b00      	cmp	r3, #0
20001d5c:	db0e      	blt.n	20001d7c <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
20001d5e:	4a0b      	ldr	r2, [pc, #44]	; (20001d8c <__NVIC_GetActive+0x40>)
20001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001d64:	095b      	lsrs	r3, r3, #5
20001d66:	3380      	adds	r3, #128	; 0x80
20001d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
20001d6c:	79fb      	ldrb	r3, [r7, #7]
20001d6e:	f003 031f 	and.w	r3, r3, #31
20001d72:	fa22 f303 	lsr.w	r3, r2, r3
20001d76:	f003 0301 	and.w	r3, r3, #1
20001d7a:	e000      	b.n	20001d7e <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
20001d7c:	2300      	movs	r3, #0
  }
}
20001d7e:	4618      	mov	r0, r3
20001d80:	370c      	adds	r7, #12
20001d82:	46bd      	mov	sp, r7
20001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
20001d88:	4770      	bx	lr
20001d8a:	bf00      	nop
20001d8c:	e000e100 	.word	0xe000e100

20001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
20001d90:	b480      	push	{r7}
20001d92:	b083      	sub	sp, #12
20001d94:	af00      	add	r7, sp, #0
20001d96:	4603      	mov	r3, r0
20001d98:	6039      	str	r1, [r7, #0]
20001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001da0:	2b00      	cmp	r3, #0
20001da2:	db0a      	blt.n	20001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001da4:	683b      	ldr	r3, [r7, #0]
20001da6:	b2da      	uxtb	r2, r3
20001da8:	490c      	ldr	r1, [pc, #48]	; (20001ddc <__NVIC_SetPriority+0x4c>)
20001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001dae:	0112      	lsls	r2, r2, #4
20001db0:	b2d2      	uxtb	r2, r2
20001db2:	440b      	add	r3, r1
20001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001db8:	e00a      	b.n	20001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001dba:	683b      	ldr	r3, [r7, #0]
20001dbc:	b2da      	uxtb	r2, r3
20001dbe:	4908      	ldr	r1, [pc, #32]	; (20001de0 <__NVIC_SetPriority+0x50>)
20001dc0:	79fb      	ldrb	r3, [r7, #7]
20001dc2:	f003 030f 	and.w	r3, r3, #15
20001dc6:	3b04      	subs	r3, #4
20001dc8:	0112      	lsls	r2, r2, #4
20001dca:	b2d2      	uxtb	r2, r2
20001dcc:	440b      	add	r3, r1
20001dce:	761a      	strb	r2, [r3, #24]
}
20001dd0:	bf00      	nop
20001dd2:	370c      	adds	r7, #12
20001dd4:	46bd      	mov	sp, r7
20001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
20001dda:	4770      	bx	lr
20001ddc:	e000e100 	.word	0xe000e100
20001de0:	e000ed00 	.word	0xe000ed00

20001de4 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
20001de4:	b480      	push	{r7}
20001de6:	b083      	sub	sp, #12
20001de8:	af00      	add	r7, sp, #0
20001dea:	4603      	mov	r3, r0
20001dec:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
20001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001df2:	2b00      	cmp	r3, #0
20001df4:	db09      	blt.n	20001e0a <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
20001df6:	4a0d      	ldr	r2, [pc, #52]	; (20001e2c <__NVIC_GetPriority+0x48>)
20001df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001dfc:	4413      	add	r3, r2
20001dfe:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
20001e02:	b2db      	uxtb	r3, r3
20001e04:	091b      	lsrs	r3, r3, #4
20001e06:	b2db      	uxtb	r3, r3
20001e08:	e009      	b.n	20001e1e <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
20001e0a:	4a09      	ldr	r2, [pc, #36]	; (20001e30 <__NVIC_GetPriority+0x4c>)
20001e0c:	79fb      	ldrb	r3, [r7, #7]
20001e0e:	f003 030f 	and.w	r3, r3, #15
20001e12:	3b04      	subs	r3, #4
20001e14:	4413      	add	r3, r2
20001e16:	7e1b      	ldrb	r3, [r3, #24]
20001e18:	b2db      	uxtb	r3, r3
20001e1a:	091b      	lsrs	r3, r3, #4
20001e1c:	b2db      	uxtb	r3, r3
  }
}
20001e1e:	4618      	mov	r0, r3
20001e20:	370c      	adds	r7, #12
20001e22:	46bd      	mov	sp, r7
20001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e28:	4770      	bx	lr
20001e2a:	bf00      	nop
20001e2c:	e000e100 	.word	0xe000e100
20001e30:	e000ed00 	.word	0xe000ed00

20001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
20001e34:	b480      	push	{r7}
20001e36:	b089      	sub	sp, #36	; 0x24
20001e38:	af00      	add	r7, sp, #0
20001e3a:	60f8      	str	r0, [r7, #12]
20001e3c:	60b9      	str	r1, [r7, #8]
20001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20001e40:	68fb      	ldr	r3, [r7, #12]
20001e42:	f003 0307 	and.w	r3, r3, #7
20001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001e48:	69fb      	ldr	r3, [r7, #28]
20001e4a:	f1c3 0307 	rsb	r3, r3, #7
20001e4e:	2b04      	cmp	r3, #4
20001e50:	bf28      	it	cs
20001e52:	2304      	movcs	r3, #4
20001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001e56:	69fb      	ldr	r3, [r7, #28]
20001e58:	3304      	adds	r3, #4
20001e5a:	2b06      	cmp	r3, #6
20001e5c:	d902      	bls.n	20001e64 <NVIC_EncodePriority+0x30>
20001e5e:	69fb      	ldr	r3, [r7, #28]
20001e60:	3b03      	subs	r3, #3
20001e62:	e000      	b.n	20001e66 <NVIC_EncodePriority+0x32>
20001e64:	2300      	movs	r3, #0
20001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001e68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001e6c:	69bb      	ldr	r3, [r7, #24]
20001e6e:	fa02 f303 	lsl.w	r3, r2, r3
20001e72:	43da      	mvns	r2, r3
20001e74:	68bb      	ldr	r3, [r7, #8]
20001e76:	401a      	ands	r2, r3
20001e78:	697b      	ldr	r3, [r7, #20]
20001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20001e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
20001e80:	697b      	ldr	r3, [r7, #20]
20001e82:	fa01 f303 	lsl.w	r3, r1, r3
20001e86:	43d9      	mvns	r1, r3
20001e88:	687b      	ldr	r3, [r7, #4]
20001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001e8c:	4313      	orrs	r3, r2
         );
}
20001e8e:	4618      	mov	r0, r3
20001e90:	3724      	adds	r7, #36	; 0x24
20001e92:	46bd      	mov	sp, r7
20001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
20001e98:	4770      	bx	lr

20001e9a <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
20001e9a:	b480      	push	{r7}
20001e9c:	b089      	sub	sp, #36	; 0x24
20001e9e:	af00      	add	r7, sp, #0
20001ea0:	60f8      	str	r0, [r7, #12]
20001ea2:	60b9      	str	r1, [r7, #8]
20001ea4:	607a      	str	r2, [r7, #4]
20001ea6:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20001ea8:	68bb      	ldr	r3, [r7, #8]
20001eaa:	f003 0307 	and.w	r3, r3, #7
20001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001eb0:	69fb      	ldr	r3, [r7, #28]
20001eb2:	f1c3 0307 	rsb	r3, r3, #7
20001eb6:	2b04      	cmp	r3, #4
20001eb8:	bf28      	it	cs
20001eba:	2304      	movcs	r3, #4
20001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
20001ebe:	69fb      	ldr	r3, [r7, #28]
20001ec0:	3304      	adds	r3, #4
20001ec2:	2b06      	cmp	r3, #6
20001ec4:	d902      	bls.n	20001ecc <NVIC_DecodePriority+0x32>
20001ec6:	69fb      	ldr	r3, [r7, #28]
20001ec8:	3b03      	subs	r3, #3
20001eca:	e000      	b.n	20001ece <NVIC_DecodePriority+0x34>
20001ecc:	2300      	movs	r3, #0
20001ece:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
20001ed0:	68fa      	ldr	r2, [r7, #12]
20001ed2:	697b      	ldr	r3, [r7, #20]
20001ed4:	40da      	lsrs	r2, r3
20001ed6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
20001eda:	69bb      	ldr	r3, [r7, #24]
20001edc:	fa01 f303 	lsl.w	r3, r1, r3
20001ee0:	43db      	mvns	r3, r3
20001ee2:	401a      	ands	r2, r3
20001ee4:	687b      	ldr	r3, [r7, #4]
20001ee6:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
20001ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20001eec:	697b      	ldr	r3, [r7, #20]
20001eee:	fa02 f303 	lsl.w	r3, r2, r3
20001ef2:	43da      	mvns	r2, r3
20001ef4:	68fb      	ldr	r3, [r7, #12]
20001ef6:	401a      	ands	r2, r3
20001ef8:	683b      	ldr	r3, [r7, #0]
20001efa:	601a      	str	r2, [r3, #0]
}
20001efc:	bf00      	nop
20001efe:	3724      	adds	r7, #36	; 0x24
20001f00:	46bd      	mov	sp, r7
20001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
20001f06:	4770      	bx	lr

20001f08 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
20001f08:	b480      	push	{r7}
20001f0a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
20001f0c:	f3bf 8f4f 	dsb	sy
}
20001f10:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
20001f12:	4b06      	ldr	r3, [pc, #24]	; (20001f2c <__NVIC_SystemReset+0x24>)
20001f14:	68db      	ldr	r3, [r3, #12]
20001f16:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
20001f1a:	4904      	ldr	r1, [pc, #16]	; (20001f2c <__NVIC_SystemReset+0x24>)
20001f1c:	4b04      	ldr	r3, [pc, #16]	; (20001f30 <__NVIC_SystemReset+0x28>)
20001f1e:	4313      	orrs	r3, r2
20001f20:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
20001f22:	f3bf 8f4f 	dsb	sy
}
20001f26:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
20001f28:	bf00      	nop
20001f2a:	e7fd      	b.n	20001f28 <__NVIC_SystemReset+0x20>
20001f2c:	e000ed00 	.word	0xe000ed00
20001f30:	05fa0004 	.word	0x05fa0004

20001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
20001f34:	b580      	push	{r7, lr}
20001f36:	b082      	sub	sp, #8
20001f38:	af00      	add	r7, sp, #0
20001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
20001f3c:	687b      	ldr	r3, [r7, #4]
20001f3e:	3b01      	subs	r3, #1
20001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20001f44:	d301      	bcc.n	20001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
20001f46:	2301      	movs	r3, #1
20001f48:	e00f      	b.n	20001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
20001f4a:	4a0a      	ldr	r2, [pc, #40]	; (20001f74 <SysTick_Config+0x40>)
20001f4c:	687b      	ldr	r3, [r7, #4]
20001f4e:	3b01      	subs	r3, #1
20001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
20001f52:	210f      	movs	r1, #15
20001f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
20001f58:	f7ff ff1a 	bl	20001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
20001f5c:	4b05      	ldr	r3, [pc, #20]	; (20001f74 <SysTick_Config+0x40>)
20001f5e:	2200      	movs	r2, #0
20001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
20001f62:	4b04      	ldr	r3, [pc, #16]	; (20001f74 <SysTick_Config+0x40>)
20001f64:	2207      	movs	r2, #7
20001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
20001f68:	2300      	movs	r3, #0
}
20001f6a:	4618      	mov	r0, r3
20001f6c:	3708      	adds	r7, #8
20001f6e:	46bd      	mov	sp, r7
20001f70:	bd80      	pop	{r7, pc}
20001f72:	bf00      	nop
20001f74:	e000e010 	.word	0xe000e010

20001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001f78:	b580      	push	{r7, lr}
20001f7a:	b082      	sub	sp, #8
20001f7c:	af00      	add	r7, sp, #0
20001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20001f80:	6878      	ldr	r0, [r7, #4]
20001f82:	f7ff fe11 	bl	20001ba8 <__NVIC_SetPriorityGrouping>
}
20001f86:	bf00      	nop
20001f88:	3708      	adds	r7, #8
20001f8a:	46bd      	mov	sp, r7
20001f8c:	bd80      	pop	{r7, pc}

20001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
20001f8e:	b580      	push	{r7, lr}
20001f90:	b086      	sub	sp, #24
20001f92:	af00      	add	r7, sp, #0
20001f94:	4603      	mov	r3, r0
20001f96:	60b9      	str	r1, [r7, #8]
20001f98:	607a      	str	r2, [r7, #4]
20001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
20001f9c:	2300      	movs	r3, #0
20001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
20001fa0:	f7ff fe26 	bl	20001bf0 <__NVIC_GetPriorityGrouping>
20001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20001fa6:	687a      	ldr	r2, [r7, #4]
20001fa8:	68b9      	ldr	r1, [r7, #8]
20001faa:	6978      	ldr	r0, [r7, #20]
20001fac:	f7ff ff42 	bl	20001e34 <NVIC_EncodePriority>
20001fb0:	4602      	mov	r2, r0
20001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001fb6:	4611      	mov	r1, r2
20001fb8:	4618      	mov	r0, r3
20001fba:	f7ff fee9 	bl	20001d90 <__NVIC_SetPriority>
}
20001fbe:	bf00      	nop
20001fc0:	3718      	adds	r7, #24
20001fc2:	46bd      	mov	sp, r7
20001fc4:	bd80      	pop	{r7, pc}

20001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
20001fc6:	b580      	push	{r7, lr}
20001fc8:	b082      	sub	sp, #8
20001fca:	af00      	add	r7, sp, #0
20001fcc:	4603      	mov	r3, r0
20001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
20001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001fd4:	4618      	mov	r0, r3
20001fd6:	f7ff fe19 	bl	20001c0c <__NVIC_EnableIRQ>
}
20001fda:	bf00      	nop
20001fdc:	3708      	adds	r7, #8
20001fde:	46bd      	mov	sp, r7
20001fe0:	bd80      	pop	{r7, pc}

20001fe2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
20001fe2:	b580      	push	{r7, lr}
20001fe4:	b082      	sub	sp, #8
20001fe6:	af00      	add	r7, sp, #0
20001fe8:	4603      	mov	r3, r0
20001fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
20001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001ff0:	4618      	mov	r0, r3
20001ff2:	f7ff fe29 	bl	20001c48 <__NVIC_DisableIRQ>
}
20001ff6:	bf00      	nop
20001ff8:	3708      	adds	r7, #8
20001ffa:	46bd      	mov	sp, r7
20001ffc:	bd80      	pop	{r7, pc}

20001ffe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
20001ffe:	b580      	push	{r7, lr}
20002000:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
20002002:	f7ff ff81 	bl	20001f08 <__NVIC_SystemReset>

20002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20002006:	b580      	push	{r7, lr}
20002008:	b082      	sub	sp, #8
2000200a:	af00      	add	r7, sp, #0
2000200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000200e:	6878      	ldr	r0, [r7, #4]
20002010:	f7ff ff90 	bl	20001f34 <SysTick_Config>
20002014:	4603      	mov	r3, r0
}
20002016:	4618      	mov	r0, r3
20002018:	3708      	adds	r7, #8
2000201a:	46bd      	mov	sp, r7
2000201c:	bd80      	pop	{r7, pc}
	...

20002020 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
20002020:	b480      	push	{r7}
20002022:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
20002024:	f3bf 8f5f 	dmb	sy
}
20002028:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
2000202a:	4b07      	ldr	r3, [pc, #28]	; (20002048 <HAL_MPU_Disable+0x28>)
2000202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000202e:	4a06      	ldr	r2, [pc, #24]	; (20002048 <HAL_MPU_Disable+0x28>)
20002030:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20002034:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
20002036:	4b05      	ldr	r3, [pc, #20]	; (2000204c <HAL_MPU_Disable+0x2c>)
20002038:	2200      	movs	r2, #0
2000203a:	605a      	str	r2, [r3, #4]
}
2000203c:	bf00      	nop
2000203e:	46bd      	mov	sp, r7
20002040:	f85d 7b04 	ldr.w	r7, [sp], #4
20002044:	4770      	bx	lr
20002046:	bf00      	nop
20002048:	e000ed00 	.word	0xe000ed00
2000204c:	e000ed90 	.word	0xe000ed90

20002050 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
20002050:	b480      	push	{r7}
20002052:	b083      	sub	sp, #12
20002054:	af00      	add	r7, sp, #0
20002056:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
20002058:	4a0b      	ldr	r2, [pc, #44]	; (20002088 <HAL_MPU_Enable+0x38>)
2000205a:	687b      	ldr	r3, [r7, #4]
2000205c:	f043 0301 	orr.w	r3, r3, #1
20002060:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
20002062:	4b0a      	ldr	r3, [pc, #40]	; (2000208c <HAL_MPU_Enable+0x3c>)
20002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002066:	4a09      	ldr	r2, [pc, #36]	; (2000208c <HAL_MPU_Enable+0x3c>)
20002068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000206c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
2000206e:	f3bf 8f4f 	dsb	sy
}
20002072:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
20002074:	f3bf 8f6f 	isb	sy
}
20002078:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
2000207a:	bf00      	nop
2000207c:	370c      	adds	r7, #12
2000207e:	46bd      	mov	sp, r7
20002080:	f85d 7b04 	ldr.w	r7, [sp], #4
20002084:	4770      	bx	lr
20002086:	bf00      	nop
20002088:	e000ed90 	.word	0xe000ed90
2000208c:	e000ed00 	.word	0xe000ed00

20002090 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
20002090:	b480      	push	{r7}
20002092:	b083      	sub	sp, #12
20002094:	af00      	add	r7, sp, #0
20002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
20002098:	687b      	ldr	r3, [r7, #4]
2000209a:	785a      	ldrb	r2, [r3, #1]
2000209c:	4b1d      	ldr	r3, [pc, #116]	; (20002114 <HAL_MPU_ConfigRegion+0x84>)
2000209e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
200020a0:	687b      	ldr	r3, [r7, #4]
200020a2:	781b      	ldrb	r3, [r3, #0]
200020a4:	2b00      	cmp	r3, #0
200020a6:	d029      	beq.n	200020fc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
200020a8:	4a1a      	ldr	r2, [pc, #104]	; (20002114 <HAL_MPU_ConfigRegion+0x84>)
200020aa:	687b      	ldr	r3, [r7, #4]
200020ac:	685b      	ldr	r3, [r3, #4]
200020ae:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200020b0:	687b      	ldr	r3, [r7, #4]
200020b2:	7b1b      	ldrb	r3, [r3, #12]
200020b4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200020b6:	687b      	ldr	r3, [r7, #4]
200020b8:	7adb      	ldrb	r3, [r3, #11]
200020ba:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200020bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200020be:	687b      	ldr	r3, [r7, #4]
200020c0:	7a9b      	ldrb	r3, [r3, #10]
200020c2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
200020c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200020c6:	687b      	ldr	r3, [r7, #4]
200020c8:	7b5b      	ldrb	r3, [r3, #13]
200020ca:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
200020cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200020ce:	687b      	ldr	r3, [r7, #4]
200020d0:	7b9b      	ldrb	r3, [r3, #14]
200020d2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
200020d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200020d6:	687b      	ldr	r3, [r7, #4]
200020d8:	7bdb      	ldrb	r3, [r3, #15]
200020da:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
200020dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200020de:	687b      	ldr	r3, [r7, #4]
200020e0:	7a5b      	ldrb	r3, [r3, #9]
200020e2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
200020e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200020e6:	687b      	ldr	r3, [r7, #4]
200020e8:	7a1b      	ldrb	r3, [r3, #8]
200020ea:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
200020ec:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
200020ee:	687a      	ldr	r2, [r7, #4]
200020f0:	7812      	ldrb	r2, [r2, #0]
200020f2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200020f4:	4a07      	ldr	r2, [pc, #28]	; (20002114 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
200020f6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
200020f8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
200020fa:	e005      	b.n	20002108 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
200020fc:	4b05      	ldr	r3, [pc, #20]	; (20002114 <HAL_MPU_ConfigRegion+0x84>)
200020fe:	2200      	movs	r2, #0
20002100:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
20002102:	4b04      	ldr	r3, [pc, #16]	; (20002114 <HAL_MPU_ConfigRegion+0x84>)
20002104:	2200      	movs	r2, #0
20002106:	611a      	str	r2, [r3, #16]
}
20002108:	bf00      	nop
2000210a:	370c      	adds	r7, #12
2000210c:	46bd      	mov	sp, r7
2000210e:	f85d 7b04 	ldr.w	r7, [sp], #4
20002112:	4770      	bx	lr
20002114:	e000ed90 	.word	0xe000ed90

20002118 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
20002118:	b580      	push	{r7, lr}
2000211a:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
2000211c:	f7ff fd68 	bl	20001bf0 <__NVIC_GetPriorityGrouping>
20002120:	4603      	mov	r3, r0
}
20002122:	4618      	mov	r0, r3
20002124:	bd80      	pop	{r7, pc}

20002126 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
20002126:	b580      	push	{r7, lr}
20002128:	b084      	sub	sp, #16
2000212a:	af00      	add	r7, sp, #0
2000212c:	60b9      	str	r1, [r7, #8]
2000212e:	607a      	str	r2, [r7, #4]
20002130:	603b      	str	r3, [r7, #0]
20002132:	4603      	mov	r3, r0
20002134:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
20002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000213a:	4618      	mov	r0, r3
2000213c:	f7ff fe52 	bl	20001de4 <__NVIC_GetPriority>
20002140:	683b      	ldr	r3, [r7, #0]
20002142:	687a      	ldr	r2, [r7, #4]
20002144:	68b9      	ldr	r1, [r7, #8]
20002146:	f7ff fea8 	bl	20001e9a <NVIC_DecodePriority>
}
2000214a:	bf00      	nop
2000214c:	3710      	adds	r7, #16
2000214e:	46bd      	mov	sp, r7
20002150:	bd80      	pop	{r7, pc}

20002152 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
20002152:	b580      	push	{r7, lr}
20002154:	b082      	sub	sp, #8
20002156:	af00      	add	r7, sp, #0
20002158:	4603      	mov	r3, r0
2000215a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
2000215c:	f997 3007 	ldrsb.w	r3, [r7, #7]
20002160:	4618      	mov	r0, r3
20002162:	f7ff fdb7 	bl	20001cd4 <__NVIC_SetPendingIRQ>
}
20002166:	bf00      	nop
20002168:	3708      	adds	r7, #8
2000216a:	46bd      	mov	sp, r7
2000216c:	bd80      	pop	{r7, pc}

2000216e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
2000216e:	b580      	push	{r7, lr}
20002170:	b082      	sub	sp, #8
20002172:	af00      	add	r7, sp, #0
20002174:	4603      	mov	r3, r0
20002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
20002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000217c:	4618      	mov	r0, r3
2000217e:	f7ff fd87 	bl	20001c90 <__NVIC_GetPendingIRQ>
20002182:	4603      	mov	r3, r0
}
20002184:	4618      	mov	r0, r3
20002186:	3708      	adds	r7, #8
20002188:	46bd      	mov	sp, r7
2000218a:	bd80      	pop	{r7, pc}

2000218c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
2000218c:	b580      	push	{r7, lr}
2000218e:	b082      	sub	sp, #8
20002190:	af00      	add	r7, sp, #0
20002192:	4603      	mov	r3, r0
20002194:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
20002196:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000219a:	4618      	mov	r0, r3
2000219c:	f7ff fdb8 	bl	20001d10 <__NVIC_ClearPendingIRQ>
}
200021a0:	bf00      	nop
200021a2:	3708      	adds	r7, #8
200021a4:	46bd      	mov	sp, r7
200021a6:	bd80      	pop	{r7, pc}

200021a8 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
200021a8:	b580      	push	{r7, lr}
200021aa:	b082      	sub	sp, #8
200021ac:	af00      	add	r7, sp, #0
200021ae:	4603      	mov	r3, r0
200021b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
200021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
200021b6:	4618      	mov	r0, r3
200021b8:	f7ff fdc8 	bl	20001d4c <__NVIC_GetActive>
200021bc:	4603      	mov	r3, r0
}
200021be:	4618      	mov	r0, r3
200021c0:	3708      	adds	r7, #8
200021c2:	46bd      	mov	sp, r7
200021c4:	bd80      	pop	{r7, pc}
	...

200021c8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
200021c8:	b480      	push	{r7}
200021ca:	b083      	sub	sp, #12
200021cc:	af00      	add	r7, sp, #0
200021ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
200021d0:	687b      	ldr	r3, [r7, #4]
200021d2:	2b04      	cmp	r3, #4
200021d4:	d106      	bne.n	200021e4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
200021d6:	4b09      	ldr	r3, [pc, #36]	; (200021fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200021d8:	681b      	ldr	r3, [r3, #0]
200021da:	4a08      	ldr	r2, [pc, #32]	; (200021fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200021dc:	f043 0304 	orr.w	r3, r3, #4
200021e0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
200021e2:	e005      	b.n	200021f0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
200021e4:	4b05      	ldr	r3, [pc, #20]	; (200021fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200021e6:	681b      	ldr	r3, [r3, #0]
200021e8:	4a04      	ldr	r2, [pc, #16]	; (200021fc <HAL_SYSTICK_CLKSourceConfig+0x34>)
200021ea:	f023 0304 	bic.w	r3, r3, #4
200021ee:	6013      	str	r3, [r2, #0]
}
200021f0:	bf00      	nop
200021f2:	370c      	adds	r7, #12
200021f4:	46bd      	mov	sp, r7
200021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200021fa:	4770      	bx	lr
200021fc:	e000e010 	.word	0xe000e010

20002200 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
20002200:	b580      	push	{r7, lr}
20002202:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
20002204:	f000 f802 	bl	2000220c <HAL_SYSTICK_Callback>
}
20002208:	bf00      	nop
2000220a:	bd80      	pop	{r7, pc}

2000220c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
2000220c:	b480      	push	{r7}
2000220e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
20002210:	bf00      	nop
20002212:	46bd      	mov	sp, r7
20002214:	f85d 7b04 	ldr.w	r7, [sp], #4
20002218:	4770      	bx	lr
	...

2000221c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
2000221c:	b580      	push	{r7, lr}
2000221e:	b086      	sub	sp, #24
20002220:	af00      	add	r7, sp, #0
20002222:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
20002224:	2300      	movs	r3, #0
20002226:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
20002228:	f7ff fb6e 	bl	20001908 <HAL_GetTick>
2000222c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
2000222e:	687b      	ldr	r3, [r7, #4]
20002230:	2b00      	cmp	r3, #0
20002232:	d101      	bne.n	20002238 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
20002234:	2301      	movs	r3, #1
20002236:	e099      	b.n	2000236c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
20002238:	687b      	ldr	r3, [r7, #4]
2000223a:	2200      	movs	r2, #0
2000223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
20002240:	687b      	ldr	r3, [r7, #4]
20002242:	2202      	movs	r2, #2
20002244:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
20002248:	687b      	ldr	r3, [r7, #4]
2000224a:	681b      	ldr	r3, [r3, #0]
2000224c:	681a      	ldr	r2, [r3, #0]
2000224e:	687b      	ldr	r3, [r7, #4]
20002250:	681b      	ldr	r3, [r3, #0]
20002252:	f022 0201 	bic.w	r2, r2, #1
20002256:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002258:	e00f      	b.n	2000227a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
2000225a:	f7ff fb55 	bl	20001908 <HAL_GetTick>
2000225e:	4602      	mov	r2, r0
20002260:	693b      	ldr	r3, [r7, #16]
20002262:	1ad3      	subs	r3, r2, r3
20002264:	2b05      	cmp	r3, #5
20002266:	d908      	bls.n	2000227a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
20002268:	687b      	ldr	r3, [r7, #4]
2000226a:	2220      	movs	r2, #32
2000226c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
2000226e:	687b      	ldr	r3, [r7, #4]
20002270:	2203      	movs	r2, #3
20002272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
20002276:	2303      	movs	r3, #3
20002278:	e078      	b.n	2000236c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
2000227a:	687b      	ldr	r3, [r7, #4]
2000227c:	681b      	ldr	r3, [r3, #0]
2000227e:	681b      	ldr	r3, [r3, #0]
20002280:	f003 0301 	and.w	r3, r3, #1
20002284:	2b00      	cmp	r3, #0
20002286:	d1e8      	bne.n	2000225a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
20002288:	687b      	ldr	r3, [r7, #4]
2000228a:	681b      	ldr	r3, [r3, #0]
2000228c:	681b      	ldr	r3, [r3, #0]
2000228e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
20002290:	697a      	ldr	r2, [r7, #20]
20002292:	4b38      	ldr	r3, [pc, #224]	; (20002374 <HAL_DMA_Init+0x158>)
20002294:	4013      	ands	r3, r2
20002296:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
20002298:	687b      	ldr	r3, [r7, #4]
2000229a:	685a      	ldr	r2, [r3, #4]
2000229c:	687b      	ldr	r3, [r7, #4]
2000229e:	689b      	ldr	r3, [r3, #8]
200022a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200022a2:	687b      	ldr	r3, [r7, #4]
200022a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200022a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200022a8:	687b      	ldr	r3, [r7, #4]
200022aa:	691b      	ldr	r3, [r3, #16]
200022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200022ae:	687b      	ldr	r3, [r7, #4]
200022b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
200022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200022b4:	687b      	ldr	r3, [r7, #4]
200022b6:	699b      	ldr	r3, [r3, #24]
200022b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
200022ba:	687b      	ldr	r3, [r7, #4]
200022bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
200022be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
200022c0:	687b      	ldr	r3, [r7, #4]
200022c2:	6a1b      	ldr	r3, [r3, #32]
200022c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
200022c6:	697a      	ldr	r2, [r7, #20]
200022c8:	4313      	orrs	r3, r2
200022ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
200022cc:	687b      	ldr	r3, [r7, #4]
200022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200022d0:	2b04      	cmp	r3, #4
200022d2:	d107      	bne.n	200022e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
200022d4:	687b      	ldr	r3, [r7, #4]
200022d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
200022d8:	687b      	ldr	r3, [r7, #4]
200022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200022dc:	4313      	orrs	r3, r2
200022de:	697a      	ldr	r2, [r7, #20]
200022e0:	4313      	orrs	r3, r2
200022e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
200022e4:	687b      	ldr	r3, [r7, #4]
200022e6:	681b      	ldr	r3, [r3, #0]
200022e8:	697a      	ldr	r2, [r7, #20]
200022ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
200022ec:	687b      	ldr	r3, [r7, #4]
200022ee:	681b      	ldr	r3, [r3, #0]
200022f0:	695b      	ldr	r3, [r3, #20]
200022f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
200022f4:	697b      	ldr	r3, [r7, #20]
200022f6:	f023 0307 	bic.w	r3, r3, #7
200022fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
200022fc:	687b      	ldr	r3, [r7, #4]
200022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002300:	697a      	ldr	r2, [r7, #20]
20002302:	4313      	orrs	r3, r2
20002304:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
20002306:	687b      	ldr	r3, [r7, #4]
20002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000230a:	2b04      	cmp	r3, #4
2000230c:	d117      	bne.n	2000233e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
2000230e:	687b      	ldr	r3, [r7, #4]
20002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002312:	697a      	ldr	r2, [r7, #20]
20002314:	4313      	orrs	r3, r2
20002316:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
20002318:	687b      	ldr	r3, [r7, #4]
2000231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000231c:	2b00      	cmp	r3, #0
2000231e:	d00e      	beq.n	2000233e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
20002320:	6878      	ldr	r0, [r7, #4]
20002322:	f000 fd51 	bl	20002dc8 <DMA_CheckFifoParam>
20002326:	4603      	mov	r3, r0
20002328:	2b00      	cmp	r3, #0
2000232a:	d008      	beq.n	2000233e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
2000232c:	687b      	ldr	r3, [r7, #4]
2000232e:	2240      	movs	r2, #64	; 0x40
20002330:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002332:	687b      	ldr	r3, [r7, #4]
20002334:	2201      	movs	r2, #1
20002336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
2000233a:	2301      	movs	r3, #1
2000233c:	e016      	b.n	2000236c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
2000233e:	687b      	ldr	r3, [r7, #4]
20002340:	681b      	ldr	r3, [r3, #0]
20002342:	697a      	ldr	r2, [r7, #20]
20002344:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
20002346:	6878      	ldr	r0, [r7, #4]
20002348:	f000 fd08 	bl	20002d5c <DMA_CalcBaseAndBitshift>
2000234c:	4603      	mov	r3, r0
2000234e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20002350:	687b      	ldr	r3, [r7, #4]
20002352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002354:	223f      	movs	r2, #63	; 0x3f
20002356:	409a      	lsls	r2, r3
20002358:	68fb      	ldr	r3, [r7, #12]
2000235a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
2000235c:	687b      	ldr	r3, [r7, #4]
2000235e:	2200      	movs	r2, #0
20002360:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
20002362:	687b      	ldr	r3, [r7, #4]
20002364:	2201      	movs	r2, #1
20002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
2000236a:	2300      	movs	r3, #0
}
2000236c:	4618      	mov	r0, r3
2000236e:	3718      	adds	r7, #24
20002370:	46bd      	mov	sp, r7
20002372:	bd80      	pop	{r7, pc}
20002374:	f010803f 	.word	0xf010803f

20002378 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
20002378:	b580      	push	{r7, lr}
2000237a:	b084      	sub	sp, #16
2000237c:	af00      	add	r7, sp, #0
2000237e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
20002380:	687b      	ldr	r3, [r7, #4]
20002382:	2b00      	cmp	r3, #0
20002384:	d101      	bne.n	2000238a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
20002386:	2301      	movs	r3, #1
20002388:	e050      	b.n	2000242c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
2000238a:	687b      	ldr	r3, [r7, #4]
2000238c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002390:	b2db      	uxtb	r3, r3
20002392:	2b02      	cmp	r3, #2
20002394:	d101      	bne.n	2000239a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
20002396:	2302      	movs	r3, #2
20002398:	e048      	b.n	2000242c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
2000239a:	687b      	ldr	r3, [r7, #4]
2000239c:	681b      	ldr	r3, [r3, #0]
2000239e:	681a      	ldr	r2, [r3, #0]
200023a0:	687b      	ldr	r3, [r7, #4]
200023a2:	681b      	ldr	r3, [r3, #0]
200023a4:	f022 0201 	bic.w	r2, r2, #1
200023a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
200023aa:	687b      	ldr	r3, [r7, #4]
200023ac:	681b      	ldr	r3, [r3, #0]
200023ae:	2200      	movs	r2, #0
200023b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
200023b2:	687b      	ldr	r3, [r7, #4]
200023b4:	681b      	ldr	r3, [r3, #0]
200023b6:	2200      	movs	r2, #0
200023b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
200023ba:	687b      	ldr	r3, [r7, #4]
200023bc:	681b      	ldr	r3, [r3, #0]
200023be:	2200      	movs	r2, #0
200023c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
200023c2:	687b      	ldr	r3, [r7, #4]
200023c4:	681b      	ldr	r3, [r3, #0]
200023c6:	2200      	movs	r2, #0
200023c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
200023ca:	687b      	ldr	r3, [r7, #4]
200023cc:	681b      	ldr	r3, [r3, #0]
200023ce:	2200      	movs	r2, #0
200023d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
200023d2:	687b      	ldr	r3, [r7, #4]
200023d4:	681b      	ldr	r3, [r3, #0]
200023d6:	2221      	movs	r2, #33	; 0x21
200023d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
200023da:	6878      	ldr	r0, [r7, #4]
200023dc:	f000 fcbe 	bl	20002d5c <DMA_CalcBaseAndBitshift>
200023e0:	4603      	mov	r3, r0
200023e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
200023e4:	687b      	ldr	r3, [r7, #4]
200023e6:	2200      	movs	r2, #0
200023e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
200023ea:	687b      	ldr	r3, [r7, #4]
200023ec:	2200      	movs	r2, #0
200023ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
200023f0:	687b      	ldr	r3, [r7, #4]
200023f2:	2200      	movs	r2, #0
200023f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
200023f6:	687b      	ldr	r3, [r7, #4]
200023f8:	2200      	movs	r2, #0
200023fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
200023fc:	687b      	ldr	r3, [r7, #4]
200023fe:	2200      	movs	r2, #0
20002400:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
20002402:	687b      	ldr	r3, [r7, #4]
20002404:	2200      	movs	r2, #0
20002406:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
20002408:	687b      	ldr	r3, [r7, #4]
2000240a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000240c:	223f      	movs	r2, #63	; 0x3f
2000240e:	409a      	lsls	r2, r3
20002410:	68fb      	ldr	r3, [r7, #12]
20002412:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002414:	687b      	ldr	r3, [r7, #4]
20002416:	2200      	movs	r2, #0
20002418:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
2000241a:	687b      	ldr	r3, [r7, #4]
2000241c:	2200      	movs	r2, #0
2000241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20002422:	687b      	ldr	r3, [r7, #4]
20002424:	2200      	movs	r2, #0
20002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
2000242a:	2300      	movs	r3, #0
}
2000242c:	4618      	mov	r0, r3
2000242e:	3710      	adds	r7, #16
20002430:	46bd      	mov	sp, r7
20002432:	bd80      	pop	{r7, pc}

20002434 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20002434:	b580      	push	{r7, lr}
20002436:	b086      	sub	sp, #24
20002438:	af00      	add	r7, sp, #0
2000243a:	60f8      	str	r0, [r7, #12]
2000243c:	60b9      	str	r1, [r7, #8]
2000243e:	607a      	str	r2, [r7, #4]
20002440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002442:	2300      	movs	r3, #0
20002444:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
20002446:	68fb      	ldr	r3, [r7, #12]
20002448:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
2000244c:	2b01      	cmp	r3, #1
2000244e:	d101      	bne.n	20002454 <HAL_DMA_Start+0x20>
20002450:	2302      	movs	r3, #2
20002452:	e026      	b.n	200024a2 <HAL_DMA_Start+0x6e>
20002454:	68fb      	ldr	r3, [r7, #12]
20002456:	2201      	movs	r2, #1
20002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
2000245c:	68fb      	ldr	r3, [r7, #12]
2000245e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002462:	b2db      	uxtb	r3, r3
20002464:	2b01      	cmp	r3, #1
20002466:	d115      	bne.n	20002494 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20002468:	68fb      	ldr	r3, [r7, #12]
2000246a:	2202      	movs	r2, #2
2000246c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002470:	68fb      	ldr	r3, [r7, #12]
20002472:	2200      	movs	r2, #0
20002474:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
20002476:	683b      	ldr	r3, [r7, #0]
20002478:	687a      	ldr	r2, [r7, #4]
2000247a:	68b9      	ldr	r1, [r7, #8]
2000247c:	68f8      	ldr	r0, [r7, #12]
2000247e:	f000 fc3f 	bl	20002d00 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002482:	68fb      	ldr	r3, [r7, #12]
20002484:	681b      	ldr	r3, [r3, #0]
20002486:	681a      	ldr	r2, [r3, #0]
20002488:	68fb      	ldr	r3, [r7, #12]
2000248a:	681b      	ldr	r3, [r3, #0]
2000248c:	f042 0201 	orr.w	r2, r2, #1
20002490:	601a      	str	r2, [r3, #0]
20002492:	e005      	b.n	200024a0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
20002494:	68fb      	ldr	r3, [r7, #12]
20002496:	2200      	movs	r2, #0
20002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
2000249c:	2302      	movs	r3, #2
2000249e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
200024a0:	7dfb      	ldrb	r3, [r7, #23]
}
200024a2:	4618      	mov	r0, r3
200024a4:	3718      	adds	r7, #24
200024a6:	46bd      	mov	sp, r7
200024a8:	bd80      	pop	{r7, pc}

200024aa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
200024aa:	b580      	push	{r7, lr}
200024ac:	b086      	sub	sp, #24
200024ae:	af00      	add	r7, sp, #0
200024b0:	60f8      	str	r0, [r7, #12]
200024b2:	60b9      	str	r1, [r7, #8]
200024b4:	607a      	str	r2, [r7, #4]
200024b6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
200024b8:	2300      	movs	r3, #0
200024ba:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
200024bc:	68fb      	ldr	r3, [r7, #12]
200024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200024c0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
200024c2:	68fb      	ldr	r3, [r7, #12]
200024c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
200024c8:	2b01      	cmp	r3, #1
200024ca:	d101      	bne.n	200024d0 <HAL_DMA_Start_IT+0x26>
200024cc:	2302      	movs	r3, #2
200024ce:	e040      	b.n	20002552 <HAL_DMA_Start_IT+0xa8>
200024d0:	68fb      	ldr	r3, [r7, #12]
200024d2:	2201      	movs	r2, #1
200024d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
200024d8:	68fb      	ldr	r3, [r7, #12]
200024da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200024de:	b2db      	uxtb	r3, r3
200024e0:	2b01      	cmp	r3, #1
200024e2:	d12f      	bne.n	20002544 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
200024e4:	68fb      	ldr	r3, [r7, #12]
200024e6:	2202      	movs	r2, #2
200024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
200024ec:	68fb      	ldr	r3, [r7, #12]
200024ee:	2200      	movs	r2, #0
200024f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
200024f2:	683b      	ldr	r3, [r7, #0]
200024f4:	687a      	ldr	r2, [r7, #4]
200024f6:	68b9      	ldr	r1, [r7, #8]
200024f8:	68f8      	ldr	r0, [r7, #12]
200024fa:	f000 fc01 	bl	20002d00 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
200024fe:	68fb      	ldr	r3, [r7, #12]
20002500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002502:	223f      	movs	r2, #63	; 0x3f
20002504:	409a      	lsls	r2, r3
20002506:	693b      	ldr	r3, [r7, #16]
20002508:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
2000250a:	68fb      	ldr	r3, [r7, #12]
2000250c:	681b      	ldr	r3, [r3, #0]
2000250e:	681a      	ldr	r2, [r3, #0]
20002510:	68fb      	ldr	r3, [r7, #12]
20002512:	681b      	ldr	r3, [r3, #0]
20002514:	f042 0216 	orr.w	r2, r2, #22
20002518:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
2000251a:	68fb      	ldr	r3, [r7, #12]
2000251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000251e:	2b00      	cmp	r3, #0
20002520:	d007      	beq.n	20002532 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20002522:	68fb      	ldr	r3, [r7, #12]
20002524:	681b      	ldr	r3, [r3, #0]
20002526:	681a      	ldr	r2, [r3, #0]
20002528:	68fb      	ldr	r3, [r7, #12]
2000252a:	681b      	ldr	r3, [r3, #0]
2000252c:	f042 0208 	orr.w	r2, r2, #8
20002530:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
20002532:	68fb      	ldr	r3, [r7, #12]
20002534:	681b      	ldr	r3, [r3, #0]
20002536:	681a      	ldr	r2, [r3, #0]
20002538:	68fb      	ldr	r3, [r7, #12]
2000253a:	681b      	ldr	r3, [r3, #0]
2000253c:	f042 0201 	orr.w	r2, r2, #1
20002540:	601a      	str	r2, [r3, #0]
20002542:	e005      	b.n	20002550 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
20002544:	68fb      	ldr	r3, [r7, #12]
20002546:	2200      	movs	r2, #0
20002548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
2000254c:	2302      	movs	r3, #2
2000254e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
20002550:	7dfb      	ldrb	r3, [r7, #23]
}
20002552:	4618      	mov	r0, r3
20002554:	3718      	adds	r7, #24
20002556:	46bd      	mov	sp, r7
20002558:	bd80      	pop	{r7, pc}

2000255a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
2000255a:	b580      	push	{r7, lr}
2000255c:	b084      	sub	sp, #16
2000255e:	af00      	add	r7, sp, #0
20002560:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002562:	687b      	ldr	r3, [r7, #4]
20002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20002566:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
20002568:	f7ff f9ce 	bl	20001908 <HAL_GetTick>
2000256c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
2000256e:	687b      	ldr	r3, [r7, #4]
20002570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002574:	b2db      	uxtb	r3, r3
20002576:	2b02      	cmp	r3, #2
20002578:	d008      	beq.n	2000258c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2000257a:	687b      	ldr	r3, [r7, #4]
2000257c:	2280      	movs	r2, #128	; 0x80
2000257e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002580:	687b      	ldr	r3, [r7, #4]
20002582:	2200      	movs	r2, #0
20002584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
20002588:	2301      	movs	r3, #1
2000258a:	e052      	b.n	20002632 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
2000258c:	687b      	ldr	r3, [r7, #4]
2000258e:	681b      	ldr	r3, [r3, #0]
20002590:	681a      	ldr	r2, [r3, #0]
20002592:	687b      	ldr	r3, [r7, #4]
20002594:	681b      	ldr	r3, [r3, #0]
20002596:	f022 0216 	bic.w	r2, r2, #22
2000259a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
2000259c:	687b      	ldr	r3, [r7, #4]
2000259e:	681b      	ldr	r3, [r3, #0]
200025a0:	695a      	ldr	r2, [r3, #20]
200025a2:	687b      	ldr	r3, [r7, #4]
200025a4:	681b      	ldr	r3, [r3, #0]
200025a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
200025aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
200025ac:	687b      	ldr	r3, [r7, #4]
200025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200025b0:	2b00      	cmp	r3, #0
200025b2:	d103      	bne.n	200025bc <HAL_DMA_Abort+0x62>
200025b4:	687b      	ldr	r3, [r7, #4]
200025b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200025b8:	2b00      	cmp	r3, #0
200025ba:	d007      	beq.n	200025cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
200025bc:	687b      	ldr	r3, [r7, #4]
200025be:	681b      	ldr	r3, [r3, #0]
200025c0:	681a      	ldr	r2, [r3, #0]
200025c2:	687b      	ldr	r3, [r7, #4]
200025c4:	681b      	ldr	r3, [r3, #0]
200025c6:	f022 0208 	bic.w	r2, r2, #8
200025ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
200025cc:	687b      	ldr	r3, [r7, #4]
200025ce:	681b      	ldr	r3, [r3, #0]
200025d0:	681a      	ldr	r2, [r3, #0]
200025d2:	687b      	ldr	r3, [r7, #4]
200025d4:	681b      	ldr	r3, [r3, #0]
200025d6:	f022 0201 	bic.w	r2, r2, #1
200025da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
200025dc:	e013      	b.n	20002606 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
200025de:	f7ff f993 	bl	20001908 <HAL_GetTick>
200025e2:	4602      	mov	r2, r0
200025e4:	68bb      	ldr	r3, [r7, #8]
200025e6:	1ad3      	subs	r3, r2, r3
200025e8:	2b05      	cmp	r3, #5
200025ea:	d90c      	bls.n	20002606 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
200025ec:	687b      	ldr	r3, [r7, #4]
200025ee:	2220      	movs	r2, #32
200025f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
200025f2:	687b      	ldr	r3, [r7, #4]
200025f4:	2200      	movs	r2, #0
200025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
200025fa:	687b      	ldr	r3, [r7, #4]
200025fc:	2203      	movs	r2, #3
200025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
20002602:	2303      	movs	r3, #3
20002604:	e015      	b.n	20002632 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
20002606:	687b      	ldr	r3, [r7, #4]
20002608:	681b      	ldr	r3, [r3, #0]
2000260a:	681b      	ldr	r3, [r3, #0]
2000260c:	f003 0301 	and.w	r3, r3, #1
20002610:	2b00      	cmp	r3, #0
20002612:	d1e4      	bne.n	200025de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
20002614:	687b      	ldr	r3, [r7, #4]
20002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002618:	223f      	movs	r2, #63	; 0x3f
2000261a:	409a      	lsls	r2, r3
2000261c:	68fb      	ldr	r3, [r7, #12]
2000261e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002620:	687b      	ldr	r3, [r7, #4]
20002622:	2200      	movs	r2, #0
20002624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
20002628:	687b      	ldr	r3, [r7, #4]
2000262a:	2201      	movs	r2, #1
2000262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
20002630:	2300      	movs	r3, #0
}
20002632:	4618      	mov	r0, r3
20002634:	3710      	adds	r7, #16
20002636:	46bd      	mov	sp, r7
20002638:	bd80      	pop	{r7, pc}

2000263a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
2000263a:	b480      	push	{r7}
2000263c:	b083      	sub	sp, #12
2000263e:	af00      	add	r7, sp, #0
20002640:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
20002642:	687b      	ldr	r3, [r7, #4]
20002644:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002648:	b2db      	uxtb	r3, r3
2000264a:	2b02      	cmp	r3, #2
2000264c:	d004      	beq.n	20002658 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
2000264e:	687b      	ldr	r3, [r7, #4]
20002650:	2280      	movs	r2, #128	; 0x80
20002652:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002654:	2301      	movs	r3, #1
20002656:	e00c      	b.n	20002672 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
20002658:	687b      	ldr	r3, [r7, #4]
2000265a:	2205      	movs	r2, #5
2000265c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
20002660:	687b      	ldr	r3, [r7, #4]
20002662:	681b      	ldr	r3, [r3, #0]
20002664:	681a      	ldr	r2, [r3, #0]
20002666:	687b      	ldr	r3, [r7, #4]
20002668:	681b      	ldr	r3, [r3, #0]
2000266a:	f022 0201 	bic.w	r2, r2, #1
2000266e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
20002670:	2300      	movs	r3, #0
}
20002672:	4618      	mov	r0, r3
20002674:	370c      	adds	r7, #12
20002676:	46bd      	mov	sp, r7
20002678:	f85d 7b04 	ldr.w	r7, [sp], #4
2000267c:	4770      	bx	lr

2000267e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
2000267e:	b580      	push	{r7, lr}
20002680:	b08a      	sub	sp, #40	; 0x28
20002682:	af00      	add	r7, sp, #0
20002684:	60f8      	str	r0, [r7, #12]
20002686:	460b      	mov	r3, r1
20002688:	607a      	str	r2, [r7, #4]
2000268a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
2000268c:	2300      	movs	r3, #0
2000268e:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
20002690:	f7ff f93a 	bl	20001908 <HAL_GetTick>
20002694:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
20002696:	68fb      	ldr	r3, [r7, #12]
20002698:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
2000269c:	b2db      	uxtb	r3, r3
2000269e:	2b02      	cmp	r3, #2
200026a0:	d008      	beq.n	200026b4 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
200026a2:	68fb      	ldr	r3, [r7, #12]
200026a4:	2280      	movs	r2, #128	; 0x80
200026a6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
200026a8:	68fb      	ldr	r3, [r7, #12]
200026aa:	2200      	movs	r2, #0
200026ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
200026b0:	2301      	movs	r3, #1
200026b2:	e0bf      	b.n	20002834 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
200026b4:	68fb      	ldr	r3, [r7, #12]
200026b6:	681b      	ldr	r3, [r3, #0]
200026b8:	681b      	ldr	r3, [r3, #0]
200026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
200026be:	2b00      	cmp	r3, #0
200026c0:	d005      	beq.n	200026ce <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
200026c2:	68fb      	ldr	r3, [r7, #12]
200026c4:	f44f 7280 	mov.w	r2, #256	; 0x100
200026c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
200026ca:	2301      	movs	r3, #1
200026cc:	e0b2      	b.n	20002834 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
200026ce:	7afb      	ldrb	r3, [r7, #11]
200026d0:	2b00      	cmp	r3, #0
200026d2:	d106      	bne.n	200026e2 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
200026d4:	68fb      	ldr	r3, [r7, #12]
200026d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200026d8:	2220      	movs	r2, #32
200026da:	fa02 f303 	lsl.w	r3, r2, r3
200026de:	627b      	str	r3, [r7, #36]	; 0x24
200026e0:	e005      	b.n	200026ee <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
200026e2:	68fb      	ldr	r3, [r7, #12]
200026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200026e6:	2210      	movs	r2, #16
200026e8:	fa02 f303 	lsl.w	r3, r2, r3
200026ec:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
200026ee:	68fb      	ldr	r3, [r7, #12]
200026f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200026f2:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
200026f4:	697b      	ldr	r3, [r7, #20]
200026f6:	681b      	ldr	r3, [r3, #0]
200026f8:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
200026fa:	e05a      	b.n	200027b2 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
200026fc:	687b      	ldr	r3, [r7, #4]
200026fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20002702:	d017      	beq.n	20002734 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20002704:	687b      	ldr	r3, [r7, #4]
20002706:	2b00      	cmp	r3, #0
20002708:	d007      	beq.n	2000271a <HAL_DMA_PollForTransfer+0x9c>
2000270a:	f7ff f8fd 	bl	20001908 <HAL_GetTick>
2000270e:	4602      	mov	r2, r0
20002710:	69bb      	ldr	r3, [r7, #24]
20002712:	1ad3      	subs	r3, r2, r3
20002714:	687a      	ldr	r2, [r7, #4]
20002716:	429a      	cmp	r2, r3
20002718:	d20c      	bcs.n	20002734 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
2000271a:	68fb      	ldr	r3, [r7, #12]
2000271c:	2220      	movs	r2, #32
2000271e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002720:	68fb      	ldr	r3, [r7, #12]
20002722:	2200      	movs	r2, #0
20002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002728:	68fb      	ldr	r3, [r7, #12]
2000272a:	2201      	movs	r2, #1
2000272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
20002730:	2303      	movs	r3, #3
20002732:	e07f      	b.n	20002834 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
20002734:	697b      	ldr	r3, [r7, #20]
20002736:	681b      	ldr	r3, [r3, #0]
20002738:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
2000273a:	68fb      	ldr	r3, [r7, #12]
2000273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000273e:	2208      	movs	r2, #8
20002740:	409a      	lsls	r2, r3
20002742:	6a3b      	ldr	r3, [r7, #32]
20002744:	4013      	ands	r3, r2
20002746:	2b00      	cmp	r3, #0
20002748:	d00b      	beq.n	20002762 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2000274a:	68fb      	ldr	r3, [r7, #12]
2000274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000274e:	f043 0201 	orr.w	r2, r3, #1
20002752:	68fb      	ldr	r3, [r7, #12]
20002754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002756:	68fb      	ldr	r3, [r7, #12]
20002758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000275a:	2208      	movs	r2, #8
2000275c:	409a      	lsls	r2, r3
2000275e:	697b      	ldr	r3, [r7, #20]
20002760:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
20002762:	68fb      	ldr	r3, [r7, #12]
20002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002766:	2201      	movs	r2, #1
20002768:	409a      	lsls	r2, r3
2000276a:	6a3b      	ldr	r3, [r7, #32]
2000276c:	4013      	ands	r3, r2
2000276e:	2b00      	cmp	r3, #0
20002770:	d00b      	beq.n	2000278a <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
20002772:	68fb      	ldr	r3, [r7, #12]
20002774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002776:	f043 0202 	orr.w	r2, r3, #2
2000277a:	68fb      	ldr	r3, [r7, #12]
2000277c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
2000277e:	68fb      	ldr	r3, [r7, #12]
20002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002782:	2201      	movs	r2, #1
20002784:	409a      	lsls	r2, r3
20002786:	697b      	ldr	r3, [r7, #20]
20002788:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
2000278a:	68fb      	ldr	r3, [r7, #12]
2000278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000278e:	2204      	movs	r2, #4
20002790:	409a      	lsls	r2, r3
20002792:	6a3b      	ldr	r3, [r7, #32]
20002794:	4013      	ands	r3, r2
20002796:	2b00      	cmp	r3, #0
20002798:	d00b      	beq.n	200027b2 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
2000279a:	68fb      	ldr	r3, [r7, #12]
2000279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000279e:	f043 0204 	orr.w	r2, r3, #4
200027a2:	68fb      	ldr	r3, [r7, #12]
200027a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
200027a6:	68fb      	ldr	r3, [r7, #12]
200027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200027aa:	2204      	movs	r2, #4
200027ac:	409a      	lsls	r2, r3
200027ae:	697b      	ldr	r3, [r7, #20]
200027b0:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
200027b2:	6a3a      	ldr	r2, [r7, #32]
200027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
200027b6:	4013      	ands	r3, r2
200027b8:	2b00      	cmp	r3, #0
200027ba:	d105      	bne.n	200027c8 <HAL_DMA_PollForTransfer+0x14a>
200027bc:	68fb      	ldr	r3, [r7, #12]
200027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200027c0:	f003 0301 	and.w	r3, r3, #1
200027c4:	2b00      	cmp	r3, #0
200027c6:	d099      	beq.n	200026fc <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
200027c8:	68fb      	ldr	r3, [r7, #12]
200027ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200027cc:	2b00      	cmp	r3, #0
200027ce:	d018      	beq.n	20002802 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
200027d0:	68fb      	ldr	r3, [r7, #12]
200027d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200027d4:	f003 0301 	and.w	r3, r3, #1
200027d8:	2b00      	cmp	r3, #0
200027da:	d012      	beq.n	20002802 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
200027dc:	68f8      	ldr	r0, [r7, #12]
200027de:	f7ff febc 	bl	2000255a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
200027e2:	68fb      	ldr	r3, [r7, #12]
200027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200027e6:	2230      	movs	r2, #48	; 0x30
200027e8:	409a      	lsls	r2, r3
200027ea:	697b      	ldr	r3, [r7, #20]
200027ec:	609a      	str	r2, [r3, #8]
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
200027ee:	68fb      	ldr	r3, [r7, #12]
200027f0:	2200      	movs	r2, #0
200027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
200027f6:	68fb      	ldr	r3, [r7, #12]
200027f8:	2201      	movs	r2, #1
200027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      return HAL_ERROR;
200027fe:	2301      	movs	r3, #1
20002800:	e018      	b.n	20002834 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
20002802:	7afb      	ldrb	r3, [r7, #11]
20002804:	2b00      	cmp	r3, #0
20002806:	d10e      	bne.n	20002826 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
20002808:	68fb      	ldr	r3, [r7, #12]
2000280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000280c:	2230      	movs	r2, #48	; 0x30
2000280e:	409a      	lsls	r2, r3
20002810:	697b      	ldr	r3, [r7, #20]
20002812:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
20002814:	68fb      	ldr	r3, [r7, #12]
20002816:	2200      	movs	r2, #0
20002818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    hdma->State = HAL_DMA_STATE_READY;
2000281c:	68fb      	ldr	r3, [r7, #12]
2000281e:	2201      	movs	r2, #1
20002820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
20002824:	e005      	b.n	20002832 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
20002826:	68fb      	ldr	r3, [r7, #12]
20002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2000282a:	2210      	movs	r2, #16
2000282c:	409a      	lsls	r2, r3
2000282e:	697b      	ldr	r3, [r7, #20]
20002830:	609a      	str	r2, [r3, #8]
  }
  
  return status;
20002832:	7ffb      	ldrb	r3, [r7, #31]
}
20002834:	4618      	mov	r0, r3
20002836:	3728      	adds	r7, #40	; 0x28
20002838:	46bd      	mov	sp, r7
2000283a:	bd80      	pop	{r7, pc}

2000283c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
2000283c:	b580      	push	{r7, lr}
2000283e:	b086      	sub	sp, #24
20002840:	af00      	add	r7, sp, #0
20002842:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
20002844:	2300      	movs	r3, #0
20002846:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
20002848:	4b92      	ldr	r3, [pc, #584]	; (20002a94 <HAL_DMA_IRQHandler+0x258>)
2000284a:	681b      	ldr	r3, [r3, #0]
2000284c:	4a92      	ldr	r2, [pc, #584]	; (20002a98 <HAL_DMA_IRQHandler+0x25c>)
2000284e:	fba2 2303 	umull	r2, r3, r2, r3
20002852:	0a9b      	lsrs	r3, r3, #10
20002854:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
20002856:	687b      	ldr	r3, [r7, #4]
20002858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2000285a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
2000285c:	693b      	ldr	r3, [r7, #16]
2000285e:	681b      	ldr	r3, [r3, #0]
20002860:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
20002862:	687b      	ldr	r3, [r7, #4]
20002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002866:	2208      	movs	r2, #8
20002868:	409a      	lsls	r2, r3
2000286a:	68fb      	ldr	r3, [r7, #12]
2000286c:	4013      	ands	r3, r2
2000286e:	2b00      	cmp	r3, #0
20002870:	d01a      	beq.n	200028a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
20002872:	687b      	ldr	r3, [r7, #4]
20002874:	681b      	ldr	r3, [r3, #0]
20002876:	681b      	ldr	r3, [r3, #0]
20002878:	f003 0304 	and.w	r3, r3, #4
2000287c:	2b00      	cmp	r3, #0
2000287e:	d013      	beq.n	200028a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
20002880:	687b      	ldr	r3, [r7, #4]
20002882:	681b      	ldr	r3, [r3, #0]
20002884:	681a      	ldr	r2, [r3, #0]
20002886:	687b      	ldr	r3, [r7, #4]
20002888:	681b      	ldr	r3, [r3, #0]
2000288a:	f022 0204 	bic.w	r2, r2, #4
2000288e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
20002890:	687b      	ldr	r3, [r7, #4]
20002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002894:	2208      	movs	r2, #8
20002896:	409a      	lsls	r2, r3
20002898:	693b      	ldr	r3, [r7, #16]
2000289a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
2000289c:	687b      	ldr	r3, [r7, #4]
2000289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200028a0:	f043 0201 	orr.w	r2, r3, #1
200028a4:	687b      	ldr	r3, [r7, #4]
200028a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
200028a8:	687b      	ldr	r3, [r7, #4]
200028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200028ac:	2201      	movs	r2, #1
200028ae:	409a      	lsls	r2, r3
200028b0:	68fb      	ldr	r3, [r7, #12]
200028b2:	4013      	ands	r3, r2
200028b4:	2b00      	cmp	r3, #0
200028b6:	d012      	beq.n	200028de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
200028b8:	687b      	ldr	r3, [r7, #4]
200028ba:	681b      	ldr	r3, [r3, #0]
200028bc:	695b      	ldr	r3, [r3, #20]
200028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
200028c2:	2b00      	cmp	r3, #0
200028c4:	d00b      	beq.n	200028de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
200028c6:	687b      	ldr	r3, [r7, #4]
200028c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200028ca:	2201      	movs	r2, #1
200028cc:	409a      	lsls	r2, r3
200028ce:	693b      	ldr	r3, [r7, #16]
200028d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
200028d2:	687b      	ldr	r3, [r7, #4]
200028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200028d6:	f043 0202 	orr.w	r2, r3, #2
200028da:	687b      	ldr	r3, [r7, #4]
200028dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
200028de:	687b      	ldr	r3, [r7, #4]
200028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200028e2:	2204      	movs	r2, #4
200028e4:	409a      	lsls	r2, r3
200028e6:	68fb      	ldr	r3, [r7, #12]
200028e8:	4013      	ands	r3, r2
200028ea:	2b00      	cmp	r3, #0
200028ec:	d012      	beq.n	20002914 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
200028ee:	687b      	ldr	r3, [r7, #4]
200028f0:	681b      	ldr	r3, [r3, #0]
200028f2:	681b      	ldr	r3, [r3, #0]
200028f4:	f003 0302 	and.w	r3, r3, #2
200028f8:	2b00      	cmp	r3, #0
200028fa:	d00b      	beq.n	20002914 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
200028fc:	687b      	ldr	r3, [r7, #4]
200028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002900:	2204      	movs	r2, #4
20002902:	409a      	lsls	r2, r3
20002904:	693b      	ldr	r3, [r7, #16]
20002906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
20002908:	687b      	ldr	r3, [r7, #4]
2000290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000290c:	f043 0204 	orr.w	r2, r3, #4
20002910:	687b      	ldr	r3, [r7, #4]
20002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
20002914:	687b      	ldr	r3, [r7, #4]
20002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002918:	2210      	movs	r2, #16
2000291a:	409a      	lsls	r2, r3
2000291c:	68fb      	ldr	r3, [r7, #12]
2000291e:	4013      	ands	r3, r2
20002920:	2b00      	cmp	r3, #0
20002922:	d043      	beq.n	200029ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
20002924:	687b      	ldr	r3, [r7, #4]
20002926:	681b      	ldr	r3, [r3, #0]
20002928:	681b      	ldr	r3, [r3, #0]
2000292a:	f003 0308 	and.w	r3, r3, #8
2000292e:	2b00      	cmp	r3, #0
20002930:	d03c      	beq.n	200029ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
20002932:	687b      	ldr	r3, [r7, #4]
20002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002936:	2210      	movs	r2, #16
20002938:	409a      	lsls	r2, r3
2000293a:	693b      	ldr	r3, [r7, #16]
2000293c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
2000293e:	687b      	ldr	r3, [r7, #4]
20002940:	681b      	ldr	r3, [r3, #0]
20002942:	681b      	ldr	r3, [r3, #0]
20002944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002948:	2b00      	cmp	r3, #0
2000294a:	d018      	beq.n	2000297e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
2000294c:	687b      	ldr	r3, [r7, #4]
2000294e:	681b      	ldr	r3, [r3, #0]
20002950:	681b      	ldr	r3, [r3, #0]
20002952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002956:	2b00      	cmp	r3, #0
20002958:	d108      	bne.n	2000296c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
2000295a:	687b      	ldr	r3, [r7, #4]
2000295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000295e:	2b00      	cmp	r3, #0
20002960:	d024      	beq.n	200029ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
20002962:	687b      	ldr	r3, [r7, #4]
20002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002966:	6878      	ldr	r0, [r7, #4]
20002968:	4798      	blx	r3
2000296a:	e01f      	b.n	200029ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
2000296c:	687b      	ldr	r3, [r7, #4]
2000296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002970:	2b00      	cmp	r3, #0
20002972:	d01b      	beq.n	200029ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
20002974:	687b      	ldr	r3, [r7, #4]
20002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002978:	6878      	ldr	r0, [r7, #4]
2000297a:	4798      	blx	r3
2000297c:	e016      	b.n	200029ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
2000297e:	687b      	ldr	r3, [r7, #4]
20002980:	681b      	ldr	r3, [r3, #0]
20002982:	681b      	ldr	r3, [r3, #0]
20002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002988:	2b00      	cmp	r3, #0
2000298a:	d107      	bne.n	2000299c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
2000298c:	687b      	ldr	r3, [r7, #4]
2000298e:	681b      	ldr	r3, [r3, #0]
20002990:	681a      	ldr	r2, [r3, #0]
20002992:	687b      	ldr	r3, [r7, #4]
20002994:	681b      	ldr	r3, [r3, #0]
20002996:	f022 0208 	bic.w	r2, r2, #8
2000299a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
2000299c:	687b      	ldr	r3, [r7, #4]
2000299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200029a0:	2b00      	cmp	r3, #0
200029a2:	d003      	beq.n	200029ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
200029a4:	687b      	ldr	r3, [r7, #4]
200029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200029a8:	6878      	ldr	r0, [r7, #4]
200029aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
200029ac:	687b      	ldr	r3, [r7, #4]
200029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200029b0:	2220      	movs	r2, #32
200029b2:	409a      	lsls	r2, r3
200029b4:	68fb      	ldr	r3, [r7, #12]
200029b6:	4013      	ands	r3, r2
200029b8:	2b00      	cmp	r3, #0
200029ba:	f000 808e 	beq.w	20002ada <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
200029be:	687b      	ldr	r3, [r7, #4]
200029c0:	681b      	ldr	r3, [r3, #0]
200029c2:	681b      	ldr	r3, [r3, #0]
200029c4:	f003 0310 	and.w	r3, r3, #16
200029c8:	2b00      	cmp	r3, #0
200029ca:	f000 8086 	beq.w	20002ada <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
200029ce:	687b      	ldr	r3, [r7, #4]
200029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
200029d2:	2220      	movs	r2, #32
200029d4:	409a      	lsls	r2, r3
200029d6:	693b      	ldr	r3, [r7, #16]
200029d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
200029da:	687b      	ldr	r3, [r7, #4]
200029dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
200029e0:	b2db      	uxtb	r3, r3
200029e2:	2b05      	cmp	r3, #5
200029e4:	d136      	bne.n	20002a54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
200029e6:	687b      	ldr	r3, [r7, #4]
200029e8:	681b      	ldr	r3, [r3, #0]
200029ea:	681a      	ldr	r2, [r3, #0]
200029ec:	687b      	ldr	r3, [r7, #4]
200029ee:	681b      	ldr	r3, [r3, #0]
200029f0:	f022 0216 	bic.w	r2, r2, #22
200029f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
200029f6:	687b      	ldr	r3, [r7, #4]
200029f8:	681b      	ldr	r3, [r3, #0]
200029fa:	695a      	ldr	r2, [r3, #20]
200029fc:	687b      	ldr	r3, [r7, #4]
200029fe:	681b      	ldr	r3, [r3, #0]
20002a00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20002a04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20002a06:	687b      	ldr	r3, [r7, #4]
20002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002a0a:	2b00      	cmp	r3, #0
20002a0c:	d103      	bne.n	20002a16 <HAL_DMA_IRQHandler+0x1da>
20002a0e:	687b      	ldr	r3, [r7, #4]
20002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20002a12:	2b00      	cmp	r3, #0
20002a14:	d007      	beq.n	20002a26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
20002a16:	687b      	ldr	r3, [r7, #4]
20002a18:	681b      	ldr	r3, [r3, #0]
20002a1a:	681a      	ldr	r2, [r3, #0]
20002a1c:	687b      	ldr	r3, [r7, #4]
20002a1e:	681b      	ldr	r3, [r3, #0]
20002a20:	f022 0208 	bic.w	r2, r2, #8
20002a24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
20002a26:	687b      	ldr	r3, [r7, #4]
20002a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
20002a2a:	223f      	movs	r2, #63	; 0x3f
20002a2c:	409a      	lsls	r2, r3
20002a2e:	693b      	ldr	r3, [r7, #16]
20002a30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
20002a32:	687b      	ldr	r3, [r7, #4]
20002a34:	2200      	movs	r2, #0
20002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
20002a3a:	687b      	ldr	r3, [r7, #4]
20002a3c:	2201      	movs	r2, #1
20002a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
20002a42:	687b      	ldr	r3, [r7, #4]
20002a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002a46:	2b00      	cmp	r3, #0
20002a48:	d07d      	beq.n	20002b46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
20002a4a:	687b      	ldr	r3, [r7, #4]
20002a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20002a4e:	6878      	ldr	r0, [r7, #4]
20002a50:	4798      	blx	r3
        }
        return;
20002a52:	e078      	b.n	20002b46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
20002a54:	687b      	ldr	r3, [r7, #4]
20002a56:	681b      	ldr	r3, [r3, #0]
20002a58:	681b      	ldr	r3, [r3, #0]
20002a5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
20002a5e:	2b00      	cmp	r3, #0
20002a60:	d01c      	beq.n	20002a9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
20002a62:	687b      	ldr	r3, [r7, #4]
20002a64:	681b      	ldr	r3, [r3, #0]
20002a66:	681b      	ldr	r3, [r3, #0]
20002a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
20002a6c:	2b00      	cmp	r3, #0
20002a6e:	d108      	bne.n	20002a82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
20002a70:	687b      	ldr	r3, [r7, #4]
20002a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002a74:	2b00      	cmp	r3, #0
20002a76:	d030      	beq.n	20002ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
20002a78:	687b      	ldr	r3, [r7, #4]
20002a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002a7c:	6878      	ldr	r0, [r7, #4]
20002a7e:	4798      	blx	r3
20002a80:	e02b      	b.n	20002ada <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
20002a82:	687b      	ldr	r3, [r7, #4]
20002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002a86:	2b00      	cmp	r3, #0
20002a88:	d027      	beq.n	20002ada <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
20002a8a:	687b      	ldr	r3, [r7, #4]
20002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002a8e:	6878      	ldr	r0, [r7, #4]
20002a90:	4798      	blx	r3
20002a92:	e022      	b.n	20002ada <HAL_DMA_IRQHandler+0x29e>
20002a94:	200003a0 	.word	0x200003a0
20002a98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
20002a9c:	687b      	ldr	r3, [r7, #4]
20002a9e:	681b      	ldr	r3, [r3, #0]
20002aa0:	681b      	ldr	r3, [r3, #0]
20002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
20002aa6:	2b00      	cmp	r3, #0
20002aa8:	d10f      	bne.n	20002aca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
20002aaa:	687b      	ldr	r3, [r7, #4]
20002aac:	681b      	ldr	r3, [r3, #0]
20002aae:	681a      	ldr	r2, [r3, #0]
20002ab0:	687b      	ldr	r3, [r7, #4]
20002ab2:	681b      	ldr	r3, [r3, #0]
20002ab4:	f022 0210 	bic.w	r2, r2, #16
20002ab8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
20002aba:	687b      	ldr	r3, [r7, #4]
20002abc:	2200      	movs	r2, #0
20002abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
20002ac2:	687b      	ldr	r3, [r7, #4]
20002ac4:	2201      	movs	r2, #1
20002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
20002aca:	687b      	ldr	r3, [r7, #4]
20002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002ace:	2b00      	cmp	r3, #0
20002ad0:	d003      	beq.n	20002ada <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
20002ad2:	687b      	ldr	r3, [r7, #4]
20002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002ad6:	6878      	ldr	r0, [r7, #4]
20002ad8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
20002ada:	687b      	ldr	r3, [r7, #4]
20002adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002ade:	2b00      	cmp	r3, #0
20002ae0:	d032      	beq.n	20002b48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
20002ae2:	687b      	ldr	r3, [r7, #4]
20002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20002ae6:	f003 0301 	and.w	r3, r3, #1
20002aea:	2b00      	cmp	r3, #0
20002aec:	d022      	beq.n	20002b34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
20002aee:	687b      	ldr	r3, [r7, #4]
20002af0:	2205      	movs	r2, #5
20002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
20002af6:	687b      	ldr	r3, [r7, #4]
20002af8:	681b      	ldr	r3, [r3, #0]
20002afa:	681a      	ldr	r2, [r3, #0]
20002afc:	687b      	ldr	r3, [r7, #4]
20002afe:	681b      	ldr	r3, [r3, #0]
20002b00:	f022 0201 	bic.w	r2, r2, #1
20002b04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
20002b06:	68bb      	ldr	r3, [r7, #8]
20002b08:	3301      	adds	r3, #1
20002b0a:	60bb      	str	r3, [r7, #8]
20002b0c:	697a      	ldr	r2, [r7, #20]
20002b0e:	429a      	cmp	r2, r3
20002b10:	d307      	bcc.n	20002b22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
20002b12:	687b      	ldr	r3, [r7, #4]
20002b14:	681b      	ldr	r3, [r3, #0]
20002b16:	681b      	ldr	r3, [r3, #0]
20002b18:	f003 0301 	and.w	r3, r3, #1
20002b1c:	2b00      	cmp	r3, #0
20002b1e:	d1f2      	bne.n	20002b06 <HAL_DMA_IRQHandler+0x2ca>
20002b20:	e000      	b.n	20002b24 <HAL_DMA_IRQHandler+0x2e8>
          break;
20002b22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
20002b24:	687b      	ldr	r3, [r7, #4]
20002b26:	2200      	movs	r2, #0
20002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
20002b2c:	687b      	ldr	r3, [r7, #4]
20002b2e:	2201      	movs	r2, #1
20002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
20002b34:	687b      	ldr	r3, [r7, #4]
20002b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002b38:	2b00      	cmp	r3, #0
20002b3a:	d005      	beq.n	20002b48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
20002b3c:	687b      	ldr	r3, [r7, #4]
20002b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002b40:	6878      	ldr	r0, [r7, #4]
20002b42:	4798      	blx	r3
20002b44:	e000      	b.n	20002b48 <HAL_DMA_IRQHandler+0x30c>
        return;
20002b46:	bf00      	nop
    }
  }
}
20002b48:	3718      	adds	r7, #24
20002b4a:	46bd      	mov	sp, r7
20002b4c:	bd80      	pop	{r7, pc}
20002b4e:	bf00      	nop

20002b50 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
20002b50:	b480      	push	{r7}
20002b52:	b087      	sub	sp, #28
20002b54:	af00      	add	r7, sp, #0
20002b56:	60f8      	str	r0, [r7, #12]
20002b58:	460b      	mov	r3, r1
20002b5a:	607a      	str	r2, [r7, #4]
20002b5c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
20002b5e:	2300      	movs	r3, #0
20002b60:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
20002b62:	68fb      	ldr	r3, [r7, #12]
20002b64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002b68:	2b01      	cmp	r3, #1
20002b6a:	d101      	bne.n	20002b70 <HAL_DMA_RegisterCallback+0x20>
20002b6c:	2302      	movs	r3, #2
20002b6e:	e03c      	b.n	20002bea <HAL_DMA_RegisterCallback+0x9a>
20002b70:	68fb      	ldr	r3, [r7, #12]
20002b72:	2201      	movs	r2, #1
20002b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
20002b78:	68fb      	ldr	r3, [r7, #12]
20002b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002b7e:	b2db      	uxtb	r3, r3
20002b80:	2b01      	cmp	r3, #1
20002b82:	d129      	bne.n	20002bd8 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
20002b84:	7afb      	ldrb	r3, [r7, #11]
20002b86:	2b05      	cmp	r3, #5
20002b88:	d829      	bhi.n	20002bde <HAL_DMA_RegisterCallback+0x8e>
20002b8a:	a201      	add	r2, pc, #4	; (adr r2, 20002b90 <HAL_DMA_RegisterCallback+0x40>)
20002b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002b90:	20002ba9 	.word	0x20002ba9
20002b94:	20002bb1 	.word	0x20002bb1
20002b98:	20002bb9 	.word	0x20002bb9
20002b9c:	20002bc1 	.word	0x20002bc1
20002ba0:	20002bc9 	.word	0x20002bc9
20002ba4:	20002bd1 	.word	0x20002bd1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
20002ba8:	68fb      	ldr	r3, [r7, #12]
20002baa:	687a      	ldr	r2, [r7, #4]
20002bac:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
20002bae:	e017      	b.n	20002be0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
20002bb0:	68fb      	ldr	r3, [r7, #12]
20002bb2:	687a      	ldr	r2, [r7, #4]
20002bb4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20002bb6:	e013      	b.n	20002be0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
20002bb8:	68fb      	ldr	r3, [r7, #12]
20002bba:	687a      	ldr	r2, [r7, #4]
20002bbc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
20002bbe:	e00f      	b.n	20002be0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
20002bc0:	68fb      	ldr	r3, [r7, #12]
20002bc2:	687a      	ldr	r2, [r7, #4]
20002bc4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20002bc6:	e00b      	b.n	20002be0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
20002bc8:	68fb      	ldr	r3, [r7, #12]
20002bca:	687a      	ldr	r2, [r7, #4]
20002bcc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
20002bce:	e007      	b.n	20002be0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
20002bd0:	68fb      	ldr	r3, [r7, #12]
20002bd2:	687a      	ldr	r2, [r7, #4]
20002bd4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
20002bd6:	e003      	b.n	20002be0 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
20002bd8:	2301      	movs	r3, #1
20002bda:	75fb      	strb	r3, [r7, #23]
20002bdc:	e000      	b.n	20002be0 <HAL_DMA_RegisterCallback+0x90>
      break;
20002bde:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
20002be0:	68fb      	ldr	r3, [r7, #12]
20002be2:	2200      	movs	r2, #0
20002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
20002be8:	7dfb      	ldrb	r3, [r7, #23]
}
20002bea:	4618      	mov	r0, r3
20002bec:	371c      	adds	r7, #28
20002bee:	46bd      	mov	sp, r7
20002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
20002bf4:	4770      	bx	lr
20002bf6:	bf00      	nop

20002bf8 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
20002bf8:	b480      	push	{r7}
20002bfa:	b085      	sub	sp, #20
20002bfc:	af00      	add	r7, sp, #0
20002bfe:	6078      	str	r0, [r7, #4]
20002c00:	460b      	mov	r3, r1
20002c02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
20002c04:	2300      	movs	r3, #0
20002c06:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
20002c08:	687b      	ldr	r3, [r7, #4]
20002c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002c0e:	2b01      	cmp	r3, #1
20002c10:	d101      	bne.n	20002c16 <HAL_DMA_UnRegisterCallback+0x1e>
20002c12:	2302      	movs	r3, #2
20002c14:	e053      	b.n	20002cbe <HAL_DMA_UnRegisterCallback+0xc6>
20002c16:	687b      	ldr	r3, [r7, #4]
20002c18:	2201      	movs	r2, #1
20002c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20002c1e:	687b      	ldr	r3, [r7, #4]
20002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002c24:	b2db      	uxtb	r3, r3
20002c26:	2b01      	cmp	r3, #1
20002c28:	d142      	bne.n	20002cb0 <HAL_DMA_UnRegisterCallback+0xb8>
  {
    switch (CallbackID)
20002c2a:	78fb      	ldrb	r3, [r7, #3]
20002c2c:	2b06      	cmp	r3, #6
20002c2e:	d83c      	bhi.n	20002caa <HAL_DMA_UnRegisterCallback+0xb2>
20002c30:	a201      	add	r2, pc, #4	; (adr r2, 20002c38 <HAL_DMA_UnRegisterCallback+0x40>)
20002c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002c36:	bf00      	nop
20002c38:	20002c55 	.word	0x20002c55
20002c3c:	20002c5d 	.word	0x20002c5d
20002c40:	20002c65 	.word	0x20002c65
20002c44:	20002c6d 	.word	0x20002c6d
20002c48:	20002c75 	.word	0x20002c75
20002c4c:	20002c7d 	.word	0x20002c7d
20002c50:	20002c85 	.word	0x20002c85
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
20002c54:	687b      	ldr	r3, [r7, #4]
20002c56:	2200      	movs	r2, #0
20002c58:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
20002c5a:	e02b      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
20002c5c:	687b      	ldr	r3, [r7, #4]
20002c5e:	2200      	movs	r2, #0
20002c60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
20002c62:	e027      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
20002c64:	687b      	ldr	r3, [r7, #4]
20002c66:	2200      	movs	r2, #0
20002c68:	645a      	str	r2, [r3, #68]	; 0x44
      break;
20002c6a:	e023      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
20002c6c:	687b      	ldr	r3, [r7, #4]
20002c6e:	2200      	movs	r2, #0
20002c70:	649a      	str	r2, [r3, #72]	; 0x48
      break;
20002c72:	e01f      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
20002c74:	687b      	ldr	r3, [r7, #4]
20002c76:	2200      	movs	r2, #0
20002c78:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
20002c7a:	e01b      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
20002c7c:	687b      	ldr	r3, [r7, #4]
20002c7e:	2200      	movs	r2, #0
20002c80:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20002c82:	e017      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
20002c84:	687b      	ldr	r3, [r7, #4]
20002c86:	2200      	movs	r2, #0
20002c88:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
20002c8a:	687b      	ldr	r3, [r7, #4]
20002c8c:	2200      	movs	r2, #0
20002c8e:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
20002c90:	687b      	ldr	r3, [r7, #4]
20002c92:	2200      	movs	r2, #0
20002c94:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
20002c96:	687b      	ldr	r3, [r7, #4]
20002c98:	2200      	movs	r2, #0
20002c9a:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
20002c9c:	687b      	ldr	r3, [r7, #4]
20002c9e:	2200      	movs	r2, #0
20002ca0:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
20002ca2:	687b      	ldr	r3, [r7, #4]
20002ca4:	2200      	movs	r2, #0
20002ca6:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
20002ca8:	e004      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
      
    default:
      status = HAL_ERROR;
20002caa:	2301      	movs	r3, #1
20002cac:	73fb      	strb	r3, [r7, #15]
      break;
20002cae:	e001      	b.n	20002cb4 <HAL_DMA_UnRegisterCallback+0xbc>
    }
  }
  else
  {
    status = HAL_ERROR;
20002cb0:	2301      	movs	r3, #1
20002cb2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
20002cb4:	687b      	ldr	r3, [r7, #4]
20002cb6:	2200      	movs	r2, #0
20002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
20002cbc:	7bfb      	ldrb	r3, [r7, #15]
}
20002cbe:	4618      	mov	r0, r3
20002cc0:	3714      	adds	r7, #20
20002cc2:	46bd      	mov	sp, r7
20002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
20002cc8:	4770      	bx	lr
20002cca:	bf00      	nop

20002ccc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
20002ccc:	b480      	push	{r7}
20002cce:	b083      	sub	sp, #12
20002cd0:	af00      	add	r7, sp, #0
20002cd2:	6078      	str	r0, [r7, #4]
  return hdma->State;
20002cd4:	687b      	ldr	r3, [r7, #4]
20002cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002cda:	b2db      	uxtb	r3, r3
}
20002cdc:	4618      	mov	r0, r3
20002cde:	370c      	adds	r7, #12
20002ce0:	46bd      	mov	sp, r7
20002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ce6:	4770      	bx	lr

20002ce8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
20002ce8:	b480      	push	{r7}
20002cea:	b083      	sub	sp, #12
20002cec:	af00      	add	r7, sp, #0
20002cee:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
20002cf0:	687b      	ldr	r3, [r7, #4]
20002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
20002cf4:	4618      	mov	r0, r3
20002cf6:	370c      	adds	r7, #12
20002cf8:	46bd      	mov	sp, r7
20002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
20002cfe:	4770      	bx	lr

20002d00 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
20002d00:	b480      	push	{r7}
20002d02:	b085      	sub	sp, #20
20002d04:	af00      	add	r7, sp, #0
20002d06:	60f8      	str	r0, [r7, #12]
20002d08:	60b9      	str	r1, [r7, #8]
20002d0a:	607a      	str	r2, [r7, #4]
20002d0c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
20002d0e:	68fb      	ldr	r3, [r7, #12]
20002d10:	681b      	ldr	r3, [r3, #0]
20002d12:	681a      	ldr	r2, [r3, #0]
20002d14:	68fb      	ldr	r3, [r7, #12]
20002d16:	681b      	ldr	r3, [r3, #0]
20002d18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
20002d1c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
20002d1e:	68fb      	ldr	r3, [r7, #12]
20002d20:	681b      	ldr	r3, [r3, #0]
20002d22:	683a      	ldr	r2, [r7, #0]
20002d24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20002d26:	68fb      	ldr	r3, [r7, #12]
20002d28:	689b      	ldr	r3, [r3, #8]
20002d2a:	2b40      	cmp	r3, #64	; 0x40
20002d2c:	d108      	bne.n	20002d40 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
20002d2e:	68fb      	ldr	r3, [r7, #12]
20002d30:	681b      	ldr	r3, [r3, #0]
20002d32:	687a      	ldr	r2, [r7, #4]
20002d34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
20002d36:	68fb      	ldr	r3, [r7, #12]
20002d38:	681b      	ldr	r3, [r3, #0]
20002d3a:	68ba      	ldr	r2, [r7, #8]
20002d3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
20002d3e:	e007      	b.n	20002d50 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
20002d40:	68fb      	ldr	r3, [r7, #12]
20002d42:	681b      	ldr	r3, [r3, #0]
20002d44:	68ba      	ldr	r2, [r7, #8]
20002d46:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20002d48:	68fb      	ldr	r3, [r7, #12]
20002d4a:	681b      	ldr	r3, [r3, #0]
20002d4c:	687a      	ldr	r2, [r7, #4]
20002d4e:	60da      	str	r2, [r3, #12]
}
20002d50:	bf00      	nop
20002d52:	3714      	adds	r7, #20
20002d54:	46bd      	mov	sp, r7
20002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
20002d5a:	4770      	bx	lr

20002d5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
20002d5c:	b480      	push	{r7}
20002d5e:	b085      	sub	sp, #20
20002d60:	af00      	add	r7, sp, #0
20002d62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
20002d64:	687b      	ldr	r3, [r7, #4]
20002d66:	681b      	ldr	r3, [r3, #0]
20002d68:	b2db      	uxtb	r3, r3
20002d6a:	3b10      	subs	r3, #16
20002d6c:	4a14      	ldr	r2, [pc, #80]	; (20002dc0 <DMA_CalcBaseAndBitshift+0x64>)
20002d6e:	fba2 2303 	umull	r2, r3, r2, r3
20002d72:	091b      	lsrs	r3, r3, #4
20002d74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
20002d76:	4a13      	ldr	r2, [pc, #76]	; (20002dc4 <DMA_CalcBaseAndBitshift+0x68>)
20002d78:	68fb      	ldr	r3, [r7, #12]
20002d7a:	4413      	add	r3, r2
20002d7c:	781b      	ldrb	r3, [r3, #0]
20002d7e:	461a      	mov	r2, r3
20002d80:	687b      	ldr	r3, [r7, #4]
20002d82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
20002d84:	68fb      	ldr	r3, [r7, #12]
20002d86:	2b03      	cmp	r3, #3
20002d88:	d909      	bls.n	20002d9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
20002d8a:	687b      	ldr	r3, [r7, #4]
20002d8c:	681b      	ldr	r3, [r3, #0]
20002d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
20002d92:	f023 0303 	bic.w	r3, r3, #3
20002d96:	1d1a      	adds	r2, r3, #4
20002d98:	687b      	ldr	r3, [r7, #4]
20002d9a:	659a      	str	r2, [r3, #88]	; 0x58
20002d9c:	e007      	b.n	20002dae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
20002d9e:	687b      	ldr	r3, [r7, #4]
20002da0:	681b      	ldr	r3, [r3, #0]
20002da2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
20002da6:	f023 0303 	bic.w	r3, r3, #3
20002daa:	687a      	ldr	r2, [r7, #4]
20002dac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
20002dae:	687b      	ldr	r3, [r7, #4]
20002db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
20002db2:	4618      	mov	r0, r3
20002db4:	3714      	adds	r7, #20
20002db6:	46bd      	mov	sp, r7
20002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
20002dbc:	4770      	bx	lr
20002dbe:	bf00      	nop
20002dc0:	aaaaaaab 	.word	0xaaaaaaab
20002dc4:	200095ec 	.word	0x200095ec

20002dc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
20002dc8:	b480      	push	{r7}
20002dca:	b085      	sub	sp, #20
20002dcc:	af00      	add	r7, sp, #0
20002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20002dd0:	2300      	movs	r3, #0
20002dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
20002dd4:	687b      	ldr	r3, [r7, #4]
20002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002dd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
20002dda:	687b      	ldr	r3, [r7, #4]
20002ddc:	699b      	ldr	r3, [r3, #24]
20002dde:	2b00      	cmp	r3, #0
20002de0:	d11f      	bne.n	20002e22 <DMA_CheckFifoParam+0x5a>
20002de2:	68bb      	ldr	r3, [r7, #8]
20002de4:	2b03      	cmp	r3, #3
20002de6:	d856      	bhi.n	20002e96 <DMA_CheckFifoParam+0xce>
20002de8:	a201      	add	r2, pc, #4	; (adr r2, 20002df0 <DMA_CheckFifoParam+0x28>)
20002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002dee:	bf00      	nop
20002df0:	20002e01 	.word	0x20002e01
20002df4:	20002e13 	.word	0x20002e13
20002df8:	20002e01 	.word	0x20002e01
20002dfc:	20002e97 	.word	0x20002e97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20002e00:	687b      	ldr	r3, [r7, #4]
20002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20002e08:	2b00      	cmp	r3, #0
20002e0a:	d046      	beq.n	20002e9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
20002e0c:	2301      	movs	r3, #1
20002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
20002e10:	e043      	b.n	20002e9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20002e12:	687b      	ldr	r3, [r7, #4]
20002e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
20002e1a:	d140      	bne.n	20002e9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
20002e1c:	2301      	movs	r3, #1
20002e1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
20002e20:	e03d      	b.n	20002e9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
20002e22:	687b      	ldr	r3, [r7, #4]
20002e24:	699b      	ldr	r3, [r3, #24]
20002e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
20002e2a:	d121      	bne.n	20002e70 <DMA_CheckFifoParam+0xa8>
20002e2c:	68bb      	ldr	r3, [r7, #8]
20002e2e:	2b03      	cmp	r3, #3
20002e30:	d837      	bhi.n	20002ea2 <DMA_CheckFifoParam+0xda>
20002e32:	a201      	add	r2, pc, #4	; (adr r2, 20002e38 <DMA_CheckFifoParam+0x70>)
20002e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
20002e38:	20002e49 	.word	0x20002e49
20002e3c:	20002e4f 	.word	0x20002e4f
20002e40:	20002e49 	.word	0x20002e49
20002e44:	20002e61 	.word	0x20002e61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
20002e48:	2301      	movs	r3, #1
20002e4a:	73fb      	strb	r3, [r7, #15]
      break;
20002e4c:	e030      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20002e4e:	687b      	ldr	r3, [r7, #4]
20002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20002e56:	2b00      	cmp	r3, #0
20002e58:	d025      	beq.n	20002ea6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
20002e5a:	2301      	movs	r3, #1
20002e5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
20002e5e:	e022      	b.n	20002ea6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
20002e60:	687b      	ldr	r3, [r7, #4]
20002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
20002e68:	d11f      	bne.n	20002eaa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
20002e6a:	2301      	movs	r3, #1
20002e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
20002e6e:	e01c      	b.n	20002eaa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
20002e70:	68bb      	ldr	r3, [r7, #8]
20002e72:	2b02      	cmp	r3, #2
20002e74:	d903      	bls.n	20002e7e <DMA_CheckFifoParam+0xb6>
20002e76:	68bb      	ldr	r3, [r7, #8]
20002e78:	2b03      	cmp	r3, #3
20002e7a:	d003      	beq.n	20002e84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
20002e7c:	e018      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
20002e7e:	2301      	movs	r3, #1
20002e80:	73fb      	strb	r3, [r7, #15]
      break;
20002e82:	e015      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
20002e84:	687b      	ldr	r3, [r7, #4]
20002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20002e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20002e8c:	2b00      	cmp	r3, #0
20002e8e:	d00e      	beq.n	20002eae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
20002e90:	2301      	movs	r3, #1
20002e92:	73fb      	strb	r3, [r7, #15]
      break;
20002e94:	e00b      	b.n	20002eae <DMA_CheckFifoParam+0xe6>
      break;
20002e96:	bf00      	nop
20002e98:	e00a      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      break;
20002e9a:	bf00      	nop
20002e9c:	e008      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      break;
20002e9e:	bf00      	nop
20002ea0:	e006      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      break;
20002ea2:	bf00      	nop
20002ea4:	e004      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      break;
20002ea6:	bf00      	nop
20002ea8:	e002      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      break;   
20002eaa:	bf00      	nop
20002eac:	e000      	b.n	20002eb0 <DMA_CheckFifoParam+0xe8>
      break;
20002eae:	bf00      	nop
    }
  } 
  
  return status; 
20002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
20002eb2:	4618      	mov	r0, r3
20002eb4:	3714      	adds	r7, #20
20002eb6:	46bd      	mov	sp, r7
20002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
20002ebc:	4770      	bx	lr
20002ebe:	bf00      	nop

20002ec0 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20002ec0:	b580      	push	{r7, lr}
20002ec2:	b086      	sub	sp, #24
20002ec4:	af00      	add	r7, sp, #0
20002ec6:	60f8      	str	r0, [r7, #12]
20002ec8:	60b9      	str	r1, [r7, #8]
20002eca:	607a      	str	r2, [r7, #4]
20002ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002ece:	2300      	movs	r3, #0
20002ed0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
20002ed2:	68fb      	ldr	r3, [r7, #12]
20002ed4:	689b      	ldr	r3, [r3, #8]
20002ed6:	2b80      	cmp	r3, #128	; 0x80
20002ed8:	d106      	bne.n	20002ee8 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002eda:	68fb      	ldr	r3, [r7, #12]
20002edc:	f44f 7280 	mov.w	r2, #256	; 0x100
20002ee0:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
20002ee2:	2301      	movs	r3, #1
20002ee4:	75fb      	strb	r3, [r7, #23]
20002ee6:	e031      	b.n	20002f4c <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
20002ee8:	68fb      	ldr	r3, [r7, #12]
20002eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002eee:	2b01      	cmp	r3, #1
20002ef0:	d101      	bne.n	20002ef6 <HAL_DMAEx_MultiBufferStart+0x36>
20002ef2:	2302      	movs	r3, #2
20002ef4:	e02b      	b.n	20002f4e <HAL_DMAEx_MultiBufferStart+0x8e>
20002ef6:	68fb      	ldr	r3, [r7, #12]
20002ef8:	2201      	movs	r2, #1
20002efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
20002efe:	68fb      	ldr	r3, [r7, #12]
20002f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002f04:	b2db      	uxtb	r3, r3
20002f06:	2b01      	cmp	r3, #1
20002f08:	d11e      	bne.n	20002f48 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
20002f0a:	68fb      	ldr	r3, [r7, #12]
20002f0c:	2202      	movs	r2, #2
20002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20002f12:	68fb      	ldr	r3, [r7, #12]
20002f14:	681b      	ldr	r3, [r3, #0]
20002f16:	681a      	ldr	r2, [r3, #0]
20002f18:	68fb      	ldr	r3, [r7, #12]
20002f1a:	681b      	ldr	r3, [r3, #0]
20002f1c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
20002f20:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
20002f22:	68fb      	ldr	r3, [r7, #12]
20002f24:	681b      	ldr	r3, [r3, #0]
20002f26:	683a      	ldr	r2, [r7, #0]
20002f28:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
20002f2a:	6a3b      	ldr	r3, [r7, #32]
20002f2c:	687a      	ldr	r2, [r7, #4]
20002f2e:	68b9      	ldr	r1, [r7, #8]
20002f30:	68f8      	ldr	r0, [r7, #12]
20002f32:	f001 f973 	bl	2000421c <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
20002f36:	68fb      	ldr	r3, [r7, #12]
20002f38:	681b      	ldr	r3, [r3, #0]
20002f3a:	681a      	ldr	r2, [r3, #0]
20002f3c:	68fb      	ldr	r3, [r7, #12]
20002f3e:	681b      	ldr	r3, [r3, #0]
20002f40:	f042 0201 	orr.w	r2, r2, #1
20002f44:	601a      	str	r2, [r3, #0]
20002f46:	e001      	b.n	20002f4c <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
20002f48:	2302      	movs	r3, #2
20002f4a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
20002f4c:	7dfb      	ldrb	r3, [r7, #23]
}
20002f4e:	4618      	mov	r0, r3
20002f50:	3718      	adds	r7, #24
20002f52:	46bd      	mov	sp, r7
20002f54:	bd80      	pop	{r7, pc}
	...

20002f58 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
20002f58:	b580      	push	{r7, lr}
20002f5a:	b086      	sub	sp, #24
20002f5c:	af00      	add	r7, sp, #0
20002f5e:	60f8      	str	r0, [r7, #12]
20002f60:	60b9      	str	r1, [r7, #8]
20002f62:	607a      	str	r2, [r7, #4]
20002f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
20002f66:	2300      	movs	r3, #0
20002f68:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
20002f6a:	68fb      	ldr	r3, [r7, #12]
20002f6c:	689b      	ldr	r3, [r3, #8]
20002f6e:	2b80      	cmp	r3, #128	; 0x80
20002f70:	d106      	bne.n	20002f80 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
20002f72:	68fb      	ldr	r3, [r7, #12]
20002f74:	f44f 7280 	mov.w	r2, #256	; 0x100
20002f78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002f7a:	2301      	movs	r3, #1
20002f7c:	f001 b913 	b.w	200041a6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
20002f80:	68fb      	ldr	r3, [r7, #12]
20002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
20002f84:	2b00      	cmp	r3, #0
20002f86:	d007      	beq.n	20002f98 <HAL_DMAEx_MultiBufferStart_IT+0x40>
20002f88:	68fb      	ldr	r3, [r7, #12]
20002f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20002f8c:	2b00      	cmp	r3, #0
20002f8e:	d003      	beq.n	20002f98 <HAL_DMAEx_MultiBufferStart_IT+0x40>
20002f90:	68fb      	ldr	r3, [r7, #12]
20002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20002f94:	2b00      	cmp	r3, #0
20002f96:	d105      	bne.n	20002fa4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
20002f98:	68fb      	ldr	r3, [r7, #12]
20002f9a:	2240      	movs	r2, #64	; 0x40
20002f9c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
20002f9e:	2301      	movs	r3, #1
20002fa0:	f001 b901 	b.w	200041a6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
20002fa4:	68fb      	ldr	r3, [r7, #12]
20002fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
20002faa:	2b01      	cmp	r3, #1
20002fac:	d102      	bne.n	20002fb4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
20002fae:	2302      	movs	r3, #2
20002fb0:	f001 b8f9 	b.w	200041a6 <HAL_DMAEx_MultiBufferStart_IT+0x124e>
20002fb4:	68fb      	ldr	r3, [r7, #12]
20002fb6:	2201      	movs	r2, #1
20002fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
20002fbc:	68fb      	ldr	r3, [r7, #12]
20002fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
20002fc2:	b2db      	uxtb	r3, r3
20002fc4:	2b01      	cmp	r3, #1
20002fc6:	f041 80e7 	bne.w	20004198 <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
20002fca:	68fb      	ldr	r3, [r7, #12]
20002fcc:	2202      	movs	r2, #2
20002fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
20002fd2:	68fb      	ldr	r3, [r7, #12]
20002fd4:	2200      	movs	r2, #0
20002fd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
20002fd8:	68fb      	ldr	r3, [r7, #12]
20002fda:	681b      	ldr	r3, [r3, #0]
20002fdc:	681a      	ldr	r2, [r3, #0]
20002fde:	68fb      	ldr	r3, [r7, #12]
20002fe0:	681b      	ldr	r3, [r3, #0]
20002fe2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
20002fe6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
20002fe8:	68fb      	ldr	r3, [r7, #12]
20002fea:	681b      	ldr	r3, [r3, #0]
20002fec:	683a      	ldr	r2, [r7, #0]
20002fee:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
20002ff0:	6a3b      	ldr	r3, [r7, #32]
20002ff2:	687a      	ldr	r2, [r7, #4]
20002ff4:	68b9      	ldr	r1, [r7, #8]
20002ff6:	68f8      	ldr	r0, [r7, #12]
20002ff8:	f001 f910 	bl	2000421c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
20002ffc:	68fb      	ldr	r3, [r7, #12]
20002ffe:	681b      	ldr	r3, [r3, #0]
20003000:	461a      	mov	r2, r3
20003002:	4b99      	ldr	r3, [pc, #612]	; (20003268 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
20003004:	429a      	cmp	r2, r3
20003006:	d960      	bls.n	200030ca <HAL_DMAEx_MultiBufferStart_IT+0x172>
20003008:	68fb      	ldr	r3, [r7, #12]
2000300a:	681b      	ldr	r3, [r3, #0]
2000300c:	4a97      	ldr	r2, [pc, #604]	; (2000326c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
2000300e:	4293      	cmp	r3, r2
20003010:	d057      	beq.n	200030c2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
20003012:	68fb      	ldr	r3, [r7, #12]
20003014:	681b      	ldr	r3, [r3, #0]
20003016:	4a96      	ldr	r2, [pc, #600]	; (20003270 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
20003018:	4293      	cmp	r3, r2
2000301a:	d050      	beq.n	200030be <HAL_DMAEx_MultiBufferStart_IT+0x166>
2000301c:	68fb      	ldr	r3, [r7, #12]
2000301e:	681b      	ldr	r3, [r3, #0]
20003020:	4a94      	ldr	r2, [pc, #592]	; (20003274 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
20003022:	4293      	cmp	r3, r2
20003024:	d049      	beq.n	200030ba <HAL_DMAEx_MultiBufferStart_IT+0x162>
20003026:	68fb      	ldr	r3, [r7, #12]
20003028:	681b      	ldr	r3, [r3, #0]
2000302a:	4a93      	ldr	r2, [pc, #588]	; (20003278 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
2000302c:	4293      	cmp	r3, r2
2000302e:	d042      	beq.n	200030b6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
20003030:	68fb      	ldr	r3, [r7, #12]
20003032:	681b      	ldr	r3, [r3, #0]
20003034:	4a91      	ldr	r2, [pc, #580]	; (2000327c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
20003036:	4293      	cmp	r3, r2
20003038:	d03a      	beq.n	200030b0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
2000303a:	68fb      	ldr	r3, [r7, #12]
2000303c:	681b      	ldr	r3, [r3, #0]
2000303e:	4a90      	ldr	r2, [pc, #576]	; (20003280 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
20003040:	4293      	cmp	r3, r2
20003042:	d032      	beq.n	200030aa <HAL_DMAEx_MultiBufferStart_IT+0x152>
20003044:	68fb      	ldr	r3, [r7, #12]
20003046:	681b      	ldr	r3, [r3, #0]
20003048:	4a8e      	ldr	r2, [pc, #568]	; (20003284 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
2000304a:	4293      	cmp	r3, r2
2000304c:	d02a      	beq.n	200030a4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
2000304e:	68fb      	ldr	r3, [r7, #12]
20003050:	681b      	ldr	r3, [r3, #0]
20003052:	4a8d      	ldr	r2, [pc, #564]	; (20003288 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
20003054:	4293      	cmp	r3, r2
20003056:	d022      	beq.n	2000309e <HAL_DMAEx_MultiBufferStart_IT+0x146>
20003058:	68fb      	ldr	r3, [r7, #12]
2000305a:	681b      	ldr	r3, [r3, #0]
2000305c:	4a8b      	ldr	r2, [pc, #556]	; (2000328c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
2000305e:	4293      	cmp	r3, r2
20003060:	d01a      	beq.n	20003098 <HAL_DMAEx_MultiBufferStart_IT+0x140>
20003062:	68fb      	ldr	r3, [r7, #12]
20003064:	681b      	ldr	r3, [r3, #0]
20003066:	4a8a      	ldr	r2, [pc, #552]	; (20003290 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
20003068:	4293      	cmp	r3, r2
2000306a:	d012      	beq.n	20003092 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
2000306c:	68fb      	ldr	r3, [r7, #12]
2000306e:	681b      	ldr	r3, [r3, #0]
20003070:	4a88      	ldr	r2, [pc, #544]	; (20003294 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
20003072:	4293      	cmp	r3, r2
20003074:	d00a      	beq.n	2000308c <HAL_DMAEx_MultiBufferStart_IT+0x134>
20003076:	68fb      	ldr	r3, [r7, #12]
20003078:	681b      	ldr	r3, [r3, #0]
2000307a:	4a87      	ldr	r2, [pc, #540]	; (20003298 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
2000307c:	4293      	cmp	r3, r2
2000307e:	d102      	bne.n	20003086 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
20003080:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003084:	e01e      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2000308a:	e01b      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000308c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003090:	e018      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003092:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003096:	e015      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
20003098:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000309c:	e012      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
2000309e:	f44f 6300 	mov.w	r3, #2048	; 0x800
200030a2:	e00f      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200030a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
200030a8:	e00c      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200030aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
200030ae:	e009      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200030b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
200030b4:	e006      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200030b6:	2320      	movs	r3, #32
200030b8:	e004      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200030ba:	2320      	movs	r3, #32
200030bc:	e002      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200030be:	2320      	movs	r3, #32
200030c0:	e000      	b.n	200030c4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
200030c2:	2320      	movs	r3, #32
200030c4:	4a75      	ldr	r2, [pc, #468]	; (2000329c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
200030c6:	60d3      	str	r3, [r2, #12]
200030c8:	e150      	b.n	2000336c <HAL_DMAEx_MultiBufferStart_IT+0x414>
200030ca:	68fb      	ldr	r3, [r7, #12]
200030cc:	681b      	ldr	r3, [r3, #0]
200030ce:	461a      	mov	r2, r3
200030d0:	4b73      	ldr	r3, [pc, #460]	; (200032a0 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
200030d2:	429a      	cmp	r2, r3
200030d4:	d960      	bls.n	20003198 <HAL_DMAEx_MultiBufferStart_IT+0x240>
200030d6:	68fb      	ldr	r3, [r7, #12]
200030d8:	681b      	ldr	r3, [r3, #0]
200030da:	4a64      	ldr	r2, [pc, #400]	; (2000326c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
200030dc:	4293      	cmp	r3, r2
200030de:	d057      	beq.n	20003190 <HAL_DMAEx_MultiBufferStart_IT+0x238>
200030e0:	68fb      	ldr	r3, [r7, #12]
200030e2:	681b      	ldr	r3, [r3, #0]
200030e4:	4a62      	ldr	r2, [pc, #392]	; (20003270 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
200030e6:	4293      	cmp	r3, r2
200030e8:	d050      	beq.n	2000318c <HAL_DMAEx_MultiBufferStart_IT+0x234>
200030ea:	68fb      	ldr	r3, [r7, #12]
200030ec:	681b      	ldr	r3, [r3, #0]
200030ee:	4a61      	ldr	r2, [pc, #388]	; (20003274 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
200030f0:	4293      	cmp	r3, r2
200030f2:	d049      	beq.n	20003188 <HAL_DMAEx_MultiBufferStart_IT+0x230>
200030f4:	68fb      	ldr	r3, [r7, #12]
200030f6:	681b      	ldr	r3, [r3, #0]
200030f8:	4a5f      	ldr	r2, [pc, #380]	; (20003278 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
200030fa:	4293      	cmp	r3, r2
200030fc:	d042      	beq.n	20003184 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
200030fe:	68fb      	ldr	r3, [r7, #12]
20003100:	681b      	ldr	r3, [r3, #0]
20003102:	4a5e      	ldr	r2, [pc, #376]	; (2000327c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
20003104:	4293      	cmp	r3, r2
20003106:	d03a      	beq.n	2000317e <HAL_DMAEx_MultiBufferStart_IT+0x226>
20003108:	68fb      	ldr	r3, [r7, #12]
2000310a:	681b      	ldr	r3, [r3, #0]
2000310c:	4a5c      	ldr	r2, [pc, #368]	; (20003280 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
2000310e:	4293      	cmp	r3, r2
20003110:	d032      	beq.n	20003178 <HAL_DMAEx_MultiBufferStart_IT+0x220>
20003112:	68fb      	ldr	r3, [r7, #12]
20003114:	681b      	ldr	r3, [r3, #0]
20003116:	4a5b      	ldr	r2, [pc, #364]	; (20003284 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
20003118:	4293      	cmp	r3, r2
2000311a:	d02a      	beq.n	20003172 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
2000311c:	68fb      	ldr	r3, [r7, #12]
2000311e:	681b      	ldr	r3, [r3, #0]
20003120:	4a59      	ldr	r2, [pc, #356]	; (20003288 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
20003122:	4293      	cmp	r3, r2
20003124:	d022      	beq.n	2000316c <HAL_DMAEx_MultiBufferStart_IT+0x214>
20003126:	68fb      	ldr	r3, [r7, #12]
20003128:	681b      	ldr	r3, [r3, #0]
2000312a:	4a58      	ldr	r2, [pc, #352]	; (2000328c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
2000312c:	4293      	cmp	r3, r2
2000312e:	d01a      	beq.n	20003166 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
20003130:	68fb      	ldr	r3, [r7, #12]
20003132:	681b      	ldr	r3, [r3, #0]
20003134:	4a56      	ldr	r2, [pc, #344]	; (20003290 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
20003136:	4293      	cmp	r3, r2
20003138:	d012      	beq.n	20003160 <HAL_DMAEx_MultiBufferStart_IT+0x208>
2000313a:	68fb      	ldr	r3, [r7, #12]
2000313c:	681b      	ldr	r3, [r3, #0]
2000313e:	4a55      	ldr	r2, [pc, #340]	; (20003294 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
20003140:	4293      	cmp	r3, r2
20003142:	d00a      	beq.n	2000315a <HAL_DMAEx_MultiBufferStart_IT+0x202>
20003144:	68fb      	ldr	r3, [r7, #12]
20003146:	681b      	ldr	r3, [r3, #0]
20003148:	4a53      	ldr	r2, [pc, #332]	; (20003298 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
2000314a:	4293      	cmp	r3, r2
2000314c:	d102      	bne.n	20003154 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
2000314e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003152:	e01e      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003154:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003158:	e01b      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000315a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000315e:	e018      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003160:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003164:	e015      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003166:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000316a:	e012      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000316c:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003170:	e00f      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003172:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003176:	e00c      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003178:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000317c:	e009      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000317e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003182:	e006      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003184:	2320      	movs	r3, #32
20003186:	e004      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003188:	2320      	movs	r3, #32
2000318a:	e002      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
2000318c:	2320      	movs	r3, #32
2000318e:	e000      	b.n	20003192 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
20003190:	2320      	movs	r3, #32
20003192:	4a42      	ldr	r2, [pc, #264]	; (2000329c <HAL_DMAEx_MultiBufferStart_IT+0x344>)
20003194:	6093      	str	r3, [r2, #8]
20003196:	e0e9      	b.n	2000336c <HAL_DMAEx_MultiBufferStart_IT+0x414>
20003198:	68fb      	ldr	r3, [r7, #12]
2000319a:	681b      	ldr	r3, [r3, #0]
2000319c:	461a      	mov	r2, r3
2000319e:	4b41      	ldr	r3, [pc, #260]	; (200032a4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
200031a0:	429a      	cmp	r2, r3
200031a2:	f240 8083 	bls.w	200032ac <HAL_DMAEx_MultiBufferStart_IT+0x354>
200031a6:	68fb      	ldr	r3, [r7, #12]
200031a8:	681b      	ldr	r3, [r3, #0]
200031aa:	4a30      	ldr	r2, [pc, #192]	; (2000326c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
200031ac:	4293      	cmp	r3, r2
200031ae:	d057      	beq.n	20003260 <HAL_DMAEx_MultiBufferStart_IT+0x308>
200031b0:	68fb      	ldr	r3, [r7, #12]
200031b2:	681b      	ldr	r3, [r3, #0]
200031b4:	4a2e      	ldr	r2, [pc, #184]	; (20003270 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
200031b6:	4293      	cmp	r3, r2
200031b8:	d050      	beq.n	2000325c <HAL_DMAEx_MultiBufferStart_IT+0x304>
200031ba:	68fb      	ldr	r3, [r7, #12]
200031bc:	681b      	ldr	r3, [r3, #0]
200031be:	4a2d      	ldr	r2, [pc, #180]	; (20003274 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
200031c0:	4293      	cmp	r3, r2
200031c2:	d049      	beq.n	20003258 <HAL_DMAEx_MultiBufferStart_IT+0x300>
200031c4:	68fb      	ldr	r3, [r7, #12]
200031c6:	681b      	ldr	r3, [r3, #0]
200031c8:	4a2b      	ldr	r2, [pc, #172]	; (20003278 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
200031ca:	4293      	cmp	r3, r2
200031cc:	d042      	beq.n	20003254 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
200031ce:	68fb      	ldr	r3, [r7, #12]
200031d0:	681b      	ldr	r3, [r3, #0]
200031d2:	4a2a      	ldr	r2, [pc, #168]	; (2000327c <HAL_DMAEx_MultiBufferStart_IT+0x324>)
200031d4:	4293      	cmp	r3, r2
200031d6:	d03a      	beq.n	2000324e <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
200031d8:	68fb      	ldr	r3, [r7, #12]
200031da:	681b      	ldr	r3, [r3, #0]
200031dc:	4a28      	ldr	r2, [pc, #160]	; (20003280 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
200031de:	4293      	cmp	r3, r2
200031e0:	d032      	beq.n	20003248 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
200031e2:	68fb      	ldr	r3, [r7, #12]
200031e4:	681b      	ldr	r3, [r3, #0]
200031e6:	4a27      	ldr	r2, [pc, #156]	; (20003284 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
200031e8:	4293      	cmp	r3, r2
200031ea:	d02a      	beq.n	20003242 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
200031ec:	68fb      	ldr	r3, [r7, #12]
200031ee:	681b      	ldr	r3, [r3, #0]
200031f0:	4a25      	ldr	r2, [pc, #148]	; (20003288 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
200031f2:	4293      	cmp	r3, r2
200031f4:	d022      	beq.n	2000323c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
200031f6:	68fb      	ldr	r3, [r7, #12]
200031f8:	681b      	ldr	r3, [r3, #0]
200031fa:	4a24      	ldr	r2, [pc, #144]	; (2000328c <HAL_DMAEx_MultiBufferStart_IT+0x334>)
200031fc:	4293      	cmp	r3, r2
200031fe:	d01a      	beq.n	20003236 <HAL_DMAEx_MultiBufferStart_IT+0x2de>
20003200:	68fb      	ldr	r3, [r7, #12]
20003202:	681b      	ldr	r3, [r3, #0]
20003204:	4a22      	ldr	r2, [pc, #136]	; (20003290 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
20003206:	4293      	cmp	r3, r2
20003208:	d012      	beq.n	20003230 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
2000320a:	68fb      	ldr	r3, [r7, #12]
2000320c:	681b      	ldr	r3, [r3, #0]
2000320e:	4a21      	ldr	r2, [pc, #132]	; (20003294 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
20003210:	4293      	cmp	r3, r2
20003212:	d00a      	beq.n	2000322a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
20003214:	68fb      	ldr	r3, [r7, #12]
20003216:	681b      	ldr	r3, [r3, #0]
20003218:	4a1f      	ldr	r2, [pc, #124]	; (20003298 <HAL_DMAEx_MultiBufferStart_IT+0x340>)
2000321a:	4293      	cmp	r3, r2
2000321c:	d102      	bne.n	20003224 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
2000321e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003222:	e01e      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
20003228:	e01b      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
2000322a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000322e:	e018      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003230:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003234:	e015      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003236:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000323a:	e012      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
2000323c:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003240:	e00f      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003242:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003246:	e00c      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003248:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000324c:	e009      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
2000324e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003252:	e006      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003254:	2320      	movs	r3, #32
20003256:	e004      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003258:	2320      	movs	r3, #32
2000325a:	e002      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
2000325c:	2320      	movs	r3, #32
2000325e:	e000      	b.n	20003262 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
20003260:	2320      	movs	r3, #32
20003262:	4a11      	ldr	r2, [pc, #68]	; (200032a8 <HAL_DMAEx_MultiBufferStart_IT+0x350>)
20003264:	60d3      	str	r3, [r2, #12]
20003266:	e081      	b.n	2000336c <HAL_DMAEx_MultiBufferStart_IT+0x414>
20003268:	40026458 	.word	0x40026458
2000326c:	40026010 	.word	0x40026010
20003270:	40026410 	.word	0x40026410
20003274:	40026070 	.word	0x40026070
20003278:	40026470 	.word	0x40026470
2000327c:	40026028 	.word	0x40026028
20003280:	40026428 	.word	0x40026428
20003284:	40026088 	.word	0x40026088
20003288:	40026488 	.word	0x40026488
2000328c:	40026040 	.word	0x40026040
20003290:	40026440 	.word	0x40026440
20003294:	400260a0 	.word	0x400260a0
20003298:	400264a0 	.word	0x400264a0
2000329c:	40026400 	.word	0x40026400
200032a0:	400260b8 	.word	0x400260b8
200032a4:	40026058 	.word	0x40026058
200032a8:	40026000 	.word	0x40026000
200032ac:	68fb      	ldr	r3, [r7, #12]
200032ae:	681b      	ldr	r3, [r3, #0]
200032b0:	4a96      	ldr	r2, [pc, #600]	; (2000350c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
200032b2:	4293      	cmp	r3, r2
200032b4:	d057      	beq.n	20003366 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
200032b6:	68fb      	ldr	r3, [r7, #12]
200032b8:	681b      	ldr	r3, [r3, #0]
200032ba:	4a95      	ldr	r2, [pc, #596]	; (20003510 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
200032bc:	4293      	cmp	r3, r2
200032be:	d050      	beq.n	20003362 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
200032c0:	68fb      	ldr	r3, [r7, #12]
200032c2:	681b      	ldr	r3, [r3, #0]
200032c4:	4a93      	ldr	r2, [pc, #588]	; (20003514 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
200032c6:	4293      	cmp	r3, r2
200032c8:	d049      	beq.n	2000335e <HAL_DMAEx_MultiBufferStart_IT+0x406>
200032ca:	68fb      	ldr	r3, [r7, #12]
200032cc:	681b      	ldr	r3, [r3, #0]
200032ce:	4a92      	ldr	r2, [pc, #584]	; (20003518 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
200032d0:	4293      	cmp	r3, r2
200032d2:	d042      	beq.n	2000335a <HAL_DMAEx_MultiBufferStart_IT+0x402>
200032d4:	68fb      	ldr	r3, [r7, #12]
200032d6:	681b      	ldr	r3, [r3, #0]
200032d8:	4a90      	ldr	r2, [pc, #576]	; (2000351c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
200032da:	4293      	cmp	r3, r2
200032dc:	d03a      	beq.n	20003354 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
200032de:	68fb      	ldr	r3, [r7, #12]
200032e0:	681b      	ldr	r3, [r3, #0]
200032e2:	4a8f      	ldr	r2, [pc, #572]	; (20003520 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
200032e4:	4293      	cmp	r3, r2
200032e6:	d032      	beq.n	2000334e <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
200032e8:	68fb      	ldr	r3, [r7, #12]
200032ea:	681b      	ldr	r3, [r3, #0]
200032ec:	4a8d      	ldr	r2, [pc, #564]	; (20003524 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
200032ee:	4293      	cmp	r3, r2
200032f0:	d02a      	beq.n	20003348 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
200032f2:	68fb      	ldr	r3, [r7, #12]
200032f4:	681b      	ldr	r3, [r3, #0]
200032f6:	4a8c      	ldr	r2, [pc, #560]	; (20003528 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
200032f8:	4293      	cmp	r3, r2
200032fa:	d022      	beq.n	20003342 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
200032fc:	68fb      	ldr	r3, [r7, #12]
200032fe:	681b      	ldr	r3, [r3, #0]
20003300:	4a8a      	ldr	r2, [pc, #552]	; (2000352c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
20003302:	4293      	cmp	r3, r2
20003304:	d01a      	beq.n	2000333c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
20003306:	68fb      	ldr	r3, [r7, #12]
20003308:	681b      	ldr	r3, [r3, #0]
2000330a:	4a89      	ldr	r2, [pc, #548]	; (20003530 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
2000330c:	4293      	cmp	r3, r2
2000330e:	d012      	beq.n	20003336 <HAL_DMAEx_MultiBufferStart_IT+0x3de>
20003310:	68fb      	ldr	r3, [r7, #12]
20003312:	681b      	ldr	r3, [r3, #0]
20003314:	4a87      	ldr	r2, [pc, #540]	; (20003534 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
20003316:	4293      	cmp	r3, r2
20003318:	d00a      	beq.n	20003330 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
2000331a:	68fb      	ldr	r3, [r7, #12]
2000331c:	681b      	ldr	r3, [r3, #0]
2000331e:	4a86      	ldr	r2, [pc, #536]	; (20003538 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
20003320:	4293      	cmp	r3, r2
20003322:	d102      	bne.n	2000332a <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
20003324:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003328:	e01e      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
2000332a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
2000332e:	e01b      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
20003330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003334:	e018      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
20003336:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
2000333a:	e015      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
2000333c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
20003340:	e012      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
20003342:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003346:	e00f      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
20003348:	f44f 6300 	mov.w	r3, #2048	; 0x800
2000334c:	e00c      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
2000334e:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003352:	e009      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
20003354:	f44f 6300 	mov.w	r3, #2048	; 0x800
20003358:	e006      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
2000335a:	2320      	movs	r3, #32
2000335c:	e004      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
2000335e:	2320      	movs	r3, #32
20003360:	e002      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
20003362:	2320      	movs	r3, #32
20003364:	e000      	b.n	20003368 <HAL_DMAEx_MultiBufferStart_IT+0x410>
20003366:	2320      	movs	r3, #32
20003368:	4a74      	ldr	r2, [pc, #464]	; (2000353c <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
2000336a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
2000336c:	68fb      	ldr	r3, [r7, #12]
2000336e:	681b      	ldr	r3, [r3, #0]
20003370:	461a      	mov	r2, r3
20003372:	4b73      	ldr	r3, [pc, #460]	; (20003540 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
20003374:	429a      	cmp	r2, r3
20003376:	d960      	bls.n	2000343a <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
20003378:	68fb      	ldr	r3, [r7, #12]
2000337a:	681b      	ldr	r3, [r3, #0]
2000337c:	4a63      	ldr	r2, [pc, #396]	; (2000350c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
2000337e:	4293      	cmp	r3, r2
20003380:	d057      	beq.n	20003432 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
20003382:	68fb      	ldr	r3, [r7, #12]
20003384:	681b      	ldr	r3, [r3, #0]
20003386:	4a62      	ldr	r2, [pc, #392]	; (20003510 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
20003388:	4293      	cmp	r3, r2
2000338a:	d050      	beq.n	2000342e <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
2000338c:	68fb      	ldr	r3, [r7, #12]
2000338e:	681b      	ldr	r3, [r3, #0]
20003390:	4a60      	ldr	r2, [pc, #384]	; (20003514 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
20003392:	4293      	cmp	r3, r2
20003394:	d049      	beq.n	2000342a <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
20003396:	68fb      	ldr	r3, [r7, #12]
20003398:	681b      	ldr	r3, [r3, #0]
2000339a:	4a5f      	ldr	r2, [pc, #380]	; (20003518 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
2000339c:	4293      	cmp	r3, r2
2000339e:	d042      	beq.n	20003426 <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
200033a0:	68fb      	ldr	r3, [r7, #12]
200033a2:	681b      	ldr	r3, [r3, #0]
200033a4:	4a5d      	ldr	r2, [pc, #372]	; (2000351c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
200033a6:	4293      	cmp	r3, r2
200033a8:	d03a      	beq.n	20003420 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
200033aa:	68fb      	ldr	r3, [r7, #12]
200033ac:	681b      	ldr	r3, [r3, #0]
200033ae:	4a5c      	ldr	r2, [pc, #368]	; (20003520 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
200033b0:	4293      	cmp	r3, r2
200033b2:	d032      	beq.n	2000341a <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
200033b4:	68fb      	ldr	r3, [r7, #12]
200033b6:	681b      	ldr	r3, [r3, #0]
200033b8:	4a5a      	ldr	r2, [pc, #360]	; (20003524 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
200033ba:	4293      	cmp	r3, r2
200033bc:	d02a      	beq.n	20003414 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
200033be:	68fb      	ldr	r3, [r7, #12]
200033c0:	681b      	ldr	r3, [r3, #0]
200033c2:	4a59      	ldr	r2, [pc, #356]	; (20003528 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
200033c4:	4293      	cmp	r3, r2
200033c6:	d022      	beq.n	2000340e <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
200033c8:	68fb      	ldr	r3, [r7, #12]
200033ca:	681b      	ldr	r3, [r3, #0]
200033cc:	4a57      	ldr	r2, [pc, #348]	; (2000352c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
200033ce:	4293      	cmp	r3, r2
200033d0:	d01a      	beq.n	20003408 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
200033d2:	68fb      	ldr	r3, [r7, #12]
200033d4:	681b      	ldr	r3, [r3, #0]
200033d6:	4a56      	ldr	r2, [pc, #344]	; (20003530 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
200033d8:	4293      	cmp	r3, r2
200033da:	d012      	beq.n	20003402 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
200033dc:	68fb      	ldr	r3, [r7, #12]
200033de:	681b      	ldr	r3, [r3, #0]
200033e0:	4a54      	ldr	r2, [pc, #336]	; (20003534 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
200033e2:	4293      	cmp	r3, r2
200033e4:	d00a      	beq.n	200033fc <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
200033e6:	68fb      	ldr	r3, [r7, #12]
200033e8:	681b      	ldr	r3, [r3, #0]
200033ea:	4a53      	ldr	r2, [pc, #332]	; (20003538 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
200033ec:	4293      	cmp	r3, r2
200033ee:	d102      	bne.n	200033f6 <HAL_DMAEx_MultiBufferStart_IT+0x49e>
200033f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200033f4:	e01e      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
200033f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
200033fa:	e01b      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
200033fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003400:	e018      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20003402:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003406:	e015      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20003408:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
2000340c:	e012      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
2000340e:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003412:	e00f      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20003414:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003418:	e00c      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
2000341a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2000341e:	e009      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20003420:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003424:	e006      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20003426:	2310      	movs	r3, #16
20003428:	e004      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
2000342a:	2310      	movs	r3, #16
2000342c:	e002      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
2000342e:	2310      	movs	r3, #16
20003430:	e000      	b.n	20003434 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
20003432:	2310      	movs	r3, #16
20003434:	4a43      	ldr	r2, [pc, #268]	; (20003544 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
20003436:	60d3      	str	r3, [r2, #12]
20003438:	e14f      	b.n	200036da <HAL_DMAEx_MultiBufferStart_IT+0x782>
2000343a:	68fb      	ldr	r3, [r7, #12]
2000343c:	681b      	ldr	r3, [r3, #0]
2000343e:	461a      	mov	r2, r3
20003440:	4b41      	ldr	r3, [pc, #260]	; (20003548 <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
20003442:	429a      	cmp	r2, r3
20003444:	f240 8082 	bls.w	2000354c <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
20003448:	68fb      	ldr	r3, [r7, #12]
2000344a:	681b      	ldr	r3, [r3, #0]
2000344c:	4a2f      	ldr	r2, [pc, #188]	; (2000350c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
2000344e:	4293      	cmp	r3, r2
20003450:	d057      	beq.n	20003502 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
20003452:	68fb      	ldr	r3, [r7, #12]
20003454:	681b      	ldr	r3, [r3, #0]
20003456:	4a2e      	ldr	r2, [pc, #184]	; (20003510 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
20003458:	4293      	cmp	r3, r2
2000345a:	d050      	beq.n	200034fe <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
2000345c:	68fb      	ldr	r3, [r7, #12]
2000345e:	681b      	ldr	r3, [r3, #0]
20003460:	4a2c      	ldr	r2, [pc, #176]	; (20003514 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
20003462:	4293      	cmp	r3, r2
20003464:	d049      	beq.n	200034fa <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
20003466:	68fb      	ldr	r3, [r7, #12]
20003468:	681b      	ldr	r3, [r3, #0]
2000346a:	4a2b      	ldr	r2, [pc, #172]	; (20003518 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
2000346c:	4293      	cmp	r3, r2
2000346e:	d042      	beq.n	200034f6 <HAL_DMAEx_MultiBufferStart_IT+0x59e>
20003470:	68fb      	ldr	r3, [r7, #12]
20003472:	681b      	ldr	r3, [r3, #0]
20003474:	4a29      	ldr	r2, [pc, #164]	; (2000351c <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
20003476:	4293      	cmp	r3, r2
20003478:	d03a      	beq.n	200034f0 <HAL_DMAEx_MultiBufferStart_IT+0x598>
2000347a:	68fb      	ldr	r3, [r7, #12]
2000347c:	681b      	ldr	r3, [r3, #0]
2000347e:	4a28      	ldr	r2, [pc, #160]	; (20003520 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
20003480:	4293      	cmp	r3, r2
20003482:	d032      	beq.n	200034ea <HAL_DMAEx_MultiBufferStart_IT+0x592>
20003484:	68fb      	ldr	r3, [r7, #12]
20003486:	681b      	ldr	r3, [r3, #0]
20003488:	4a26      	ldr	r2, [pc, #152]	; (20003524 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
2000348a:	4293      	cmp	r3, r2
2000348c:	d02a      	beq.n	200034e4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
2000348e:	68fb      	ldr	r3, [r7, #12]
20003490:	681b      	ldr	r3, [r3, #0]
20003492:	4a25      	ldr	r2, [pc, #148]	; (20003528 <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
20003494:	4293      	cmp	r3, r2
20003496:	d022      	beq.n	200034de <HAL_DMAEx_MultiBufferStart_IT+0x586>
20003498:	68fb      	ldr	r3, [r7, #12]
2000349a:	681b      	ldr	r3, [r3, #0]
2000349c:	4a23      	ldr	r2, [pc, #140]	; (2000352c <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
2000349e:	4293      	cmp	r3, r2
200034a0:	d01a      	beq.n	200034d8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
200034a2:	68fb      	ldr	r3, [r7, #12]
200034a4:	681b      	ldr	r3, [r3, #0]
200034a6:	4a22      	ldr	r2, [pc, #136]	; (20003530 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
200034a8:	4293      	cmp	r3, r2
200034aa:	d012      	beq.n	200034d2 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
200034ac:	68fb      	ldr	r3, [r7, #12]
200034ae:	681b      	ldr	r3, [r3, #0]
200034b0:	4a20      	ldr	r2, [pc, #128]	; (20003534 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
200034b2:	4293      	cmp	r3, r2
200034b4:	d00a      	beq.n	200034cc <HAL_DMAEx_MultiBufferStart_IT+0x574>
200034b6:	68fb      	ldr	r3, [r7, #12]
200034b8:	681b      	ldr	r3, [r3, #0]
200034ba:	4a1f      	ldr	r2, [pc, #124]	; (20003538 <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
200034bc:	4293      	cmp	r3, r2
200034be:	d102      	bne.n	200034c6 <HAL_DMAEx_MultiBufferStart_IT+0x56e>
200034c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200034c4:	e01e      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
200034ca:	e01b      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200034d0:	e018      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200034d6:	e015      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200034dc:	e012      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034de:	f44f 6380 	mov.w	r3, #1024	; 0x400
200034e2:	e00f      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
200034e8:	e00c      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
200034ee:	e009      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200034f4:	e006      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034f6:	2310      	movs	r3, #16
200034f8:	e004      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034fa:	2310      	movs	r3, #16
200034fc:	e002      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
200034fe:	2310      	movs	r3, #16
20003500:	e000      	b.n	20003504 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
20003502:	2310      	movs	r3, #16
20003504:	4a0f      	ldr	r2, [pc, #60]	; (20003544 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
20003506:	6093      	str	r3, [r2, #8]
20003508:	e0e7      	b.n	200036da <HAL_DMAEx_MultiBufferStart_IT+0x782>
2000350a:	bf00      	nop
2000350c:	40026010 	.word	0x40026010
20003510:	40026410 	.word	0x40026410
20003514:	40026070 	.word	0x40026070
20003518:	40026470 	.word	0x40026470
2000351c:	40026028 	.word	0x40026028
20003520:	40026428 	.word	0x40026428
20003524:	40026088 	.word	0x40026088
20003528:	40026488 	.word	0x40026488
2000352c:	40026040 	.word	0x40026040
20003530:	40026440 	.word	0x40026440
20003534:	400260a0 	.word	0x400260a0
20003538:	400264a0 	.word	0x400264a0
2000353c:	40026000 	.word	0x40026000
20003540:	40026458 	.word	0x40026458
20003544:	40026400 	.word	0x40026400
20003548:	400260b8 	.word	0x400260b8
2000354c:	68fb      	ldr	r3, [r7, #12]
2000354e:	681b      	ldr	r3, [r3, #0]
20003550:	461a      	mov	r2, r3
20003552:	4b96      	ldr	r3, [pc, #600]	; (200037ac <HAL_DMAEx_MultiBufferStart_IT+0x854>)
20003554:	429a      	cmp	r2, r3
20003556:	d960      	bls.n	2000361a <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
20003558:	68fb      	ldr	r3, [r7, #12]
2000355a:	681b      	ldr	r3, [r3, #0]
2000355c:	4a94      	ldr	r2, [pc, #592]	; (200037b0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
2000355e:	4293      	cmp	r3, r2
20003560:	d057      	beq.n	20003612 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
20003562:	68fb      	ldr	r3, [r7, #12]
20003564:	681b      	ldr	r3, [r3, #0]
20003566:	4a93      	ldr	r2, [pc, #588]	; (200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
20003568:	4293      	cmp	r3, r2
2000356a:	d050      	beq.n	2000360e <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
2000356c:	68fb      	ldr	r3, [r7, #12]
2000356e:	681b      	ldr	r3, [r3, #0]
20003570:	4a91      	ldr	r2, [pc, #580]	; (200037b8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
20003572:	4293      	cmp	r3, r2
20003574:	d049      	beq.n	2000360a <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
20003576:	68fb      	ldr	r3, [r7, #12]
20003578:	681b      	ldr	r3, [r3, #0]
2000357a:	4a90      	ldr	r2, [pc, #576]	; (200037bc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
2000357c:	4293      	cmp	r3, r2
2000357e:	d042      	beq.n	20003606 <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
20003580:	68fb      	ldr	r3, [r7, #12]
20003582:	681b      	ldr	r3, [r3, #0]
20003584:	4a8e      	ldr	r2, [pc, #568]	; (200037c0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
20003586:	4293      	cmp	r3, r2
20003588:	d03a      	beq.n	20003600 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
2000358a:	68fb      	ldr	r3, [r7, #12]
2000358c:	681b      	ldr	r3, [r3, #0]
2000358e:	4a8d      	ldr	r2, [pc, #564]	; (200037c4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
20003590:	4293      	cmp	r3, r2
20003592:	d032      	beq.n	200035fa <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
20003594:	68fb      	ldr	r3, [r7, #12]
20003596:	681b      	ldr	r3, [r3, #0]
20003598:	4a8b      	ldr	r2, [pc, #556]	; (200037c8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
2000359a:	4293      	cmp	r3, r2
2000359c:	d02a      	beq.n	200035f4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
2000359e:	68fb      	ldr	r3, [r7, #12]
200035a0:	681b      	ldr	r3, [r3, #0]
200035a2:	4a8a      	ldr	r2, [pc, #552]	; (200037cc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
200035a4:	4293      	cmp	r3, r2
200035a6:	d022      	beq.n	200035ee <HAL_DMAEx_MultiBufferStart_IT+0x696>
200035a8:	68fb      	ldr	r3, [r7, #12]
200035aa:	681b      	ldr	r3, [r3, #0]
200035ac:	4a88      	ldr	r2, [pc, #544]	; (200037d0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
200035ae:	4293      	cmp	r3, r2
200035b0:	d01a      	beq.n	200035e8 <HAL_DMAEx_MultiBufferStart_IT+0x690>
200035b2:	68fb      	ldr	r3, [r7, #12]
200035b4:	681b      	ldr	r3, [r3, #0]
200035b6:	4a87      	ldr	r2, [pc, #540]	; (200037d4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
200035b8:	4293      	cmp	r3, r2
200035ba:	d012      	beq.n	200035e2 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
200035bc:	68fb      	ldr	r3, [r7, #12]
200035be:	681b      	ldr	r3, [r3, #0]
200035c0:	4a85      	ldr	r2, [pc, #532]	; (200037d8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
200035c2:	4293      	cmp	r3, r2
200035c4:	d00a      	beq.n	200035dc <HAL_DMAEx_MultiBufferStart_IT+0x684>
200035c6:	68fb      	ldr	r3, [r7, #12]
200035c8:	681b      	ldr	r3, [r3, #0]
200035ca:	4a84      	ldr	r2, [pc, #528]	; (200037dc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
200035cc:	4293      	cmp	r3, r2
200035ce:	d102      	bne.n	200035d6 <HAL_DMAEx_MultiBufferStart_IT+0x67e>
200035d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200035d4:	e01e      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
200035d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
200035da:	e01b      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
200035dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200035e0:	e018      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
200035e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200035e6:	e015      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
200035e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200035ec:	e012      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
200035ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
200035f2:	e00f      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
200035f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
200035f8:	e00c      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
200035fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
200035fe:	e009      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20003600:	f44f 6380 	mov.w	r3, #1024	; 0x400
20003604:	e006      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20003606:	2310      	movs	r3, #16
20003608:	e004      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
2000360a:	2310      	movs	r3, #16
2000360c:	e002      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
2000360e:	2310      	movs	r3, #16
20003610:	e000      	b.n	20003614 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
20003612:	2310      	movs	r3, #16
20003614:	4a72      	ldr	r2, [pc, #456]	; (200037e0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
20003616:	60d3      	str	r3, [r2, #12]
20003618:	e05f      	b.n	200036da <HAL_DMAEx_MultiBufferStart_IT+0x782>
2000361a:	68fb      	ldr	r3, [r7, #12]
2000361c:	681b      	ldr	r3, [r3, #0]
2000361e:	4a64      	ldr	r2, [pc, #400]	; (200037b0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
20003620:	4293      	cmp	r3, r2
20003622:	d057      	beq.n	200036d4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
20003624:	68fb      	ldr	r3, [r7, #12]
20003626:	681b      	ldr	r3, [r3, #0]
20003628:	4a62      	ldr	r2, [pc, #392]	; (200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
2000362a:	4293      	cmp	r3, r2
2000362c:	d050      	beq.n	200036d0 <HAL_DMAEx_MultiBufferStart_IT+0x778>
2000362e:	68fb      	ldr	r3, [r7, #12]
20003630:	681b      	ldr	r3, [r3, #0]
20003632:	4a61      	ldr	r2, [pc, #388]	; (200037b8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
20003634:	4293      	cmp	r3, r2
20003636:	d049      	beq.n	200036cc <HAL_DMAEx_MultiBufferStart_IT+0x774>
20003638:	68fb      	ldr	r3, [r7, #12]
2000363a:	681b      	ldr	r3, [r3, #0]
2000363c:	4a5f      	ldr	r2, [pc, #380]	; (200037bc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
2000363e:	4293      	cmp	r3, r2
20003640:	d042      	beq.n	200036c8 <HAL_DMAEx_MultiBufferStart_IT+0x770>
20003642:	68fb      	ldr	r3, [r7, #12]
20003644:	681b      	ldr	r3, [r3, #0]
20003646:	4a5e      	ldr	r2, [pc, #376]	; (200037c0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
20003648:	4293      	cmp	r3, r2
2000364a:	d03a      	beq.n	200036c2 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
2000364c:	68fb      	ldr	r3, [r7, #12]
2000364e:	681b      	ldr	r3, [r3, #0]
20003650:	4a5c      	ldr	r2, [pc, #368]	; (200037c4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
20003652:	4293      	cmp	r3, r2
20003654:	d032      	beq.n	200036bc <HAL_DMAEx_MultiBufferStart_IT+0x764>
20003656:	68fb      	ldr	r3, [r7, #12]
20003658:	681b      	ldr	r3, [r3, #0]
2000365a:	4a5b      	ldr	r2, [pc, #364]	; (200037c8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
2000365c:	4293      	cmp	r3, r2
2000365e:	d02a      	beq.n	200036b6 <HAL_DMAEx_MultiBufferStart_IT+0x75e>
20003660:	68fb      	ldr	r3, [r7, #12]
20003662:	681b      	ldr	r3, [r3, #0]
20003664:	4a59      	ldr	r2, [pc, #356]	; (200037cc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
20003666:	4293      	cmp	r3, r2
20003668:	d022      	beq.n	200036b0 <HAL_DMAEx_MultiBufferStart_IT+0x758>
2000366a:	68fb      	ldr	r3, [r7, #12]
2000366c:	681b      	ldr	r3, [r3, #0]
2000366e:	4a58      	ldr	r2, [pc, #352]	; (200037d0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
20003670:	4293      	cmp	r3, r2
20003672:	d01a      	beq.n	200036aa <HAL_DMAEx_MultiBufferStart_IT+0x752>
20003674:	68fb      	ldr	r3, [r7, #12]
20003676:	681b      	ldr	r3, [r3, #0]
20003678:	4a56      	ldr	r2, [pc, #344]	; (200037d4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
2000367a:	4293      	cmp	r3, r2
2000367c:	d012      	beq.n	200036a4 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
2000367e:	68fb      	ldr	r3, [r7, #12]
20003680:	681b      	ldr	r3, [r3, #0]
20003682:	4a55      	ldr	r2, [pc, #340]	; (200037d8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
20003684:	4293      	cmp	r3, r2
20003686:	d00a      	beq.n	2000369e <HAL_DMAEx_MultiBufferStart_IT+0x746>
20003688:	68fb      	ldr	r3, [r7, #12]
2000368a:	681b      	ldr	r3, [r3, #0]
2000368c:	4a53      	ldr	r2, [pc, #332]	; (200037dc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
2000368e:	4293      	cmp	r3, r2
20003690:	d102      	bne.n	20003698 <HAL_DMAEx_MultiBufferStart_IT+0x740>
20003692:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
20003696:	e01e      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
20003698:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
2000369c:	e01b      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
2000369e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200036a2:	e018      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200036a8:	e015      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
200036ae:	e012      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
200036b4:	e00f      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
200036ba:	e00c      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
200036c0:	e009      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
200036c6:	e006      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036c8:	2310      	movs	r3, #16
200036ca:	e004      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036cc:	2310      	movs	r3, #16
200036ce:	e002      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036d0:	2310      	movs	r3, #16
200036d2:	e000      	b.n	200036d6 <HAL_DMAEx_MultiBufferStart_IT+0x77e>
200036d4:	2310      	movs	r3, #16
200036d6:	4a42      	ldr	r2, [pc, #264]	; (200037e0 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
200036d8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
200036da:	68fb      	ldr	r3, [r7, #12]
200036dc:	681b      	ldr	r3, [r3, #0]
200036de:	461a      	mov	r2, r3
200036e0:	4b40      	ldr	r3, [pc, #256]	; (200037e4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
200036e2:	429a      	cmp	r2, r3
200036e4:	f240 8082 	bls.w	200037ec <HAL_DMAEx_MultiBufferStart_IT+0x894>
200036e8:	68fb      	ldr	r3, [r7, #12]
200036ea:	681b      	ldr	r3, [r3, #0]
200036ec:	4a30      	ldr	r2, [pc, #192]	; (200037b0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
200036ee:	4293      	cmp	r3, r2
200036f0:	d057      	beq.n	200037a2 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
200036f2:	68fb      	ldr	r3, [r7, #12]
200036f4:	681b      	ldr	r3, [r3, #0]
200036f6:	4a2f      	ldr	r2, [pc, #188]	; (200037b4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
200036f8:	4293      	cmp	r3, r2
200036fa:	d050      	beq.n	2000379e <HAL_DMAEx_MultiBufferStart_IT+0x846>
200036fc:	68fb      	ldr	r3, [r7, #12]
200036fe:	681b      	ldr	r3, [r3, #0]
20003700:	4a2d      	ldr	r2, [pc, #180]	; (200037b8 <HAL_DMAEx_MultiBufferStart_IT+0x860>)
20003702:	4293      	cmp	r3, r2
20003704:	d049      	beq.n	2000379a <HAL_DMAEx_MultiBufferStart_IT+0x842>
20003706:	68fb      	ldr	r3, [r7, #12]
20003708:	681b      	ldr	r3, [r3, #0]
2000370a:	4a2c      	ldr	r2, [pc, #176]	; (200037bc <HAL_DMAEx_MultiBufferStart_IT+0x864>)
2000370c:	4293      	cmp	r3, r2
2000370e:	d042      	beq.n	20003796 <HAL_DMAEx_MultiBufferStart_IT+0x83e>
20003710:	68fb      	ldr	r3, [r7, #12]
20003712:	681b      	ldr	r3, [r3, #0]
20003714:	4a2a      	ldr	r2, [pc, #168]	; (200037c0 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
20003716:	4293      	cmp	r3, r2
20003718:	d03a      	beq.n	20003790 <HAL_DMAEx_MultiBufferStart_IT+0x838>
2000371a:	68fb      	ldr	r3, [r7, #12]
2000371c:	681b      	ldr	r3, [r3, #0]
2000371e:	4a29      	ldr	r2, [pc, #164]	; (200037c4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
20003720:	4293      	cmp	r3, r2
20003722:	d032      	beq.n	2000378a <HAL_DMAEx_MultiBufferStart_IT+0x832>
20003724:	68fb      	ldr	r3, [r7, #12]
20003726:	681b      	ldr	r3, [r3, #0]
20003728:	4a27      	ldr	r2, [pc, #156]	; (200037c8 <HAL_DMAEx_MultiBufferStart_IT+0x870>)
2000372a:	4293      	cmp	r3, r2
2000372c:	d02a      	beq.n	20003784 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
2000372e:	68fb      	ldr	r3, [r7, #12]
20003730:	681b      	ldr	r3, [r3, #0]
20003732:	4a26      	ldr	r2, [pc, #152]	; (200037cc <HAL_DMAEx_MultiBufferStart_IT+0x874>)
20003734:	4293      	cmp	r3, r2
20003736:	d022      	beq.n	2000377e <HAL_DMAEx_MultiBufferStart_IT+0x826>
20003738:	68fb      	ldr	r3, [r7, #12]
2000373a:	681b      	ldr	r3, [r3, #0]
2000373c:	4a24      	ldr	r2, [pc, #144]	; (200037d0 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
2000373e:	4293      	cmp	r3, r2
20003740:	d01a      	beq.n	20003778 <HAL_DMAEx_MultiBufferStart_IT+0x820>
20003742:	68fb      	ldr	r3, [r7, #12]
20003744:	681b      	ldr	r3, [r3, #0]
20003746:	4a23      	ldr	r2, [pc, #140]	; (200037d4 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
20003748:	4293      	cmp	r3, r2
2000374a:	d012      	beq.n	20003772 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
2000374c:	68fb      	ldr	r3, [r7, #12]
2000374e:	681b      	ldr	r3, [r3, #0]
20003750:	4a21      	ldr	r2, [pc, #132]	; (200037d8 <HAL_DMAEx_MultiBufferStart_IT+0x880>)
20003752:	4293      	cmp	r3, r2
20003754:	d00a      	beq.n	2000376c <HAL_DMAEx_MultiBufferStart_IT+0x814>
20003756:	68fb      	ldr	r3, [r7, #12]
20003758:	681b      	ldr	r3, [r3, #0]
2000375a:	4a20      	ldr	r2, [pc, #128]	; (200037dc <HAL_DMAEx_MultiBufferStart_IT+0x884>)
2000375c:	4293      	cmp	r3, r2
2000375e:	d102      	bne.n	20003766 <HAL_DMAEx_MultiBufferStart_IT+0x80e>
20003760:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003764:	e01e      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20003766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2000376a:	e01b      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
2000376c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003770:	e018      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20003772:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003776:	e015      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20003778:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2000377c:	e012      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
2000377e:	f44f 7300 	mov.w	r3, #512	; 0x200
20003782:	e00f      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20003784:	f44f 7300 	mov.w	r3, #512	; 0x200
20003788:	e00c      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
2000378a:	f44f 7300 	mov.w	r3, #512	; 0x200
2000378e:	e009      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20003790:	f44f 7300 	mov.w	r3, #512	; 0x200
20003794:	e006      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
20003796:	2308      	movs	r3, #8
20003798:	e004      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
2000379a:	2308      	movs	r3, #8
2000379c:	e002      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
2000379e:	2308      	movs	r3, #8
200037a0:	e000      	b.n	200037a4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
200037a2:	2308      	movs	r3, #8
200037a4:	4a10      	ldr	r2, [pc, #64]	; (200037e8 <HAL_DMAEx_MultiBufferStart_IT+0x890>)
200037a6:	60d3      	str	r3, [r2, #12]
200037a8:	e16f      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
200037aa:	bf00      	nop
200037ac:	40026058 	.word	0x40026058
200037b0:	40026010 	.word	0x40026010
200037b4:	40026410 	.word	0x40026410
200037b8:	40026070 	.word	0x40026070
200037bc:	40026470 	.word	0x40026470
200037c0:	40026028 	.word	0x40026028
200037c4:	40026428 	.word	0x40026428
200037c8:	40026088 	.word	0x40026088
200037cc:	40026488 	.word	0x40026488
200037d0:	40026040 	.word	0x40026040
200037d4:	40026440 	.word	0x40026440
200037d8:	400260a0 	.word	0x400260a0
200037dc:	400264a0 	.word	0x400264a0
200037e0:	40026000 	.word	0x40026000
200037e4:	40026458 	.word	0x40026458
200037e8:	40026400 	.word	0x40026400
200037ec:	68fb      	ldr	r3, [r7, #12]
200037ee:	681b      	ldr	r3, [r3, #0]
200037f0:	461a      	mov	r2, r3
200037f2:	4b94      	ldr	r3, [pc, #592]	; (20003a44 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
200037f4:	429a      	cmp	r2, r3
200037f6:	d960      	bls.n	200038ba <HAL_DMAEx_MultiBufferStart_IT+0x962>
200037f8:	68fb      	ldr	r3, [r7, #12]
200037fa:	681b      	ldr	r3, [r3, #0]
200037fc:	4a92      	ldr	r2, [pc, #584]	; (20003a48 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
200037fe:	4293      	cmp	r3, r2
20003800:	d057      	beq.n	200038b2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
20003802:	68fb      	ldr	r3, [r7, #12]
20003804:	681b      	ldr	r3, [r3, #0]
20003806:	4a91      	ldr	r2, [pc, #580]	; (20003a4c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003808:	4293      	cmp	r3, r2
2000380a:	d050      	beq.n	200038ae <HAL_DMAEx_MultiBufferStart_IT+0x956>
2000380c:	68fb      	ldr	r3, [r7, #12]
2000380e:	681b      	ldr	r3, [r3, #0]
20003810:	4a8f      	ldr	r2, [pc, #572]	; (20003a50 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
20003812:	4293      	cmp	r3, r2
20003814:	d049      	beq.n	200038aa <HAL_DMAEx_MultiBufferStart_IT+0x952>
20003816:	68fb      	ldr	r3, [r7, #12]
20003818:	681b      	ldr	r3, [r3, #0]
2000381a:	4a8e      	ldr	r2, [pc, #568]	; (20003a54 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
2000381c:	4293      	cmp	r3, r2
2000381e:	d042      	beq.n	200038a6 <HAL_DMAEx_MultiBufferStart_IT+0x94e>
20003820:	68fb      	ldr	r3, [r7, #12]
20003822:	681b      	ldr	r3, [r3, #0]
20003824:	4a8c      	ldr	r2, [pc, #560]	; (20003a58 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
20003826:	4293      	cmp	r3, r2
20003828:	d03a      	beq.n	200038a0 <HAL_DMAEx_MultiBufferStart_IT+0x948>
2000382a:	68fb      	ldr	r3, [r7, #12]
2000382c:	681b      	ldr	r3, [r3, #0]
2000382e:	4a8b      	ldr	r2, [pc, #556]	; (20003a5c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
20003830:	4293      	cmp	r3, r2
20003832:	d032      	beq.n	2000389a <HAL_DMAEx_MultiBufferStart_IT+0x942>
20003834:	68fb      	ldr	r3, [r7, #12]
20003836:	681b      	ldr	r3, [r3, #0]
20003838:	4a89      	ldr	r2, [pc, #548]	; (20003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
2000383a:	4293      	cmp	r3, r2
2000383c:	d02a      	beq.n	20003894 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
2000383e:	68fb      	ldr	r3, [r7, #12]
20003840:	681b      	ldr	r3, [r3, #0]
20003842:	4a88      	ldr	r2, [pc, #544]	; (20003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
20003844:	4293      	cmp	r3, r2
20003846:	d022      	beq.n	2000388e <HAL_DMAEx_MultiBufferStart_IT+0x936>
20003848:	68fb      	ldr	r3, [r7, #12]
2000384a:	681b      	ldr	r3, [r3, #0]
2000384c:	4a86      	ldr	r2, [pc, #536]	; (20003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
2000384e:	4293      	cmp	r3, r2
20003850:	d01a      	beq.n	20003888 <HAL_DMAEx_MultiBufferStart_IT+0x930>
20003852:	68fb      	ldr	r3, [r7, #12]
20003854:	681b      	ldr	r3, [r3, #0]
20003856:	4a85      	ldr	r2, [pc, #532]	; (20003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
20003858:	4293      	cmp	r3, r2
2000385a:	d012      	beq.n	20003882 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
2000385c:	68fb      	ldr	r3, [r7, #12]
2000385e:	681b      	ldr	r3, [r3, #0]
20003860:	4a83      	ldr	r2, [pc, #524]	; (20003a70 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
20003862:	4293      	cmp	r3, r2
20003864:	d00a      	beq.n	2000387c <HAL_DMAEx_MultiBufferStart_IT+0x924>
20003866:	68fb      	ldr	r3, [r7, #12]
20003868:	681b      	ldr	r3, [r3, #0]
2000386a:	4a82      	ldr	r2, [pc, #520]	; (20003a74 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
2000386c:	4293      	cmp	r3, r2
2000386e:	d102      	bne.n	20003876 <HAL_DMAEx_MultiBufferStart_IT+0x91e>
20003870:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003874:	e01e      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20003876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
2000387a:	e01b      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
2000387c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003880:	e018      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20003882:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003886:	e015      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20003888:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2000388c:	e012      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
2000388e:	f44f 7300 	mov.w	r3, #512	; 0x200
20003892:	e00f      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
20003894:	f44f 7300 	mov.w	r3, #512	; 0x200
20003898:	e00c      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
2000389a:	f44f 7300 	mov.w	r3, #512	; 0x200
2000389e:	e009      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
200038a0:	f44f 7300 	mov.w	r3, #512	; 0x200
200038a4:	e006      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
200038a6:	2308      	movs	r3, #8
200038a8:	e004      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
200038aa:	2308      	movs	r3, #8
200038ac:	e002      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
200038ae:	2308      	movs	r3, #8
200038b0:	e000      	b.n	200038b4 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
200038b2:	2308      	movs	r3, #8
200038b4:	4a70      	ldr	r2, [pc, #448]	; (20003a78 <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
200038b6:	6093      	str	r3, [r2, #8]
200038b8:	e0e7      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
200038ba:	68fb      	ldr	r3, [r7, #12]
200038bc:	681b      	ldr	r3, [r3, #0]
200038be:	461a      	mov	r2, r3
200038c0:	4b6e      	ldr	r3, [pc, #440]	; (20003a7c <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
200038c2:	429a      	cmp	r2, r3
200038c4:	d960      	bls.n	20003988 <HAL_DMAEx_MultiBufferStart_IT+0xa30>
200038c6:	68fb      	ldr	r3, [r7, #12]
200038c8:	681b      	ldr	r3, [r3, #0]
200038ca:	4a5f      	ldr	r2, [pc, #380]	; (20003a48 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
200038cc:	4293      	cmp	r3, r2
200038ce:	d057      	beq.n	20003980 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
200038d0:	68fb      	ldr	r3, [r7, #12]
200038d2:	681b      	ldr	r3, [r3, #0]
200038d4:	4a5d      	ldr	r2, [pc, #372]	; (20003a4c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
200038d6:	4293      	cmp	r3, r2
200038d8:	d050      	beq.n	2000397c <HAL_DMAEx_MultiBufferStart_IT+0xa24>
200038da:	68fb      	ldr	r3, [r7, #12]
200038dc:	681b      	ldr	r3, [r3, #0]
200038de:	4a5c      	ldr	r2, [pc, #368]	; (20003a50 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
200038e0:	4293      	cmp	r3, r2
200038e2:	d049      	beq.n	20003978 <HAL_DMAEx_MultiBufferStart_IT+0xa20>
200038e4:	68fb      	ldr	r3, [r7, #12]
200038e6:	681b      	ldr	r3, [r3, #0]
200038e8:	4a5a      	ldr	r2, [pc, #360]	; (20003a54 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
200038ea:	4293      	cmp	r3, r2
200038ec:	d042      	beq.n	20003974 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
200038ee:	68fb      	ldr	r3, [r7, #12]
200038f0:	681b      	ldr	r3, [r3, #0]
200038f2:	4a59      	ldr	r2, [pc, #356]	; (20003a58 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
200038f4:	4293      	cmp	r3, r2
200038f6:	d03a      	beq.n	2000396e <HAL_DMAEx_MultiBufferStart_IT+0xa16>
200038f8:	68fb      	ldr	r3, [r7, #12]
200038fa:	681b      	ldr	r3, [r3, #0]
200038fc:	4a57      	ldr	r2, [pc, #348]	; (20003a5c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
200038fe:	4293      	cmp	r3, r2
20003900:	d032      	beq.n	20003968 <HAL_DMAEx_MultiBufferStart_IT+0xa10>
20003902:	68fb      	ldr	r3, [r7, #12]
20003904:	681b      	ldr	r3, [r3, #0]
20003906:	4a56      	ldr	r2, [pc, #344]	; (20003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
20003908:	4293      	cmp	r3, r2
2000390a:	d02a      	beq.n	20003962 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
2000390c:	68fb      	ldr	r3, [r7, #12]
2000390e:	681b      	ldr	r3, [r3, #0]
20003910:	4a54      	ldr	r2, [pc, #336]	; (20003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
20003912:	4293      	cmp	r3, r2
20003914:	d022      	beq.n	2000395c <HAL_DMAEx_MultiBufferStart_IT+0xa04>
20003916:	68fb      	ldr	r3, [r7, #12]
20003918:	681b      	ldr	r3, [r3, #0]
2000391a:	4a53      	ldr	r2, [pc, #332]	; (20003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
2000391c:	4293      	cmp	r3, r2
2000391e:	d01a      	beq.n	20003956 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
20003920:	68fb      	ldr	r3, [r7, #12]
20003922:	681b      	ldr	r3, [r3, #0]
20003924:	4a51      	ldr	r2, [pc, #324]	; (20003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
20003926:	4293      	cmp	r3, r2
20003928:	d012      	beq.n	20003950 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
2000392a:	68fb      	ldr	r3, [r7, #12]
2000392c:	681b      	ldr	r3, [r3, #0]
2000392e:	4a50      	ldr	r2, [pc, #320]	; (20003a70 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
20003930:	4293      	cmp	r3, r2
20003932:	d00a      	beq.n	2000394a <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
20003934:	68fb      	ldr	r3, [r7, #12]
20003936:	681b      	ldr	r3, [r3, #0]
20003938:	4a4e      	ldr	r2, [pc, #312]	; (20003a74 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
2000393a:	4293      	cmp	r3, r2
2000393c:	d102      	bne.n	20003944 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
2000393e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003942:	e01e      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003948:	e01b      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
2000394a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2000394e:	e018      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003950:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003954:	e015      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003956:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2000395a:	e012      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
2000395c:	f44f 7300 	mov.w	r3, #512	; 0x200
20003960:	e00f      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003962:	f44f 7300 	mov.w	r3, #512	; 0x200
20003966:	e00c      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003968:	f44f 7300 	mov.w	r3, #512	; 0x200
2000396c:	e009      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
2000396e:	f44f 7300 	mov.w	r3, #512	; 0x200
20003972:	e006      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003974:	2308      	movs	r3, #8
20003976:	e004      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003978:	2308      	movs	r3, #8
2000397a:	e002      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
2000397c:	2308      	movs	r3, #8
2000397e:	e000      	b.n	20003982 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
20003980:	2308      	movs	r3, #8
20003982:	4a3f      	ldr	r2, [pc, #252]	; (20003a80 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
20003984:	60d3      	str	r3, [r2, #12]
20003986:	e080      	b.n	20003a8a <HAL_DMAEx_MultiBufferStart_IT+0xb32>
20003988:	68fb      	ldr	r3, [r7, #12]
2000398a:	681b      	ldr	r3, [r3, #0]
2000398c:	4a2e      	ldr	r2, [pc, #184]	; (20003a48 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
2000398e:	4293      	cmp	r3, r2
20003990:	d078      	beq.n	20003a84 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
20003992:	68fb      	ldr	r3, [r7, #12]
20003994:	681b      	ldr	r3, [r3, #0]
20003996:	4a2d      	ldr	r2, [pc, #180]	; (20003a4c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
20003998:	4293      	cmp	r3, r2
2000399a:	d050      	beq.n	20003a3e <HAL_DMAEx_MultiBufferStart_IT+0xae6>
2000399c:	68fb      	ldr	r3, [r7, #12]
2000399e:	681b      	ldr	r3, [r3, #0]
200039a0:	4a2b      	ldr	r2, [pc, #172]	; (20003a50 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
200039a2:	4293      	cmp	r3, r2
200039a4:	d049      	beq.n	20003a3a <HAL_DMAEx_MultiBufferStart_IT+0xae2>
200039a6:	68fb      	ldr	r3, [r7, #12]
200039a8:	681b      	ldr	r3, [r3, #0]
200039aa:	4a2a      	ldr	r2, [pc, #168]	; (20003a54 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
200039ac:	4293      	cmp	r3, r2
200039ae:	d042      	beq.n	20003a36 <HAL_DMAEx_MultiBufferStart_IT+0xade>
200039b0:	68fb      	ldr	r3, [r7, #12]
200039b2:	681b      	ldr	r3, [r3, #0]
200039b4:	4a28      	ldr	r2, [pc, #160]	; (20003a58 <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
200039b6:	4293      	cmp	r3, r2
200039b8:	d03a      	beq.n	20003a30 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
200039ba:	68fb      	ldr	r3, [r7, #12]
200039bc:	681b      	ldr	r3, [r3, #0]
200039be:	4a27      	ldr	r2, [pc, #156]	; (20003a5c <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
200039c0:	4293      	cmp	r3, r2
200039c2:	d032      	beq.n	20003a2a <HAL_DMAEx_MultiBufferStart_IT+0xad2>
200039c4:	68fb      	ldr	r3, [r7, #12]
200039c6:	681b      	ldr	r3, [r3, #0]
200039c8:	4a25      	ldr	r2, [pc, #148]	; (20003a60 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
200039ca:	4293      	cmp	r3, r2
200039cc:	d02a      	beq.n	20003a24 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
200039ce:	68fb      	ldr	r3, [r7, #12]
200039d0:	681b      	ldr	r3, [r3, #0]
200039d2:	4a24      	ldr	r2, [pc, #144]	; (20003a64 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
200039d4:	4293      	cmp	r3, r2
200039d6:	d022      	beq.n	20003a1e <HAL_DMAEx_MultiBufferStart_IT+0xac6>
200039d8:	68fb      	ldr	r3, [r7, #12]
200039da:	681b      	ldr	r3, [r3, #0]
200039dc:	4a22      	ldr	r2, [pc, #136]	; (20003a68 <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
200039de:	4293      	cmp	r3, r2
200039e0:	d01a      	beq.n	20003a18 <HAL_DMAEx_MultiBufferStart_IT+0xac0>
200039e2:	68fb      	ldr	r3, [r7, #12]
200039e4:	681b      	ldr	r3, [r3, #0]
200039e6:	4a21      	ldr	r2, [pc, #132]	; (20003a6c <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
200039e8:	4293      	cmp	r3, r2
200039ea:	d012      	beq.n	20003a12 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
200039ec:	68fb      	ldr	r3, [r7, #12]
200039ee:	681b      	ldr	r3, [r3, #0]
200039f0:	4a1f      	ldr	r2, [pc, #124]	; (20003a70 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
200039f2:	4293      	cmp	r3, r2
200039f4:	d00a      	beq.n	20003a0c <HAL_DMAEx_MultiBufferStart_IT+0xab4>
200039f6:	68fb      	ldr	r3, [r7, #12]
200039f8:	681b      	ldr	r3, [r3, #0]
200039fa:	4a1e      	ldr	r2, [pc, #120]	; (20003a74 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
200039fc:	4293      	cmp	r3, r2
200039fe:	d102      	bne.n	20003a06 <HAL_DMAEx_MultiBufferStart_IT+0xaae>
20003a00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003a04:	e03f      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
20003a0a:	e03c      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a0c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003a10:	e039      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003a16:	e036      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20003a1c:	e033      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
20003a22:	e030      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a24:	f44f 7300 	mov.w	r3, #512	; 0x200
20003a28:	e02d      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
20003a2e:	e02a      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a30:	f44f 7300 	mov.w	r3, #512	; 0x200
20003a34:	e027      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a36:	2308      	movs	r3, #8
20003a38:	e025      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a3a:	2308      	movs	r3, #8
20003a3c:	e023      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a3e:	2308      	movs	r3, #8
20003a40:	e021      	b.n	20003a86 <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
20003a42:	bf00      	nop
20003a44:	400260b8 	.word	0x400260b8
20003a48:	40026010 	.word	0x40026010
20003a4c:	40026410 	.word	0x40026410
20003a50:	40026070 	.word	0x40026070
20003a54:	40026470 	.word	0x40026470
20003a58:	40026028 	.word	0x40026028
20003a5c:	40026428 	.word	0x40026428
20003a60:	40026088 	.word	0x40026088
20003a64:	40026488 	.word	0x40026488
20003a68:	40026040 	.word	0x40026040
20003a6c:	40026440 	.word	0x40026440
20003a70:	400260a0 	.word	0x400260a0
20003a74:	400264a0 	.word	0x400264a0
20003a78:	40026400 	.word	0x40026400
20003a7c:	40026058 	.word	0x40026058
20003a80:	40026000 	.word	0x40026000
20003a84:	2308      	movs	r3, #8
20003a86:	4a9a      	ldr	r2, [pc, #616]	; (20003cf0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
20003a88:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
20003a8a:	68fb      	ldr	r3, [r7, #12]
20003a8c:	681b      	ldr	r3, [r3, #0]
20003a8e:	461a      	mov	r2, r3
20003a90:	4b98      	ldr	r3, [pc, #608]	; (20003cf4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
20003a92:	429a      	cmp	r2, r3
20003a94:	d960      	bls.n	20003b58 <HAL_DMAEx_MultiBufferStart_IT+0xc00>
20003a96:	68fb      	ldr	r3, [r7, #12]
20003a98:	681b      	ldr	r3, [r3, #0]
20003a9a:	4a97      	ldr	r2, [pc, #604]	; (20003cf8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20003a9c:	4293      	cmp	r3, r2
20003a9e:	d057      	beq.n	20003b50 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
20003aa0:	68fb      	ldr	r3, [r7, #12]
20003aa2:	681b      	ldr	r3, [r3, #0]
20003aa4:	4a95      	ldr	r2, [pc, #596]	; (20003cfc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
20003aa6:	4293      	cmp	r3, r2
20003aa8:	d050      	beq.n	20003b4c <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
20003aaa:	68fb      	ldr	r3, [r7, #12]
20003aac:	681b      	ldr	r3, [r3, #0]
20003aae:	4a94      	ldr	r2, [pc, #592]	; (20003d00 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20003ab0:	4293      	cmp	r3, r2
20003ab2:	d049      	beq.n	20003b48 <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
20003ab4:	68fb      	ldr	r3, [r7, #12]
20003ab6:	681b      	ldr	r3, [r3, #0]
20003ab8:	4a92      	ldr	r2, [pc, #584]	; (20003d04 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
20003aba:	4293      	cmp	r3, r2
20003abc:	d042      	beq.n	20003b44 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
20003abe:	68fb      	ldr	r3, [r7, #12]
20003ac0:	681b      	ldr	r3, [r3, #0]
20003ac2:	4a91      	ldr	r2, [pc, #580]	; (20003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
20003ac4:	4293      	cmp	r3, r2
20003ac6:	d03a      	beq.n	20003b3e <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
20003ac8:	68fb      	ldr	r3, [r7, #12]
20003aca:	681b      	ldr	r3, [r3, #0]
20003acc:	4a8f      	ldr	r2, [pc, #572]	; (20003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
20003ace:	4293      	cmp	r3, r2
20003ad0:	d032      	beq.n	20003b38 <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
20003ad2:	68fb      	ldr	r3, [r7, #12]
20003ad4:	681b      	ldr	r3, [r3, #0]
20003ad6:	4a8e      	ldr	r2, [pc, #568]	; (20003d10 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
20003ad8:	4293      	cmp	r3, r2
20003ada:	d02a      	beq.n	20003b32 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
20003adc:	68fb      	ldr	r3, [r7, #12]
20003ade:	681b      	ldr	r3, [r3, #0]
20003ae0:	4a8c      	ldr	r2, [pc, #560]	; (20003d14 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
20003ae2:	4293      	cmp	r3, r2
20003ae4:	d022      	beq.n	20003b2c <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
20003ae6:	68fb      	ldr	r3, [r7, #12]
20003ae8:	681b      	ldr	r3, [r3, #0]
20003aea:	4a8b      	ldr	r2, [pc, #556]	; (20003d18 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
20003aec:	4293      	cmp	r3, r2
20003aee:	d01a      	beq.n	20003b26 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
20003af0:	68fb      	ldr	r3, [r7, #12]
20003af2:	681b      	ldr	r3, [r3, #0]
20003af4:	4a89      	ldr	r2, [pc, #548]	; (20003d1c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
20003af6:	4293      	cmp	r3, r2
20003af8:	d012      	beq.n	20003b20 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
20003afa:	68fb      	ldr	r3, [r7, #12]
20003afc:	681b      	ldr	r3, [r3, #0]
20003afe:	4a88      	ldr	r2, [pc, #544]	; (20003d20 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
20003b00:	4293      	cmp	r3, r2
20003b02:	d00a      	beq.n	20003b1a <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
20003b04:	68fb      	ldr	r3, [r7, #12]
20003b06:	681b      	ldr	r3, [r3, #0]
20003b08:	4a86      	ldr	r2, [pc, #536]	; (20003d24 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
20003b0a:	4293      	cmp	r3, r2
20003b0c:	d102      	bne.n	20003b14 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
20003b0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003b12:	e01e      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003b18:	e01b      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003b1e:	e018      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003b24:	e015      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003b2a:	e012      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
20003b30:	e00f      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b32:	f44f 7380 	mov.w	r3, #256	; 0x100
20003b36:	e00c      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b38:	f44f 7380 	mov.w	r3, #256	; 0x100
20003b3c:	e009      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
20003b42:	e006      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b44:	2304      	movs	r3, #4
20003b46:	e004      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b48:	2304      	movs	r3, #4
20003b4a:	e002      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b4c:	2304      	movs	r3, #4
20003b4e:	e000      	b.n	20003b52 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
20003b50:	2304      	movs	r3, #4
20003b52:	4a75      	ldr	r2, [pc, #468]	; (20003d28 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
20003b54:	60d3      	str	r3, [r2, #12]
20003b56:	e151      	b.n	20003dfc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
20003b58:	68fb      	ldr	r3, [r7, #12]
20003b5a:	681b      	ldr	r3, [r3, #0]
20003b5c:	461a      	mov	r2, r3
20003b5e:	4b73      	ldr	r3, [pc, #460]	; (20003d2c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
20003b60:	429a      	cmp	r2, r3
20003b62:	d960      	bls.n	20003c26 <HAL_DMAEx_MultiBufferStart_IT+0xcce>
20003b64:	68fb      	ldr	r3, [r7, #12]
20003b66:	681b      	ldr	r3, [r3, #0]
20003b68:	4a63      	ldr	r2, [pc, #396]	; (20003cf8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20003b6a:	4293      	cmp	r3, r2
20003b6c:	d057      	beq.n	20003c1e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
20003b6e:	68fb      	ldr	r3, [r7, #12]
20003b70:	681b      	ldr	r3, [r3, #0]
20003b72:	4a62      	ldr	r2, [pc, #392]	; (20003cfc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
20003b74:	4293      	cmp	r3, r2
20003b76:	d050      	beq.n	20003c1a <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
20003b78:	68fb      	ldr	r3, [r7, #12]
20003b7a:	681b      	ldr	r3, [r3, #0]
20003b7c:	4a60      	ldr	r2, [pc, #384]	; (20003d00 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20003b7e:	4293      	cmp	r3, r2
20003b80:	d049      	beq.n	20003c16 <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
20003b82:	68fb      	ldr	r3, [r7, #12]
20003b84:	681b      	ldr	r3, [r3, #0]
20003b86:	4a5f      	ldr	r2, [pc, #380]	; (20003d04 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
20003b88:	4293      	cmp	r3, r2
20003b8a:	d042      	beq.n	20003c12 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
20003b8c:	68fb      	ldr	r3, [r7, #12]
20003b8e:	681b      	ldr	r3, [r3, #0]
20003b90:	4a5d      	ldr	r2, [pc, #372]	; (20003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
20003b92:	4293      	cmp	r3, r2
20003b94:	d03a      	beq.n	20003c0c <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
20003b96:	68fb      	ldr	r3, [r7, #12]
20003b98:	681b      	ldr	r3, [r3, #0]
20003b9a:	4a5c      	ldr	r2, [pc, #368]	; (20003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
20003b9c:	4293      	cmp	r3, r2
20003b9e:	d032      	beq.n	20003c06 <HAL_DMAEx_MultiBufferStart_IT+0xcae>
20003ba0:	68fb      	ldr	r3, [r7, #12]
20003ba2:	681b      	ldr	r3, [r3, #0]
20003ba4:	4a5a      	ldr	r2, [pc, #360]	; (20003d10 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
20003ba6:	4293      	cmp	r3, r2
20003ba8:	d02a      	beq.n	20003c00 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
20003baa:	68fb      	ldr	r3, [r7, #12]
20003bac:	681b      	ldr	r3, [r3, #0]
20003bae:	4a59      	ldr	r2, [pc, #356]	; (20003d14 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
20003bb0:	4293      	cmp	r3, r2
20003bb2:	d022      	beq.n	20003bfa <HAL_DMAEx_MultiBufferStart_IT+0xca2>
20003bb4:	68fb      	ldr	r3, [r7, #12]
20003bb6:	681b      	ldr	r3, [r3, #0]
20003bb8:	4a57      	ldr	r2, [pc, #348]	; (20003d18 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
20003bba:	4293      	cmp	r3, r2
20003bbc:	d01a      	beq.n	20003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
20003bbe:	68fb      	ldr	r3, [r7, #12]
20003bc0:	681b      	ldr	r3, [r3, #0]
20003bc2:	4a56      	ldr	r2, [pc, #344]	; (20003d1c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
20003bc4:	4293      	cmp	r3, r2
20003bc6:	d012      	beq.n	20003bee <HAL_DMAEx_MultiBufferStart_IT+0xc96>
20003bc8:	68fb      	ldr	r3, [r7, #12]
20003bca:	681b      	ldr	r3, [r3, #0]
20003bcc:	4a54      	ldr	r2, [pc, #336]	; (20003d20 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
20003bce:	4293      	cmp	r3, r2
20003bd0:	d00a      	beq.n	20003be8 <HAL_DMAEx_MultiBufferStart_IT+0xc90>
20003bd2:	68fb      	ldr	r3, [r7, #12]
20003bd4:	681b      	ldr	r3, [r3, #0]
20003bd6:	4a53      	ldr	r2, [pc, #332]	; (20003d24 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
20003bd8:	4293      	cmp	r3, r2
20003bda:	d102      	bne.n	20003be2 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
20003bdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003be0:	e01e      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003be6:	e01b      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003be8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003bec:	e018      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003bee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003bf2:	e015      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003bf4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003bf8:	e012      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
20003bfe:	e00f      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003c00:	f44f 7380 	mov.w	r3, #256	; 0x100
20003c04:	e00c      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003c06:	f44f 7380 	mov.w	r3, #256	; 0x100
20003c0a:	e009      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
20003c10:	e006      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003c12:	2304      	movs	r3, #4
20003c14:	e004      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003c16:	2304      	movs	r3, #4
20003c18:	e002      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003c1a:	2304      	movs	r3, #4
20003c1c:	e000      	b.n	20003c20 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
20003c1e:	2304      	movs	r3, #4
20003c20:	4a41      	ldr	r2, [pc, #260]	; (20003d28 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
20003c22:	6093      	str	r3, [r2, #8]
20003c24:	e0ea      	b.n	20003dfc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
20003c26:	68fb      	ldr	r3, [r7, #12]
20003c28:	681b      	ldr	r3, [r3, #0]
20003c2a:	461a      	mov	r2, r3
20003c2c:	4b40      	ldr	r3, [pc, #256]	; (20003d30 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
20003c2e:	429a      	cmp	r2, r3
20003c30:	f240 8084 	bls.w	20003d3c <HAL_DMAEx_MultiBufferStart_IT+0xde4>
20003c34:	68fb      	ldr	r3, [r7, #12]
20003c36:	681b      	ldr	r3, [r3, #0]
20003c38:	4a2f      	ldr	r2, [pc, #188]	; (20003cf8 <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
20003c3a:	4293      	cmp	r3, r2
20003c3c:	d07a      	beq.n	20003d34 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
20003c3e:	68fb      	ldr	r3, [r7, #12]
20003c40:	681b      	ldr	r3, [r3, #0]
20003c42:	4a2e      	ldr	r2, [pc, #184]	; (20003cfc <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
20003c44:	4293      	cmp	r3, r2
20003c46:	d050      	beq.n	20003cea <HAL_DMAEx_MultiBufferStart_IT+0xd92>
20003c48:	68fb      	ldr	r3, [r7, #12]
20003c4a:	681b      	ldr	r3, [r3, #0]
20003c4c:	4a2c      	ldr	r2, [pc, #176]	; (20003d00 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
20003c4e:	4293      	cmp	r3, r2
20003c50:	d049      	beq.n	20003ce6 <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
20003c52:	68fb      	ldr	r3, [r7, #12]
20003c54:	681b      	ldr	r3, [r3, #0]
20003c56:	4a2b      	ldr	r2, [pc, #172]	; (20003d04 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
20003c58:	4293      	cmp	r3, r2
20003c5a:	d042      	beq.n	20003ce2 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
20003c5c:	68fb      	ldr	r3, [r7, #12]
20003c5e:	681b      	ldr	r3, [r3, #0]
20003c60:	4a29      	ldr	r2, [pc, #164]	; (20003d08 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
20003c62:	4293      	cmp	r3, r2
20003c64:	d03a      	beq.n	20003cdc <HAL_DMAEx_MultiBufferStart_IT+0xd84>
20003c66:	68fb      	ldr	r3, [r7, #12]
20003c68:	681b      	ldr	r3, [r3, #0]
20003c6a:	4a28      	ldr	r2, [pc, #160]	; (20003d0c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
20003c6c:	4293      	cmp	r3, r2
20003c6e:	d032      	beq.n	20003cd6 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
20003c70:	68fb      	ldr	r3, [r7, #12]
20003c72:	681b      	ldr	r3, [r3, #0]
20003c74:	4a26      	ldr	r2, [pc, #152]	; (20003d10 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
20003c76:	4293      	cmp	r3, r2
20003c78:	d02a      	beq.n	20003cd0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
20003c7a:	68fb      	ldr	r3, [r7, #12]
20003c7c:	681b      	ldr	r3, [r3, #0]
20003c7e:	4a25      	ldr	r2, [pc, #148]	; (20003d14 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
20003c80:	4293      	cmp	r3, r2
20003c82:	d022      	beq.n	20003cca <HAL_DMAEx_MultiBufferStart_IT+0xd72>
20003c84:	68fb      	ldr	r3, [r7, #12]
20003c86:	681b      	ldr	r3, [r3, #0]
20003c88:	4a23      	ldr	r2, [pc, #140]	; (20003d18 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
20003c8a:	4293      	cmp	r3, r2
20003c8c:	d01a      	beq.n	20003cc4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
20003c8e:	68fb      	ldr	r3, [r7, #12]
20003c90:	681b      	ldr	r3, [r3, #0]
20003c92:	4a22      	ldr	r2, [pc, #136]	; (20003d1c <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
20003c94:	4293      	cmp	r3, r2
20003c96:	d012      	beq.n	20003cbe <HAL_DMAEx_MultiBufferStart_IT+0xd66>
20003c98:	68fb      	ldr	r3, [r7, #12]
20003c9a:	681b      	ldr	r3, [r3, #0]
20003c9c:	4a20      	ldr	r2, [pc, #128]	; (20003d20 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
20003c9e:	4293      	cmp	r3, r2
20003ca0:	d00a      	beq.n	20003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>
20003ca2:	68fb      	ldr	r3, [r7, #12]
20003ca4:	681b      	ldr	r3, [r3, #0]
20003ca6:	4a1f      	ldr	r2, [pc, #124]	; (20003d24 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
20003ca8:	4293      	cmp	r3, r2
20003caa:	d102      	bne.n	20003cb2 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
20003cac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003cb0:	e041      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003cb6:	e03e      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003cbc:	e03b      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003cc2:	e038      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003cc8:	e035      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cca:	f44f 7380 	mov.w	r3, #256	; 0x100
20003cce:	e032      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
20003cd4:	e02f      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
20003cda:	e02c      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
20003ce0:	e029      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003ce2:	2304      	movs	r3, #4
20003ce4:	e027      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003ce6:	2304      	movs	r3, #4
20003ce8:	e025      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cea:	2304      	movs	r3, #4
20003cec:	e023      	b.n	20003d36 <HAL_DMAEx_MultiBufferStart_IT+0xdde>
20003cee:	bf00      	nop
20003cf0:	40026000 	.word	0x40026000
20003cf4:	40026458 	.word	0x40026458
20003cf8:	40026010 	.word	0x40026010
20003cfc:	40026410 	.word	0x40026410
20003d00:	40026070 	.word	0x40026070
20003d04:	40026470 	.word	0x40026470
20003d08:	40026028 	.word	0x40026028
20003d0c:	40026428 	.word	0x40026428
20003d10:	40026088 	.word	0x40026088
20003d14:	40026488 	.word	0x40026488
20003d18:	40026040 	.word	0x40026040
20003d1c:	40026440 	.word	0x40026440
20003d20:	400260a0 	.word	0x400260a0
20003d24:	400264a0 	.word	0x400264a0
20003d28:	40026400 	.word	0x40026400
20003d2c:	400260b8 	.word	0x400260b8
20003d30:	40026058 	.word	0x40026058
20003d34:	2304      	movs	r3, #4
20003d36:	4a94      	ldr	r2, [pc, #592]	; (20003f88 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
20003d38:	60d3      	str	r3, [r2, #12]
20003d3a:	e05f      	b.n	20003dfc <HAL_DMAEx_MultiBufferStart_IT+0xea4>
20003d3c:	68fb      	ldr	r3, [r7, #12]
20003d3e:	681b      	ldr	r3, [r3, #0]
20003d40:	4a92      	ldr	r2, [pc, #584]	; (20003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20003d42:	4293      	cmp	r3, r2
20003d44:	d057      	beq.n	20003df6 <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
20003d46:	68fb      	ldr	r3, [r7, #12]
20003d48:	681b      	ldr	r3, [r3, #0]
20003d4a:	4a91      	ldr	r2, [pc, #580]	; (20003f90 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20003d4c:	4293      	cmp	r3, r2
20003d4e:	d050      	beq.n	20003df2 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
20003d50:	68fb      	ldr	r3, [r7, #12]
20003d52:	681b      	ldr	r3, [r3, #0]
20003d54:	4a8f      	ldr	r2, [pc, #572]	; (20003f94 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20003d56:	4293      	cmp	r3, r2
20003d58:	d049      	beq.n	20003dee <HAL_DMAEx_MultiBufferStart_IT+0xe96>
20003d5a:	68fb      	ldr	r3, [r7, #12]
20003d5c:	681b      	ldr	r3, [r3, #0]
20003d5e:	4a8e      	ldr	r2, [pc, #568]	; (20003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
20003d60:	4293      	cmp	r3, r2
20003d62:	d042      	beq.n	20003dea <HAL_DMAEx_MultiBufferStart_IT+0xe92>
20003d64:	68fb      	ldr	r3, [r7, #12]
20003d66:	681b      	ldr	r3, [r3, #0]
20003d68:	4a8c      	ldr	r2, [pc, #560]	; (20003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
20003d6a:	4293      	cmp	r3, r2
20003d6c:	d03a      	beq.n	20003de4 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
20003d6e:	68fb      	ldr	r3, [r7, #12]
20003d70:	681b      	ldr	r3, [r3, #0]
20003d72:	4a8b      	ldr	r2, [pc, #556]	; (20003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
20003d74:	4293      	cmp	r3, r2
20003d76:	d032      	beq.n	20003dde <HAL_DMAEx_MultiBufferStart_IT+0xe86>
20003d78:	68fb      	ldr	r3, [r7, #12]
20003d7a:	681b      	ldr	r3, [r3, #0]
20003d7c:	4a89      	ldr	r2, [pc, #548]	; (20003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
20003d7e:	4293      	cmp	r3, r2
20003d80:	d02a      	beq.n	20003dd8 <HAL_DMAEx_MultiBufferStart_IT+0xe80>
20003d82:	68fb      	ldr	r3, [r7, #12]
20003d84:	681b      	ldr	r3, [r3, #0]
20003d86:	4a88      	ldr	r2, [pc, #544]	; (20003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
20003d88:	4293      	cmp	r3, r2
20003d8a:	d022      	beq.n	20003dd2 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
20003d8c:	68fb      	ldr	r3, [r7, #12]
20003d8e:	681b      	ldr	r3, [r3, #0]
20003d90:	4a86      	ldr	r2, [pc, #536]	; (20003fac <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
20003d92:	4293      	cmp	r3, r2
20003d94:	d01a      	beq.n	20003dcc <HAL_DMAEx_MultiBufferStart_IT+0xe74>
20003d96:	68fb      	ldr	r3, [r7, #12]
20003d98:	681b      	ldr	r3, [r3, #0]
20003d9a:	4a85      	ldr	r2, [pc, #532]	; (20003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
20003d9c:	4293      	cmp	r3, r2
20003d9e:	d012      	beq.n	20003dc6 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
20003da0:	68fb      	ldr	r3, [r7, #12]
20003da2:	681b      	ldr	r3, [r3, #0]
20003da4:	4a83      	ldr	r2, [pc, #524]	; (20003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
20003da6:	4293      	cmp	r3, r2
20003da8:	d00a      	beq.n	20003dc0 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
20003daa:	68fb      	ldr	r3, [r7, #12]
20003dac:	681b      	ldr	r3, [r3, #0]
20003dae:	4a82      	ldr	r2, [pc, #520]	; (20003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
20003db0:	4293      	cmp	r3, r2
20003db2:	d102      	bne.n	20003dba <HAL_DMAEx_MultiBufferStart_IT+0xe62>
20003db4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003db8:	e01e      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
20003dbe:	e01b      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003dc4:	e018      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dc6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003dca:	e015      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
20003dd0:	e012      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dd2:	f44f 7380 	mov.w	r3, #256	; 0x100
20003dd6:	e00f      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dd8:	f44f 7380 	mov.w	r3, #256	; 0x100
20003ddc:	e00c      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dde:	f44f 7380 	mov.w	r3, #256	; 0x100
20003de2:	e009      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003de4:	f44f 7380 	mov.w	r3, #256	; 0x100
20003de8:	e006      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dea:	2304      	movs	r3, #4
20003dec:	e004      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003dee:	2304      	movs	r3, #4
20003df0:	e002      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003df2:	2304      	movs	r3, #4
20003df4:	e000      	b.n	20003df8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
20003df6:	2304      	movs	r3, #4
20003df8:	4a63      	ldr	r2, [pc, #396]	; (20003f88 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
20003dfa:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
20003dfc:	68fb      	ldr	r3, [r7, #12]
20003dfe:	681b      	ldr	r3, [r3, #0]
20003e00:	461a      	mov	r2, r3
20003e02:	4b6e      	ldr	r3, [pc, #440]	; (20003fbc <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
20003e04:	429a      	cmp	r2, r3
20003e06:	d95c      	bls.n	20003ec2 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
20003e08:	68fb      	ldr	r3, [r7, #12]
20003e0a:	681b      	ldr	r3, [r3, #0]
20003e0c:	4a5f      	ldr	r2, [pc, #380]	; (20003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20003e0e:	4293      	cmp	r3, r2
20003e10:	d053      	beq.n	20003eba <HAL_DMAEx_MultiBufferStart_IT+0xf62>
20003e12:	68fb      	ldr	r3, [r7, #12]
20003e14:	681b      	ldr	r3, [r3, #0]
20003e16:	4a5e      	ldr	r2, [pc, #376]	; (20003f90 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20003e18:	4293      	cmp	r3, r2
20003e1a:	d04c      	beq.n	20003eb6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
20003e1c:	68fb      	ldr	r3, [r7, #12]
20003e1e:	681b      	ldr	r3, [r3, #0]
20003e20:	4a5c      	ldr	r2, [pc, #368]	; (20003f94 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20003e22:	4293      	cmp	r3, r2
20003e24:	d045      	beq.n	20003eb2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
20003e26:	68fb      	ldr	r3, [r7, #12]
20003e28:	681b      	ldr	r3, [r3, #0]
20003e2a:	4a5b      	ldr	r2, [pc, #364]	; (20003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
20003e2c:	4293      	cmp	r3, r2
20003e2e:	d03e      	beq.n	20003eae <HAL_DMAEx_MultiBufferStart_IT+0xf56>
20003e30:	68fb      	ldr	r3, [r7, #12]
20003e32:	681b      	ldr	r3, [r3, #0]
20003e34:	4a59      	ldr	r2, [pc, #356]	; (20003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
20003e36:	4293      	cmp	r3, r2
20003e38:	d037      	beq.n	20003eaa <HAL_DMAEx_MultiBufferStart_IT+0xf52>
20003e3a:	68fb      	ldr	r3, [r7, #12]
20003e3c:	681b      	ldr	r3, [r3, #0]
20003e3e:	4a58      	ldr	r2, [pc, #352]	; (20003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
20003e40:	4293      	cmp	r3, r2
20003e42:	d030      	beq.n	20003ea6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
20003e44:	68fb      	ldr	r3, [r7, #12]
20003e46:	681b      	ldr	r3, [r3, #0]
20003e48:	4a56      	ldr	r2, [pc, #344]	; (20003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
20003e4a:	4293      	cmp	r3, r2
20003e4c:	d029      	beq.n	20003ea2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
20003e4e:	68fb      	ldr	r3, [r7, #12]
20003e50:	681b      	ldr	r3, [r3, #0]
20003e52:	4a55      	ldr	r2, [pc, #340]	; (20003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
20003e54:	4293      	cmp	r3, r2
20003e56:	d022      	beq.n	20003e9e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
20003e58:	68fb      	ldr	r3, [r7, #12]
20003e5a:	681b      	ldr	r3, [r3, #0]
20003e5c:	4a53      	ldr	r2, [pc, #332]	; (20003fac <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
20003e5e:	4293      	cmp	r3, r2
20003e60:	d01a      	beq.n	20003e98 <HAL_DMAEx_MultiBufferStart_IT+0xf40>
20003e62:	68fb      	ldr	r3, [r7, #12]
20003e64:	681b      	ldr	r3, [r3, #0]
20003e66:	4a52      	ldr	r2, [pc, #328]	; (20003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
20003e68:	4293      	cmp	r3, r2
20003e6a:	d012      	beq.n	20003e92 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
20003e6c:	68fb      	ldr	r3, [r7, #12]
20003e6e:	681b      	ldr	r3, [r3, #0]
20003e70:	4a50      	ldr	r2, [pc, #320]	; (20003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
20003e72:	4293      	cmp	r3, r2
20003e74:	d00a      	beq.n	20003e8c <HAL_DMAEx_MultiBufferStart_IT+0xf34>
20003e76:	68fb      	ldr	r3, [r7, #12]
20003e78:	681b      	ldr	r3, [r3, #0]
20003e7a:	4a4f      	ldr	r2, [pc, #316]	; (20003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
20003e7c:	4293      	cmp	r3, r2
20003e7e:	d102      	bne.n	20003e86 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
20003e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003e84:	e01a      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003e86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20003e8a:	e017      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003e90:	e014      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003e92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003e96:	e011      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003e98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003e9c:	e00e      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003e9e:	2340      	movs	r3, #64	; 0x40
20003ea0:	e00c      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003ea2:	2340      	movs	r3, #64	; 0x40
20003ea4:	e00a      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003ea6:	2340      	movs	r3, #64	; 0x40
20003ea8:	e008      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003eaa:	2340      	movs	r3, #64	; 0x40
20003eac:	e006      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003eae:	2301      	movs	r3, #1
20003eb0:	e004      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003eb2:	2301      	movs	r3, #1
20003eb4:	e002      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003eb6:	2301      	movs	r3, #1
20003eb8:	e000      	b.n	20003ebc <HAL_DMAEx_MultiBufferStart_IT+0xf64>
20003eba:	2301      	movs	r3, #1
20003ebc:	4a40      	ldr	r2, [pc, #256]	; (20003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
20003ebe:	60d3      	str	r3, [r2, #12]
20003ec0:	e141      	b.n	20004146 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
20003ec2:	68fb      	ldr	r3, [r7, #12]
20003ec4:	681b      	ldr	r3, [r3, #0]
20003ec6:	461a      	mov	r2, r3
20003ec8:	4b3e      	ldr	r3, [pc, #248]	; (20003fc4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
20003eca:	429a      	cmp	r2, r3
20003ecc:	d97c      	bls.n	20003fc8 <HAL_DMAEx_MultiBufferStart_IT+0x1070>
20003ece:	68fb      	ldr	r3, [r7, #12]
20003ed0:	681b      	ldr	r3, [r3, #0]
20003ed2:	4a2e      	ldr	r2, [pc, #184]	; (20003f8c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
20003ed4:	4293      	cmp	r3, r2
20003ed6:	d053      	beq.n	20003f80 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
20003ed8:	68fb      	ldr	r3, [r7, #12]
20003eda:	681b      	ldr	r3, [r3, #0]
20003edc:	4a2c      	ldr	r2, [pc, #176]	; (20003f90 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
20003ede:	4293      	cmp	r3, r2
20003ee0:	d04c      	beq.n	20003f7c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
20003ee2:	68fb      	ldr	r3, [r7, #12]
20003ee4:	681b      	ldr	r3, [r3, #0]
20003ee6:	4a2b      	ldr	r2, [pc, #172]	; (20003f94 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
20003ee8:	4293      	cmp	r3, r2
20003eea:	d045      	beq.n	20003f78 <HAL_DMAEx_MultiBufferStart_IT+0x1020>
20003eec:	68fb      	ldr	r3, [r7, #12]
20003eee:	681b      	ldr	r3, [r3, #0]
20003ef0:	4a29      	ldr	r2, [pc, #164]	; (20003f98 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
20003ef2:	4293      	cmp	r3, r2
20003ef4:	d03e      	beq.n	20003f74 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
20003ef6:	68fb      	ldr	r3, [r7, #12]
20003ef8:	681b      	ldr	r3, [r3, #0]
20003efa:	4a28      	ldr	r2, [pc, #160]	; (20003f9c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
20003efc:	4293      	cmp	r3, r2
20003efe:	d037      	beq.n	20003f70 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
20003f00:	68fb      	ldr	r3, [r7, #12]
20003f02:	681b      	ldr	r3, [r3, #0]
20003f04:	4a26      	ldr	r2, [pc, #152]	; (20003fa0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
20003f06:	4293      	cmp	r3, r2
20003f08:	d030      	beq.n	20003f6c <HAL_DMAEx_MultiBufferStart_IT+0x1014>
20003f0a:	68fb      	ldr	r3, [r7, #12]
20003f0c:	681b      	ldr	r3, [r3, #0]
20003f0e:	4a25      	ldr	r2, [pc, #148]	; (20003fa4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
20003f10:	4293      	cmp	r3, r2
20003f12:	d029      	beq.n	20003f68 <HAL_DMAEx_MultiBufferStart_IT+0x1010>
20003f14:	68fb      	ldr	r3, [r7, #12]
20003f16:	681b      	ldr	r3, [r3, #0]
20003f18:	4a23      	ldr	r2, [pc, #140]	; (20003fa8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
20003f1a:	4293      	cmp	r3, r2
20003f1c:	d022      	beq.n	20003f64 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
20003f1e:	68fb      	ldr	r3, [r7, #12]
20003f20:	681b      	ldr	r3, [r3, #0]
20003f22:	4a22      	ldr	r2, [pc, #136]	; (20003fac <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
20003f24:	4293      	cmp	r3, r2
20003f26:	d01a      	beq.n	20003f5e <HAL_DMAEx_MultiBufferStart_IT+0x1006>
20003f28:	68fb      	ldr	r3, [r7, #12]
20003f2a:	681b      	ldr	r3, [r3, #0]
20003f2c:	4a20      	ldr	r2, [pc, #128]	; (20003fb0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
20003f2e:	4293      	cmp	r3, r2
20003f30:	d012      	beq.n	20003f58 <HAL_DMAEx_MultiBufferStart_IT+0x1000>
20003f32:	68fb      	ldr	r3, [r7, #12]
20003f34:	681b      	ldr	r3, [r3, #0]
20003f36:	4a1f      	ldr	r2, [pc, #124]	; (20003fb4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
20003f38:	4293      	cmp	r3, r2
20003f3a:	d00a      	beq.n	20003f52 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
20003f3c:	68fb      	ldr	r3, [r7, #12]
20003f3e:	681b      	ldr	r3, [r3, #0]
20003f40:	4a1d      	ldr	r2, [pc, #116]	; (20003fb8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
20003f42:	4293      	cmp	r3, r2
20003f44:	d102      	bne.n	20003f4c <HAL_DMAEx_MultiBufferStart_IT+0xff4>
20003f46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003f4a:	e01a      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20003f50:	e017      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003f56:	e014      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003f5c:	e011      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20003f62:	e00e      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f64:	2340      	movs	r3, #64	; 0x40
20003f66:	e00c      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f68:	2340      	movs	r3, #64	; 0x40
20003f6a:	e00a      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f6c:	2340      	movs	r3, #64	; 0x40
20003f6e:	e008      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f70:	2340      	movs	r3, #64	; 0x40
20003f72:	e006      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f74:	2301      	movs	r3, #1
20003f76:	e004      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f78:	2301      	movs	r3, #1
20003f7a:	e002      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f7c:	2301      	movs	r3, #1
20003f7e:	e000      	b.n	20003f82 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
20003f80:	2301      	movs	r3, #1
20003f82:	4a0f      	ldr	r2, [pc, #60]	; (20003fc0 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
20003f84:	6093      	str	r3, [r2, #8]
20003f86:	e0de      	b.n	20004146 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
20003f88:	40026000 	.word	0x40026000
20003f8c:	40026010 	.word	0x40026010
20003f90:	40026410 	.word	0x40026410
20003f94:	40026070 	.word	0x40026070
20003f98:	40026470 	.word	0x40026470
20003f9c:	40026028 	.word	0x40026028
20003fa0:	40026428 	.word	0x40026428
20003fa4:	40026088 	.word	0x40026088
20003fa8:	40026488 	.word	0x40026488
20003fac:	40026040 	.word	0x40026040
20003fb0:	40026440 	.word	0x40026440
20003fb4:	400260a0 	.word	0x400260a0
20003fb8:	400264a0 	.word	0x400264a0
20003fbc:	40026458 	.word	0x40026458
20003fc0:	40026400 	.word	0x40026400
20003fc4:	400260b8 	.word	0x400260b8
20003fc8:	68fb      	ldr	r3, [r7, #12]
20003fca:	681b      	ldr	r3, [r3, #0]
20003fcc:	461a      	mov	r2, r3
20003fce:	4b78      	ldr	r3, [pc, #480]	; (200041b0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
20003fd0:	429a      	cmp	r2, r3
20003fd2:	d95c      	bls.n	2000408e <HAL_DMAEx_MultiBufferStart_IT+0x1136>
20003fd4:	68fb      	ldr	r3, [r7, #12]
20003fd6:	681b      	ldr	r3, [r3, #0]
20003fd8:	4a76      	ldr	r2, [pc, #472]	; (200041b4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
20003fda:	4293      	cmp	r3, r2
20003fdc:	d053      	beq.n	20004086 <HAL_DMAEx_MultiBufferStart_IT+0x112e>
20003fde:	68fb      	ldr	r3, [r7, #12]
20003fe0:	681b      	ldr	r3, [r3, #0]
20003fe2:	4a75      	ldr	r2, [pc, #468]	; (200041b8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
20003fe4:	4293      	cmp	r3, r2
20003fe6:	d04c      	beq.n	20004082 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
20003fe8:	68fb      	ldr	r3, [r7, #12]
20003fea:	681b      	ldr	r3, [r3, #0]
20003fec:	4a73      	ldr	r2, [pc, #460]	; (200041bc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
20003fee:	4293      	cmp	r3, r2
20003ff0:	d045      	beq.n	2000407e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
20003ff2:	68fb      	ldr	r3, [r7, #12]
20003ff4:	681b      	ldr	r3, [r3, #0]
20003ff6:	4a72      	ldr	r2, [pc, #456]	; (200041c0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
20003ff8:	4293      	cmp	r3, r2
20003ffa:	d03e      	beq.n	2000407a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
20003ffc:	68fb      	ldr	r3, [r7, #12]
20003ffe:	681b      	ldr	r3, [r3, #0]
20004000:	4a70      	ldr	r2, [pc, #448]	; (200041c4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
20004002:	4293      	cmp	r3, r2
20004004:	d037      	beq.n	20004076 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
20004006:	68fb      	ldr	r3, [r7, #12]
20004008:	681b      	ldr	r3, [r3, #0]
2000400a:	4a6f      	ldr	r2, [pc, #444]	; (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
2000400c:	4293      	cmp	r3, r2
2000400e:	d030      	beq.n	20004072 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
20004010:	68fb      	ldr	r3, [r7, #12]
20004012:	681b      	ldr	r3, [r3, #0]
20004014:	4a6d      	ldr	r2, [pc, #436]	; (200041cc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
20004016:	4293      	cmp	r3, r2
20004018:	d029      	beq.n	2000406e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
2000401a:	68fb      	ldr	r3, [r7, #12]
2000401c:	681b      	ldr	r3, [r3, #0]
2000401e:	4a6c      	ldr	r2, [pc, #432]	; (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
20004020:	4293      	cmp	r3, r2
20004022:	d022      	beq.n	2000406a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
20004024:	68fb      	ldr	r3, [r7, #12]
20004026:	681b      	ldr	r3, [r3, #0]
20004028:	4a6a      	ldr	r2, [pc, #424]	; (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
2000402a:	4293      	cmp	r3, r2
2000402c:	d01a      	beq.n	20004064 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
2000402e:	68fb      	ldr	r3, [r7, #12]
20004030:	681b      	ldr	r3, [r3, #0]
20004032:	4a69      	ldr	r2, [pc, #420]	; (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
20004034:	4293      	cmp	r3, r2
20004036:	d012      	beq.n	2000405e <HAL_DMAEx_MultiBufferStart_IT+0x1106>
20004038:	68fb      	ldr	r3, [r7, #12]
2000403a:	681b      	ldr	r3, [r3, #0]
2000403c:	4a67      	ldr	r2, [pc, #412]	; (200041dc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
2000403e:	4293      	cmp	r3, r2
20004040:	d00a      	beq.n	20004058 <HAL_DMAEx_MultiBufferStart_IT+0x1100>
20004042:	68fb      	ldr	r3, [r7, #12]
20004044:	681b      	ldr	r3, [r3, #0]
20004046:	4a66      	ldr	r2, [pc, #408]	; (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
20004048:	4293      	cmp	r3, r2
2000404a:	d102      	bne.n	20004052 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
2000404c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004050:	e01a      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20004052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004056:	e017      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20004058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000405c:	e014      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
2000405e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004062:	e011      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20004064:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004068:	e00e      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
2000406a:	2340      	movs	r3, #64	; 0x40
2000406c:	e00c      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
2000406e:	2340      	movs	r3, #64	; 0x40
20004070:	e00a      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20004072:	2340      	movs	r3, #64	; 0x40
20004074:	e008      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20004076:	2340      	movs	r3, #64	; 0x40
20004078:	e006      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
2000407a:	2301      	movs	r3, #1
2000407c:	e004      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
2000407e:	2301      	movs	r3, #1
20004080:	e002      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20004082:	2301      	movs	r3, #1
20004084:	e000      	b.n	20004088 <HAL_DMAEx_MultiBufferStart_IT+0x1130>
20004086:	2301      	movs	r3, #1
20004088:	4a56      	ldr	r2, [pc, #344]	; (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
2000408a:	60d3      	str	r3, [r2, #12]
2000408c:	e05b      	b.n	20004146 <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
2000408e:	68fb      	ldr	r3, [r7, #12]
20004090:	681b      	ldr	r3, [r3, #0]
20004092:	4a48      	ldr	r2, [pc, #288]	; (200041b4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
20004094:	4293      	cmp	r3, r2
20004096:	d053      	beq.n	20004140 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
20004098:	68fb      	ldr	r3, [r7, #12]
2000409a:	681b      	ldr	r3, [r3, #0]
2000409c:	4a46      	ldr	r2, [pc, #280]	; (200041b8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
2000409e:	4293      	cmp	r3, r2
200040a0:	d04c      	beq.n	2000413c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
200040a2:	68fb      	ldr	r3, [r7, #12]
200040a4:	681b      	ldr	r3, [r3, #0]
200040a6:	4a45      	ldr	r2, [pc, #276]	; (200041bc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
200040a8:	4293      	cmp	r3, r2
200040aa:	d045      	beq.n	20004138 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
200040ac:	68fb      	ldr	r3, [r7, #12]
200040ae:	681b      	ldr	r3, [r3, #0]
200040b0:	4a43      	ldr	r2, [pc, #268]	; (200041c0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
200040b2:	4293      	cmp	r3, r2
200040b4:	d03e      	beq.n	20004134 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
200040b6:	68fb      	ldr	r3, [r7, #12]
200040b8:	681b      	ldr	r3, [r3, #0]
200040ba:	4a42      	ldr	r2, [pc, #264]	; (200041c4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
200040bc:	4293      	cmp	r3, r2
200040be:	d037      	beq.n	20004130 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
200040c0:	68fb      	ldr	r3, [r7, #12]
200040c2:	681b      	ldr	r3, [r3, #0]
200040c4:	4a40      	ldr	r2, [pc, #256]	; (200041c8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
200040c6:	4293      	cmp	r3, r2
200040c8:	d030      	beq.n	2000412c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
200040ca:	68fb      	ldr	r3, [r7, #12]
200040cc:	681b      	ldr	r3, [r3, #0]
200040ce:	4a3f      	ldr	r2, [pc, #252]	; (200041cc <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
200040d0:	4293      	cmp	r3, r2
200040d2:	d029      	beq.n	20004128 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
200040d4:	68fb      	ldr	r3, [r7, #12]
200040d6:	681b      	ldr	r3, [r3, #0]
200040d8:	4a3d      	ldr	r2, [pc, #244]	; (200041d0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
200040da:	4293      	cmp	r3, r2
200040dc:	d022      	beq.n	20004124 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
200040de:	68fb      	ldr	r3, [r7, #12]
200040e0:	681b      	ldr	r3, [r3, #0]
200040e2:	4a3c      	ldr	r2, [pc, #240]	; (200041d4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
200040e4:	4293      	cmp	r3, r2
200040e6:	d01a      	beq.n	2000411e <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
200040e8:	68fb      	ldr	r3, [r7, #12]
200040ea:	681b      	ldr	r3, [r3, #0]
200040ec:	4a3a      	ldr	r2, [pc, #232]	; (200041d8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
200040ee:	4293      	cmp	r3, r2
200040f0:	d012      	beq.n	20004118 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
200040f2:	68fb      	ldr	r3, [r7, #12]
200040f4:	681b      	ldr	r3, [r3, #0]
200040f6:	4a39      	ldr	r2, [pc, #228]	; (200041dc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
200040f8:	4293      	cmp	r3, r2
200040fa:	d00a      	beq.n	20004112 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
200040fc:	68fb      	ldr	r3, [r7, #12]
200040fe:	681b      	ldr	r3, [r3, #0]
20004100:	4a37      	ldr	r2, [pc, #220]	; (200041e0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
20004102:	4293      	cmp	r3, r2
20004104:	d102      	bne.n	2000410c <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
20004106:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000410a:	e01a      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2000410c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
20004110:	e017      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004116:	e014      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000411c:	e011      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2000411e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
20004122:	e00e      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004124:	2340      	movs	r3, #64	; 0x40
20004126:	e00c      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004128:	2340      	movs	r3, #64	; 0x40
2000412a:	e00a      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2000412c:	2340      	movs	r3, #64	; 0x40
2000412e:	e008      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004130:	2340      	movs	r3, #64	; 0x40
20004132:	e006      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004134:	2301      	movs	r3, #1
20004136:	e004      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004138:	2301      	movs	r3, #1
2000413a:	e002      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
2000413c:	2301      	movs	r3, #1
2000413e:	e000      	b.n	20004142 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
20004140:	2301      	movs	r3, #1
20004142:	4a28      	ldr	r2, [pc, #160]	; (200041e4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
20004144:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
20004146:	68fb      	ldr	r3, [r7, #12]
20004148:	681b      	ldr	r3, [r3, #0]
2000414a:	681a      	ldr	r2, [r3, #0]
2000414c:	68fb      	ldr	r3, [r7, #12]
2000414e:	681b      	ldr	r3, [r3, #0]
20004150:	f042 0216 	orr.w	r2, r2, #22
20004154:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
20004156:	68fb      	ldr	r3, [r7, #12]
20004158:	681b      	ldr	r3, [r3, #0]
2000415a:	695a      	ldr	r2, [r3, #20]
2000415c:	68fb      	ldr	r3, [r7, #12]
2000415e:	681b      	ldr	r3, [r3, #0]
20004160:	f042 0280 	orr.w	r2, r2, #128	; 0x80
20004164:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
20004166:	68fb      	ldr	r3, [r7, #12]
20004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000416a:	2b00      	cmp	r3, #0
2000416c:	d103      	bne.n	20004176 <HAL_DMAEx_MultiBufferStart_IT+0x121e>
2000416e:	68fb      	ldr	r3, [r7, #12]
20004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20004172:	2b00      	cmp	r3, #0
20004174:	d007      	beq.n	20004186 <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
20004176:	68fb      	ldr	r3, [r7, #12]
20004178:	681b      	ldr	r3, [r3, #0]
2000417a:	681a      	ldr	r2, [r3, #0]
2000417c:	68fb      	ldr	r3, [r7, #12]
2000417e:	681b      	ldr	r3, [r3, #0]
20004180:	f042 0208 	orr.w	r2, r2, #8
20004184:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
20004186:	68fb      	ldr	r3, [r7, #12]
20004188:	681b      	ldr	r3, [r3, #0]
2000418a:	681a      	ldr	r2, [r3, #0]
2000418c:	68fb      	ldr	r3, [r7, #12]
2000418e:	681b      	ldr	r3, [r3, #0]
20004190:	f042 0201 	orr.w	r2, r2, #1
20004194:	601a      	str	r2, [r3, #0]
20004196:	e005      	b.n	200041a4 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
20004198:	68fb      	ldr	r3, [r7, #12]
2000419a:	2200      	movs	r2, #0
2000419c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
200041a0:	2302      	movs	r3, #2
200041a2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
200041a4:	7dfb      	ldrb	r3, [r7, #23]
}
200041a6:	4618      	mov	r0, r3
200041a8:	3718      	adds	r7, #24
200041aa:	46bd      	mov	sp, r7
200041ac:	bd80      	pop	{r7, pc}
200041ae:	bf00      	nop
200041b0:	40026058 	.word	0x40026058
200041b4:	40026010 	.word	0x40026010
200041b8:	40026410 	.word	0x40026410
200041bc:	40026070 	.word	0x40026070
200041c0:	40026470 	.word	0x40026470
200041c4:	40026028 	.word	0x40026028
200041c8:	40026428 	.word	0x40026428
200041cc:	40026088 	.word	0x40026088
200041d0:	40026488 	.word	0x40026488
200041d4:	40026040 	.word	0x40026040
200041d8:	40026440 	.word	0x40026440
200041dc:	400260a0 	.word	0x400260a0
200041e0:	400264a0 	.word	0x400264a0
200041e4:	40026000 	.word	0x40026000

200041e8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
200041e8:	b480      	push	{r7}
200041ea:	b085      	sub	sp, #20
200041ec:	af00      	add	r7, sp, #0
200041ee:	60f8      	str	r0, [r7, #12]
200041f0:	60b9      	str	r1, [r7, #8]
200041f2:	4613      	mov	r3, r2
200041f4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
200041f6:	79fb      	ldrb	r3, [r7, #7]
200041f8:	2b00      	cmp	r3, #0
200041fa:	d104      	bne.n	20004206 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
200041fc:	68fb      	ldr	r3, [r7, #12]
200041fe:	681b      	ldr	r3, [r3, #0]
20004200:	68ba      	ldr	r2, [r7, #8]
20004202:	60da      	str	r2, [r3, #12]
20004204:	e003      	b.n	2000420e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
20004206:	68fb      	ldr	r3, [r7, #12]
20004208:	681b      	ldr	r3, [r3, #0]
2000420a:	68ba      	ldr	r2, [r7, #8]
2000420c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
2000420e:	2300      	movs	r3, #0
}
20004210:	4618      	mov	r0, r3
20004212:	3714      	adds	r7, #20
20004214:	46bd      	mov	sp, r7
20004216:	f85d 7b04 	ldr.w	r7, [sp], #4
2000421a:	4770      	bx	lr

2000421c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
2000421c:	b480      	push	{r7}
2000421e:	b085      	sub	sp, #20
20004220:	af00      	add	r7, sp, #0
20004222:	60f8      	str	r0, [r7, #12]
20004224:	60b9      	str	r1, [r7, #8]
20004226:	607a      	str	r2, [r7, #4]
20004228:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
2000422a:	68fb      	ldr	r3, [r7, #12]
2000422c:	681b      	ldr	r3, [r3, #0]
2000422e:	683a      	ldr	r2, [r7, #0]
20004230:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
20004232:	68fb      	ldr	r3, [r7, #12]
20004234:	689b      	ldr	r3, [r3, #8]
20004236:	2b40      	cmp	r3, #64	; 0x40
20004238:	d108      	bne.n	2000424c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
2000423a:	68fb      	ldr	r3, [r7, #12]
2000423c:	681b      	ldr	r3, [r3, #0]
2000423e:	687a      	ldr	r2, [r7, #4]
20004240:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
20004242:	68fb      	ldr	r3, [r7, #12]
20004244:	681b      	ldr	r3, [r3, #0]
20004246:	68ba      	ldr	r2, [r7, #8]
20004248:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
2000424a:	e007      	b.n	2000425c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
2000424c:	68fb      	ldr	r3, [r7, #12]
2000424e:	681b      	ldr	r3, [r3, #0]
20004250:	68ba      	ldr	r2, [r7, #8]
20004252:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
20004254:	68fb      	ldr	r3, [r7, #12]
20004256:	681b      	ldr	r3, [r3, #0]
20004258:	687a      	ldr	r2, [r7, #4]
2000425a:	60da      	str	r2, [r3, #12]
}
2000425c:	bf00      	nop
2000425e:	3714      	adds	r7, #20
20004260:	46bd      	mov	sp, r7
20004262:	f85d 7b04 	ldr.w	r7, [sp], #4
20004266:	4770      	bx	lr

20004268 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
20004268:	b480      	push	{r7}
2000426a:	b087      	sub	sp, #28
2000426c:	af00      	add	r7, sp, #0
2000426e:	6078      	str	r0, [r7, #4]
20004270:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
20004272:	687b      	ldr	r3, [r7, #4]
20004274:	2b00      	cmp	r3, #0
20004276:	d002      	beq.n	2000427e <HAL_EXTI_SetConfigLine+0x16>
20004278:	683b      	ldr	r3, [r7, #0]
2000427a:	2b00      	cmp	r3, #0
2000427c:	d101      	bne.n	20004282 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
2000427e:	2301      	movs	r3, #1
20004280:	e08f      	b.n	200043a2 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
20004282:	683b      	ldr	r3, [r7, #0]
20004284:	681a      	ldr	r2, [r3, #0]
20004286:	687b      	ldr	r3, [r7, #4]
20004288:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
2000428a:	683b      	ldr	r3, [r7, #0]
2000428c:	681b      	ldr	r3, [r3, #0]
2000428e:	f003 031f 	and.w	r3, r3, #31
20004292:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004294:	2201      	movs	r2, #1
20004296:	697b      	ldr	r3, [r7, #20]
20004298:	fa02 f303 	lsl.w	r3, r2, r3
2000429c:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
2000429e:	683b      	ldr	r3, [r7, #0]
200042a0:	681b      	ldr	r3, [r3, #0]
200042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200042a6:	2b00      	cmp	r3, #0
200042a8:	d052      	beq.n	20004350 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
200042aa:	683b      	ldr	r3, [r7, #0]
200042ac:	689b      	ldr	r3, [r3, #8]
200042ae:	f003 0301 	and.w	r3, r3, #1
200042b2:	2b00      	cmp	r3, #0
200042b4:	d006      	beq.n	200042c4 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
200042b6:	4b3e      	ldr	r3, [pc, #248]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042b8:	689a      	ldr	r2, [r3, #8]
200042ba:	493d      	ldr	r1, [pc, #244]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042bc:	693b      	ldr	r3, [r7, #16]
200042be:	4313      	orrs	r3, r2
200042c0:	608b      	str	r3, [r1, #8]
200042c2:	e006      	b.n	200042d2 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
200042c4:	4b3a      	ldr	r3, [pc, #232]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042c6:	689a      	ldr	r2, [r3, #8]
200042c8:	693b      	ldr	r3, [r7, #16]
200042ca:	43db      	mvns	r3, r3
200042cc:	4938      	ldr	r1, [pc, #224]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042ce:	4013      	ands	r3, r2
200042d0:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
200042d2:	683b      	ldr	r3, [r7, #0]
200042d4:	689b      	ldr	r3, [r3, #8]
200042d6:	f003 0302 	and.w	r3, r3, #2
200042da:	2b00      	cmp	r3, #0
200042dc:	d006      	beq.n	200042ec <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
200042de:	4b34      	ldr	r3, [pc, #208]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042e0:	68da      	ldr	r2, [r3, #12]
200042e2:	4933      	ldr	r1, [pc, #204]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042e4:	693b      	ldr	r3, [r7, #16]
200042e6:	4313      	orrs	r3, r2
200042e8:	60cb      	str	r3, [r1, #12]
200042ea:	e006      	b.n	200042fa <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
200042ec:	4b30      	ldr	r3, [pc, #192]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042ee:	68da      	ldr	r2, [r3, #12]
200042f0:	693b      	ldr	r3, [r7, #16]
200042f2:	43db      	mvns	r3, r3
200042f4:	492e      	ldr	r1, [pc, #184]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
200042f6:	4013      	ands	r3, r2
200042f8:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
200042fa:	683b      	ldr	r3, [r7, #0]
200042fc:	681b      	ldr	r3, [r3, #0]
200042fe:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20004302:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20004306:	d123      	bne.n	20004350 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
20004308:	4a2a      	ldr	r2, [pc, #168]	; (200043b4 <HAL_EXTI_SetConfigLine+0x14c>)
2000430a:	697b      	ldr	r3, [r7, #20]
2000430c:	089b      	lsrs	r3, r3, #2
2000430e:	3302      	adds	r3, #2
20004310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004314:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20004316:	697b      	ldr	r3, [r7, #20]
20004318:	f003 0303 	and.w	r3, r3, #3
2000431c:	009b      	lsls	r3, r3, #2
2000431e:	220f      	movs	r2, #15
20004320:	fa02 f303 	lsl.w	r3, r2, r3
20004324:	43db      	mvns	r3, r3
20004326:	68fa      	ldr	r2, [r7, #12]
20004328:	4013      	ands	r3, r2
2000432a:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
2000432c:	683b      	ldr	r3, [r7, #0]
2000432e:	68da      	ldr	r2, [r3, #12]
20004330:	697b      	ldr	r3, [r7, #20]
20004332:	f003 0303 	and.w	r3, r3, #3
20004336:	009b      	lsls	r3, r3, #2
20004338:	fa02 f303 	lsl.w	r3, r2, r3
2000433c:	68fa      	ldr	r2, [r7, #12]
2000433e:	4313      	orrs	r3, r2
20004340:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20004342:	491c      	ldr	r1, [pc, #112]	; (200043b4 <HAL_EXTI_SetConfigLine+0x14c>)
20004344:	697b      	ldr	r3, [r7, #20]
20004346:	089b      	lsrs	r3, r3, #2
20004348:	3302      	adds	r3, #2
2000434a:	68fa      	ldr	r2, [r7, #12]
2000434c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
20004350:	683b      	ldr	r3, [r7, #0]
20004352:	685b      	ldr	r3, [r3, #4]
20004354:	f003 0301 	and.w	r3, r3, #1
20004358:	2b00      	cmp	r3, #0
2000435a:	d006      	beq.n	2000436a <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
2000435c:	4b14      	ldr	r3, [pc, #80]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
2000435e:	681a      	ldr	r2, [r3, #0]
20004360:	4913      	ldr	r1, [pc, #76]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
20004362:	693b      	ldr	r3, [r7, #16]
20004364:	4313      	orrs	r3, r2
20004366:	600b      	str	r3, [r1, #0]
20004368:	e006      	b.n	20004378 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
2000436a:	4b11      	ldr	r3, [pc, #68]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
2000436c:	681a      	ldr	r2, [r3, #0]
2000436e:	693b      	ldr	r3, [r7, #16]
20004370:	43db      	mvns	r3, r3
20004372:	490f      	ldr	r1, [pc, #60]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
20004374:	4013      	ands	r3, r2
20004376:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
20004378:	683b      	ldr	r3, [r7, #0]
2000437a:	685b      	ldr	r3, [r3, #4]
2000437c:	f003 0302 	and.w	r3, r3, #2
20004380:	2b00      	cmp	r3, #0
20004382:	d006      	beq.n	20004392 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
20004384:	4b0a      	ldr	r3, [pc, #40]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
20004386:	685a      	ldr	r2, [r3, #4]
20004388:	4909      	ldr	r1, [pc, #36]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
2000438a:	693b      	ldr	r3, [r7, #16]
2000438c:	4313      	orrs	r3, r2
2000438e:	604b      	str	r3, [r1, #4]
20004390:	e006      	b.n	200043a0 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
20004392:	4b07      	ldr	r3, [pc, #28]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
20004394:	685a      	ldr	r2, [r3, #4]
20004396:	693b      	ldr	r3, [r7, #16]
20004398:	43db      	mvns	r3, r3
2000439a:	4905      	ldr	r1, [pc, #20]	; (200043b0 <HAL_EXTI_SetConfigLine+0x148>)
2000439c:	4013      	ands	r3, r2
2000439e:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
200043a0:	2300      	movs	r3, #0
}
200043a2:	4618      	mov	r0, r3
200043a4:	371c      	adds	r7, #28
200043a6:	46bd      	mov	sp, r7
200043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
200043ac:	4770      	bx	lr
200043ae:	bf00      	nop
200043b0:	40013c00 	.word	0x40013c00
200043b4:	40013800 	.word	0x40013800

200043b8 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
200043b8:	b480      	push	{r7}
200043ba:	b087      	sub	sp, #28
200043bc:	af00      	add	r7, sp, #0
200043be:	6078      	str	r0, [r7, #4]
200043c0:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
200043c2:	687b      	ldr	r3, [r7, #4]
200043c4:	2b00      	cmp	r3, #0
200043c6:	d002      	beq.n	200043ce <HAL_EXTI_GetConfigLine+0x16>
200043c8:	683b      	ldr	r3, [r7, #0]
200043ca:	2b00      	cmp	r3, #0
200043cc:	d101      	bne.n	200043d2 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
200043ce:	2301      	movs	r3, #1
200043d0:	e06a      	b.n	200044a8 <HAL_EXTI_GetConfigLine+0xf0>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
200043d2:	687b      	ldr	r3, [r7, #4]
200043d4:	681a      	ldr	r2, [r3, #0]
200043d6:	683b      	ldr	r3, [r7, #0]
200043d8:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
200043da:	683b      	ldr	r3, [r7, #0]
200043dc:	681b      	ldr	r3, [r3, #0]
200043de:	f003 031f 	and.w	r3, r3, #31
200043e2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200043e4:	2201      	movs	r2, #1
200043e6:	697b      	ldr	r3, [r7, #20]
200043e8:	fa02 f303 	lsl.w	r3, r2, r3
200043ec:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
200043ee:	4b31      	ldr	r3, [pc, #196]	; (200044b4 <HAL_EXTI_GetConfigLine+0xfc>)
200043f0:	681a      	ldr	r2, [r3, #0]
200043f2:	693b      	ldr	r3, [r7, #16]
200043f4:	4013      	ands	r3, r2
200043f6:	2b00      	cmp	r3, #0
200043f8:	d003      	beq.n	20004402 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
200043fa:	683b      	ldr	r3, [r7, #0]
200043fc:	2201      	movs	r2, #1
200043fe:	605a      	str	r2, [r3, #4]
20004400:	e002      	b.n	20004408 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
20004402:	683b      	ldr	r3, [r7, #0]
20004404:	2200      	movs	r2, #0
20004406:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
20004408:	4b2a      	ldr	r3, [pc, #168]	; (200044b4 <HAL_EXTI_GetConfigLine+0xfc>)
2000440a:	685a      	ldr	r2, [r3, #4]
2000440c:	693b      	ldr	r3, [r7, #16]
2000440e:	4013      	ands	r3, r2
20004410:	2b00      	cmp	r3, #0
20004412:	d005      	beq.n	20004420 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
20004414:	683b      	ldr	r3, [r7, #0]
20004416:	685b      	ldr	r3, [r3, #4]
20004418:	f043 0202 	orr.w	r2, r3, #2
2000441c:	683b      	ldr	r3, [r7, #0]
2000441e:	605a      	str	r2, [r3, #4]
  }

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
20004420:	683b      	ldr	r3, [r7, #0]
20004422:	681b      	ldr	r3, [r3, #0]
20004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004428:	2b00      	cmp	r3, #0
2000442a:	d036      	beq.n	2000449a <HAL_EXTI_GetConfigLine+0xe2>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
2000442c:	4b21      	ldr	r3, [pc, #132]	; (200044b4 <HAL_EXTI_GetConfigLine+0xfc>)
2000442e:	689a      	ldr	r2, [r3, #8]
20004430:	693b      	ldr	r3, [r7, #16]
20004432:	4013      	ands	r3, r2
20004434:	2b00      	cmp	r3, #0
20004436:	d003      	beq.n	20004440 <HAL_EXTI_GetConfigLine+0x88>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
20004438:	683b      	ldr	r3, [r7, #0]
2000443a:	2201      	movs	r2, #1
2000443c:	609a      	str	r2, [r3, #8]
2000443e:	e002      	b.n	20004446 <HAL_EXTI_GetConfigLine+0x8e>
    }
    else
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
20004440:	683b      	ldr	r3, [r7, #0]
20004442:	2200      	movs	r2, #0
20004444:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
20004446:	4b1b      	ldr	r3, [pc, #108]	; (200044b4 <HAL_EXTI_GetConfigLine+0xfc>)
20004448:	68da      	ldr	r2, [r3, #12]
2000444a:	693b      	ldr	r3, [r7, #16]
2000444c:	4013      	ands	r3, r2
2000444e:	2b00      	cmp	r3, #0
20004450:	d005      	beq.n	2000445e <HAL_EXTI_GetConfigLine+0xa6>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
20004452:	683b      	ldr	r3, [r7, #0]
20004454:	689b      	ldr	r3, [r3, #8]
20004456:	f043 0202 	orr.w	r2, r3, #2
2000445a:	683b      	ldr	r3, [r7, #0]
2000445c:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
2000445e:	683b      	ldr	r3, [r7, #0]
20004460:	681b      	ldr	r3, [r3, #0]
20004462:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
20004466:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
2000446a:	d112      	bne.n	20004492 <HAL_EXTI_GetConfigLine+0xda>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
2000446c:	4a12      	ldr	r2, [pc, #72]	; (200044b8 <HAL_EXTI_GetConfigLine+0x100>)
2000446e:	697b      	ldr	r3, [r7, #20]
20004470:	089b      	lsrs	r3, r3, #2
20004472:	3302      	adds	r3, #2
20004474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004478:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
2000447a:	697b      	ldr	r3, [r7, #20]
2000447c:	43db      	mvns	r3, r3
2000447e:	f003 0303 	and.w	r3, r3, #3
20004482:	009b      	lsls	r3, r3, #2
20004484:	68fa      	ldr	r2, [r7, #12]
20004486:	fa02 f303 	lsl.w	r3, r2, r3
2000448a:	0e1a      	lsrs	r2, r3, #24
2000448c:	683b      	ldr	r3, [r7, #0]
2000448e:	60da      	str	r2, [r3, #12]
20004490:	e009      	b.n	200044a6 <HAL_EXTI_GetConfigLine+0xee>
    }
    else
    {
      pExtiConfig->GPIOSel = 0x00u;
20004492:	683b      	ldr	r3, [r7, #0]
20004494:	2200      	movs	r2, #0
20004496:	60da      	str	r2, [r3, #12]
20004498:	e005      	b.n	200044a6 <HAL_EXTI_GetConfigLine+0xee>
    }
  }
  else
  {
    /* No Trigger selected */
    pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
2000449a:	683b      	ldr	r3, [r7, #0]
2000449c:	2200      	movs	r2, #0
2000449e:	609a      	str	r2, [r3, #8]
    pExtiConfig->GPIOSel = 0x00u;
200044a0:	683b      	ldr	r3, [r7, #0]
200044a2:	2200      	movs	r2, #0
200044a4:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
200044a6:	2300      	movs	r3, #0
}
200044a8:	4618      	mov	r0, r3
200044aa:	371c      	adds	r7, #28
200044ac:	46bd      	mov	sp, r7
200044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
200044b2:	4770      	bx	lr
200044b4:	40013c00 	.word	0x40013c00
200044b8:	40013800 	.word	0x40013800

200044bc <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
200044bc:	b480      	push	{r7}
200044be:	b087      	sub	sp, #28
200044c0:	af00      	add	r7, sp, #0
200044c2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
200044c4:	687b      	ldr	r3, [r7, #4]
200044c6:	2b00      	cmp	r3, #0
200044c8:	d101      	bne.n	200044ce <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
200044ca:	2301      	movs	r3, #1
200044cc:	e04c      	b.n	20004568 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
200044ce:	687b      	ldr	r3, [r7, #4]
200044d0:	681b      	ldr	r3, [r3, #0]
200044d2:	f003 031f 	and.w	r3, r3, #31
200044d6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
200044d8:	2201      	movs	r2, #1
200044da:	697b      	ldr	r3, [r7, #20]
200044dc:	fa02 f303 	lsl.w	r3, r2, r3
200044e0:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
200044e2:	4b24      	ldr	r3, [pc, #144]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
200044e4:	681a      	ldr	r2, [r3, #0]
200044e6:	693b      	ldr	r3, [r7, #16]
200044e8:	43db      	mvns	r3, r3
200044ea:	4922      	ldr	r1, [pc, #136]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
200044ec:	4013      	ands	r3, r2
200044ee:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
200044f0:	4b20      	ldr	r3, [pc, #128]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
200044f2:	685a      	ldr	r2, [r3, #4]
200044f4:	693b      	ldr	r3, [r7, #16]
200044f6:	43db      	mvns	r3, r3
200044f8:	491e      	ldr	r1, [pc, #120]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
200044fa:	4013      	ands	r3, r2
200044fc:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
200044fe:	687b      	ldr	r3, [r7, #4]
20004500:	681b      	ldr	r3, [r3, #0]
20004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20004506:	2b00      	cmp	r3, #0
20004508:	d02d      	beq.n	20004566 <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
2000450a:	4b1a      	ldr	r3, [pc, #104]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
2000450c:	689a      	ldr	r2, [r3, #8]
2000450e:	693b      	ldr	r3, [r7, #16]
20004510:	43db      	mvns	r3, r3
20004512:	4918      	ldr	r1, [pc, #96]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
20004514:	4013      	ands	r3, r2
20004516:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
20004518:	4b16      	ldr	r3, [pc, #88]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
2000451a:	68da      	ldr	r2, [r3, #12]
2000451c:	693b      	ldr	r3, [r7, #16]
2000451e:	43db      	mvns	r3, r3
20004520:	4914      	ldr	r1, [pc, #80]	; (20004574 <HAL_EXTI_ClearConfigLine+0xb8>)
20004522:	4013      	ands	r3, r2
20004524:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
20004526:	687b      	ldr	r3, [r7, #4]
20004528:	681b      	ldr	r3, [r3, #0]
2000452a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
2000452e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
20004532:	d118      	bne.n	20004566 <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
20004534:	4a10      	ldr	r2, [pc, #64]	; (20004578 <HAL_EXTI_ClearConfigLine+0xbc>)
20004536:	697b      	ldr	r3, [r7, #20]
20004538:	089b      	lsrs	r3, r3, #2
2000453a:	3302      	adds	r3, #2
2000453c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20004540:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
20004542:	697b      	ldr	r3, [r7, #20]
20004544:	f003 0303 	and.w	r3, r3, #3
20004548:	009b      	lsls	r3, r3, #2
2000454a:	220f      	movs	r2, #15
2000454c:	fa02 f303 	lsl.w	r3, r2, r3
20004550:	43db      	mvns	r3, r3
20004552:	68fa      	ldr	r2, [r7, #12]
20004554:	4013      	ands	r3, r2
20004556:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
20004558:	4907      	ldr	r1, [pc, #28]	; (20004578 <HAL_EXTI_ClearConfigLine+0xbc>)
2000455a:	697b      	ldr	r3, [r7, #20]
2000455c:	089b      	lsrs	r3, r3, #2
2000455e:	3302      	adds	r3, #2
20004560:	68fa      	ldr	r2, [r7, #12]
20004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
20004566:	2300      	movs	r3, #0
}
20004568:	4618      	mov	r0, r3
2000456a:	371c      	adds	r7, #28
2000456c:	46bd      	mov	sp, r7
2000456e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004572:	4770      	bx	lr
20004574:	40013c00 	.word	0x40013c00
20004578:	40013800 	.word	0x40013800

2000457c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
2000457c:	b480      	push	{r7}
2000457e:	b087      	sub	sp, #28
20004580:	af00      	add	r7, sp, #0
20004582:	60f8      	str	r0, [r7, #12]
20004584:	460b      	mov	r3, r1
20004586:	607a      	str	r2, [r7, #4]
20004588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2000458a:	2300      	movs	r3, #0
2000458c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
2000458e:	7afb      	ldrb	r3, [r7, #11]
20004590:	2b00      	cmp	r3, #0
20004592:	d103      	bne.n	2000459c <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
20004594:	68fb      	ldr	r3, [r7, #12]
20004596:	687a      	ldr	r2, [r7, #4]
20004598:	605a      	str	r2, [r3, #4]
      break;
2000459a:	e002      	b.n	200045a2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
2000459c:	2301      	movs	r3, #1
2000459e:	75fb      	strb	r3, [r7, #23]
      break;
200045a0:	bf00      	nop
  }

  return status;
200045a2:	7dfb      	ldrb	r3, [r7, #23]
}
200045a4:	4618      	mov	r0, r3
200045a6:	371c      	adds	r7, #28
200045a8:	46bd      	mov	sp, r7
200045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
200045ae:	4770      	bx	lr

200045b0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
200045b0:	b480      	push	{r7}
200045b2:	b083      	sub	sp, #12
200045b4:	af00      	add	r7, sp, #0
200045b6:	6078      	str	r0, [r7, #4]
200045b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
200045ba:	687b      	ldr	r3, [r7, #4]
200045bc:	2b00      	cmp	r3, #0
200045be:	d101      	bne.n	200045c4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
200045c0:	2301      	movs	r3, #1
200045c2:	e003      	b.n	200045cc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
200045c4:	687b      	ldr	r3, [r7, #4]
200045c6:	683a      	ldr	r2, [r7, #0]
200045c8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
200045ca:	2300      	movs	r3, #0
  }
}
200045cc:	4618      	mov	r0, r3
200045ce:	370c      	adds	r7, #12
200045d0:	46bd      	mov	sp, r7
200045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200045d6:	4770      	bx	lr

200045d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
200045d8:	b580      	push	{r7, lr}
200045da:	b084      	sub	sp, #16
200045dc:	af00      	add	r7, sp, #0
200045de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
200045e0:	687b      	ldr	r3, [r7, #4]
200045e2:	681b      	ldr	r3, [r3, #0]
200045e4:	f003 031f 	and.w	r3, r3, #31
200045e8:	2201      	movs	r2, #1
200045ea:	fa02 f303 	lsl.w	r3, r2, r3
200045ee:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
200045f0:	4b0a      	ldr	r3, [pc, #40]	; (2000461c <HAL_EXTI_IRQHandler+0x44>)
200045f2:	695b      	ldr	r3, [r3, #20]
200045f4:	68fa      	ldr	r2, [r7, #12]
200045f6:	4013      	ands	r3, r2
200045f8:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
200045fa:	68bb      	ldr	r3, [r7, #8]
200045fc:	2b00      	cmp	r3, #0
200045fe:	d009      	beq.n	20004614 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
20004600:	4a06      	ldr	r2, [pc, #24]	; (2000461c <HAL_EXTI_IRQHandler+0x44>)
20004602:	68fb      	ldr	r3, [r7, #12]
20004604:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
20004606:	687b      	ldr	r3, [r7, #4]
20004608:	685b      	ldr	r3, [r3, #4]
2000460a:	2b00      	cmp	r3, #0
2000460c:	d002      	beq.n	20004614 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
2000460e:	687b      	ldr	r3, [r7, #4]
20004610:	685b      	ldr	r3, [r3, #4]
20004612:	4798      	blx	r3
    }
  }
}
20004614:	bf00      	nop
20004616:	3710      	adds	r7, #16
20004618:	46bd      	mov	sp, r7
2000461a:	bd80      	pop	{r7, pc}
2000461c:	40013c00 	.word	0x40013c00

20004620 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004620:	b480      	push	{r7}
20004622:	b087      	sub	sp, #28
20004624:	af00      	add	r7, sp, #0
20004626:	6078      	str	r0, [r7, #4]
20004628:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
2000462a:	687b      	ldr	r3, [r7, #4]
2000462c:	681b      	ldr	r3, [r3, #0]
2000462e:	f003 031f 	and.w	r3, r3, #31
20004632:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
20004634:	2201      	movs	r2, #1
20004636:	697b      	ldr	r3, [r7, #20]
20004638:	fa02 f303 	lsl.w	r3, r2, r3
2000463c:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
2000463e:	4b07      	ldr	r3, [pc, #28]	; (2000465c <HAL_EXTI_GetPending+0x3c>)
20004640:	695a      	ldr	r2, [r3, #20]
20004642:	693b      	ldr	r3, [r7, #16]
20004644:	401a      	ands	r2, r3
20004646:	697b      	ldr	r3, [r7, #20]
20004648:	fa22 f303 	lsr.w	r3, r2, r3
2000464c:	60fb      	str	r3, [r7, #12]
  return regval;
2000464e:	68fb      	ldr	r3, [r7, #12]
}
20004650:	4618      	mov	r0, r3
20004652:	371c      	adds	r7, #28
20004654:	46bd      	mov	sp, r7
20004656:	f85d 7b04 	ldr.w	r7, [sp], #4
2000465a:	4770      	bx	lr
2000465c:	40013c00 	.word	0x40013c00

20004660 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
20004660:	b480      	push	{r7}
20004662:	b085      	sub	sp, #20
20004664:	af00      	add	r7, sp, #0
20004666:	6078      	str	r0, [r7, #4]
20004668:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
2000466a:	687b      	ldr	r3, [r7, #4]
2000466c:	681b      	ldr	r3, [r3, #0]
2000466e:	f003 031f 	and.w	r3, r3, #31
20004672:	2201      	movs	r2, #1
20004674:	fa02 f303 	lsl.w	r3, r2, r3
20004678:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
2000467a:	4a04      	ldr	r2, [pc, #16]	; (2000468c <HAL_EXTI_ClearPending+0x2c>)
2000467c:	68fb      	ldr	r3, [r7, #12]
2000467e:	6153      	str	r3, [r2, #20]
}
20004680:	bf00      	nop
20004682:	3714      	adds	r7, #20
20004684:	46bd      	mov	sp, r7
20004686:	f85d 7b04 	ldr.w	r7, [sp], #4
2000468a:	4770      	bx	lr
2000468c:	40013c00 	.word	0x40013c00

20004690 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
20004690:	b480      	push	{r7}
20004692:	b085      	sub	sp, #20
20004694:	af00      	add	r7, sp, #0
20004696:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
20004698:	687b      	ldr	r3, [r7, #4]
2000469a:	681b      	ldr	r3, [r3, #0]
2000469c:	f003 031f 	and.w	r3, r3, #31
200046a0:	2201      	movs	r2, #1
200046a2:	fa02 f303 	lsl.w	r3, r2, r3
200046a6:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
200046a8:	4a04      	ldr	r2, [pc, #16]	; (200046bc <HAL_EXTI_GenerateSWI+0x2c>)
200046aa:	68fb      	ldr	r3, [r7, #12]
200046ac:	6113      	str	r3, [r2, #16]
}
200046ae:	bf00      	nop
200046b0:	3714      	adds	r7, #20
200046b2:	46bd      	mov	sp, r7
200046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
200046b8:	4770      	bx	lr
200046ba:	bf00      	nop
200046bc:	40013c00 	.word	0x40013c00

200046c0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
200046c0:	b580      	push	{r7, lr}
200046c2:	b086      	sub	sp, #24
200046c4:	af00      	add	r7, sp, #0
200046c6:	60f8      	str	r0, [r7, #12]
200046c8:	60b9      	str	r1, [r7, #8]
200046ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
200046ce:	2301      	movs	r3, #1
200046d0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
200046d2:	4b23      	ldr	r3, [pc, #140]	; (20004760 <HAL_FLASH_Program+0xa0>)
200046d4:	7e1b      	ldrb	r3, [r3, #24]
200046d6:	2b01      	cmp	r3, #1
200046d8:	d101      	bne.n	200046de <HAL_FLASH_Program+0x1e>
200046da:	2302      	movs	r3, #2
200046dc:	e03b      	b.n	20004756 <HAL_FLASH_Program+0x96>
200046de:	4b20      	ldr	r3, [pc, #128]	; (20004760 <HAL_FLASH_Program+0xa0>)
200046e0:	2201      	movs	r2, #1
200046e2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200046e4:	f24c 3050 	movw	r0, #50000	; 0xc350
200046e8:	f000 f9be 	bl	20004a68 <FLASH_WaitForLastOperation>
200046ec:	4603      	mov	r3, r0
200046ee:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
200046f0:	7dfb      	ldrb	r3, [r7, #23]
200046f2:	2b00      	cmp	r3, #0
200046f4:	d12b      	bne.n	2000474e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
200046f6:	68fb      	ldr	r3, [r7, #12]
200046f8:	2b00      	cmp	r3, #0
200046fa:	d105      	bne.n	20004708 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
200046fc:	783b      	ldrb	r3, [r7, #0]
200046fe:	4619      	mov	r1, r3
20004700:	68b8      	ldr	r0, [r7, #8]
20004702:	f000 fa69 	bl	20004bd8 <FLASH_Program_Byte>
20004706:	e016      	b.n	20004736 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
20004708:	68fb      	ldr	r3, [r7, #12]
2000470a:	2b01      	cmp	r3, #1
2000470c:	d105      	bne.n	2000471a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
2000470e:	883b      	ldrh	r3, [r7, #0]
20004710:	4619      	mov	r1, r3
20004712:	68b8      	ldr	r0, [r7, #8]
20004714:	f000 fa3c 	bl	20004b90 <FLASH_Program_HalfWord>
20004718:	e00d      	b.n	20004736 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
2000471a:	68fb      	ldr	r3, [r7, #12]
2000471c:	2b02      	cmp	r3, #2
2000471e:	d105      	bne.n	2000472c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
20004720:	683b      	ldr	r3, [r7, #0]
20004722:	4619      	mov	r1, r3
20004724:	68b8      	ldr	r0, [r7, #8]
20004726:	f000 fa11 	bl	20004b4c <FLASH_Program_Word>
2000472a:	e004      	b.n	20004736 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
2000472c:	e9d7 2300 	ldrd	r2, r3, [r7]
20004730:	68b8      	ldr	r0, [r7, #8]
20004732:	f000 f9d9 	bl	20004ae8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004736:	f24c 3050 	movw	r0, #50000	; 0xc350
2000473a:	f000 f995 	bl	20004a68 <FLASH_WaitForLastOperation>
2000473e:	4603      	mov	r3, r0
20004740:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
20004742:	4b08      	ldr	r3, [pc, #32]	; (20004764 <HAL_FLASH_Program+0xa4>)
20004744:	691b      	ldr	r3, [r3, #16]
20004746:	4a07      	ldr	r2, [pc, #28]	; (20004764 <HAL_FLASH_Program+0xa4>)
20004748:	f023 0301 	bic.w	r3, r3, #1
2000474c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
2000474e:	4b04      	ldr	r3, [pc, #16]	; (20004760 <HAL_FLASH_Program+0xa0>)
20004750:	2200      	movs	r2, #0
20004752:	761a      	strb	r2, [r3, #24]
  
  return status;
20004754:	7dfb      	ldrb	r3, [r7, #23]
}
20004756:	4618      	mov	r0, r3
20004758:	3718      	adds	r7, #24
2000475a:	46bd      	mov	sp, r7
2000475c:	bd80      	pop	{r7, pc}
2000475e:	bf00      	nop
20004760:	20000490 	.word	0x20000490
20004764:	40023c00 	.word	0x40023c00

20004768 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
20004768:	b580      	push	{r7, lr}
2000476a:	b086      	sub	sp, #24
2000476c:	af00      	add	r7, sp, #0
2000476e:	60f8      	str	r0, [r7, #12]
20004770:	60b9      	str	r1, [r7, #8]
20004772:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
20004776:	2300      	movs	r3, #0
20004778:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
2000477a:	4b20      	ldr	r3, [pc, #128]	; (200047fc <HAL_FLASH_Program_IT+0x94>)
2000477c:	7e1b      	ldrb	r3, [r3, #24]
2000477e:	2b01      	cmp	r3, #1
20004780:	d101      	bne.n	20004786 <HAL_FLASH_Program_IT+0x1e>
20004782:	2302      	movs	r3, #2
20004784:	e035      	b.n	200047f2 <HAL_FLASH_Program_IT+0x8a>
20004786:	4b1d      	ldr	r3, [pc, #116]	; (200047fc <HAL_FLASH_Program_IT+0x94>)
20004788:	2201      	movs	r2, #1
2000478a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
2000478c:	4b1c      	ldr	r3, [pc, #112]	; (20004800 <HAL_FLASH_Program_IT+0x98>)
2000478e:	691b      	ldr	r3, [r3, #16]
20004790:	4a1b      	ldr	r2, [pc, #108]	; (20004800 <HAL_FLASH_Program_IT+0x98>)
20004792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20004796:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20004798:	4b19      	ldr	r3, [pc, #100]	; (20004800 <HAL_FLASH_Program_IT+0x98>)
2000479a:	691b      	ldr	r3, [r3, #16]
2000479c:	4a18      	ldr	r2, [pc, #96]	; (20004800 <HAL_FLASH_Program_IT+0x98>)
2000479e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
200047a2:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
200047a4:	4b15      	ldr	r3, [pc, #84]	; (200047fc <HAL_FLASH_Program_IT+0x94>)
200047a6:	2203      	movs	r2, #3
200047a8:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
200047aa:	4a14      	ldr	r2, [pc, #80]	; (200047fc <HAL_FLASH_Program_IT+0x94>)
200047ac:	68bb      	ldr	r3, [r7, #8]
200047ae:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
200047b0:	68fb      	ldr	r3, [r7, #12]
200047b2:	2b00      	cmp	r3, #0
200047b4:	d105      	bne.n	200047c2 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
200047b6:	783b      	ldrb	r3, [r7, #0]
200047b8:	4619      	mov	r1, r3
200047ba:	68b8      	ldr	r0, [r7, #8]
200047bc:	f000 fa0c 	bl	20004bd8 <FLASH_Program_Byte>
200047c0:	e016      	b.n	200047f0 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
200047c2:	68fb      	ldr	r3, [r7, #12]
200047c4:	2b01      	cmp	r3, #1
200047c6:	d105      	bne.n	200047d4 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
200047c8:	883b      	ldrh	r3, [r7, #0]
200047ca:	4619      	mov	r1, r3
200047cc:	68b8      	ldr	r0, [r7, #8]
200047ce:	f000 f9df 	bl	20004b90 <FLASH_Program_HalfWord>
200047d2:	e00d      	b.n	200047f0 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
200047d4:	68fb      	ldr	r3, [r7, #12]
200047d6:	2b02      	cmp	r3, #2
200047d8:	d105      	bne.n	200047e6 <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
200047da:	683b      	ldr	r3, [r7, #0]
200047dc:	4619      	mov	r1, r3
200047de:	68b8      	ldr	r0, [r7, #8]
200047e0:	f000 f9b4 	bl	20004b4c <FLASH_Program_Word>
200047e4:	e004      	b.n	200047f0 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
200047e6:	e9d7 2300 	ldrd	r2, r3, [r7]
200047ea:	68b8      	ldr	r0, [r7, #8]
200047ec:	f000 f97c 	bl	20004ae8 <FLASH_Program_DoubleWord>
  }

  return status;
200047f0:	7dfb      	ldrb	r3, [r7, #23]
}
200047f2:	4618      	mov	r0, r3
200047f4:	3718      	adds	r7, #24
200047f6:	46bd      	mov	sp, r7
200047f8:	bd80      	pop	{r7, pc}
200047fa:	bf00      	nop
200047fc:	20000490 	.word	0x20000490
20004800:	40023c00 	.word	0x40023c00

20004804 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
20004804:	b580      	push	{r7, lr}
20004806:	b082      	sub	sp, #8
20004808:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
2000480a:	2300      	movs	r3, #0
2000480c:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
2000480e:	4b4b      	ldr	r3, [pc, #300]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
20004810:	68db      	ldr	r3, [r3, #12]
20004812:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
20004816:	2b00      	cmp	r3, #0
20004818:	d020      	beq.n	2000485c <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
2000481a:	4b49      	ldr	r3, [pc, #292]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
2000481c:	781b      	ldrb	r3, [r3, #0]
2000481e:	b2db      	uxtb	r3, r3
20004820:	2b01      	cmp	r3, #1
20004822:	d107      	bne.n	20004834 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
20004824:	4b46      	ldr	r3, [pc, #280]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004826:	68db      	ldr	r3, [r3, #12]
20004828:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
2000482a:	4b45      	ldr	r3, [pc, #276]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
2000482c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20004830:	60da      	str	r2, [r3, #12]
20004832:	e00b      	b.n	2000484c <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
20004834:	4b42      	ldr	r3, [pc, #264]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004836:	781b      	ldrb	r3, [r3, #0]
20004838:	b2db      	uxtb	r3, r3
2000483a:	2b02      	cmp	r3, #2
2000483c:	d103      	bne.n	20004846 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
2000483e:	4b40      	ldr	r3, [pc, #256]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004840:	691b      	ldr	r3, [r3, #16]
20004842:	607b      	str	r3, [r7, #4]
20004844:	e002      	b.n	2000484c <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
20004846:	4b3e      	ldr	r3, [pc, #248]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004848:	695b      	ldr	r3, [r3, #20]
2000484a:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
2000484c:	f000 f9e6 	bl	20004c1c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
20004850:	6878      	ldr	r0, [r7, #4]
20004852:	f000 f881 	bl	20004958 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
20004856:	4b3a      	ldr	r3, [pc, #232]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004858:	2200      	movs	r2, #0
2000485a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
2000485c:	4b37      	ldr	r3, [pc, #220]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
2000485e:	68db      	ldr	r3, [r3, #12]
20004860:	f003 0301 	and.w	r3, r3, #1
20004864:	2b00      	cmp	r3, #0
20004866:	d04a      	beq.n	200048fe <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004868:	4b34      	ldr	r3, [pc, #208]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
2000486a:	2201      	movs	r2, #1
2000486c:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
2000486e:	4b34      	ldr	r3, [pc, #208]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004870:	781b      	ldrb	r3, [r3, #0]
20004872:	b2db      	uxtb	r3, r3
20004874:	2b01      	cmp	r3, #1
20004876:	d12d      	bne.n	200048d4 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
20004878:	4b31      	ldr	r3, [pc, #196]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
2000487a:	685b      	ldr	r3, [r3, #4]
2000487c:	3b01      	subs	r3, #1
2000487e:	4a30      	ldr	r2, [pc, #192]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004880:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
20004882:	4b2f      	ldr	r3, [pc, #188]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004884:	685b      	ldr	r3, [r3, #4]
20004886:	2b00      	cmp	r3, #0
20004888:	d015      	beq.n	200048b6 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
2000488a:	4b2d      	ldr	r3, [pc, #180]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
2000488c:	68db      	ldr	r3, [r3, #12]
2000488e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
20004890:	6878      	ldr	r0, [r7, #4]
20004892:	f000 f857 	bl	20004944 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
20004896:	4b2a      	ldr	r3, [pc, #168]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004898:	68db      	ldr	r3, [r3, #12]
2000489a:	3301      	adds	r3, #1
2000489c:	4a28      	ldr	r2, [pc, #160]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
2000489e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
200048a0:	4b27      	ldr	r3, [pc, #156]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048a2:	68db      	ldr	r3, [r3, #12]
200048a4:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
200048a6:	4b26      	ldr	r3, [pc, #152]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048a8:	7a1b      	ldrb	r3, [r3, #8]
200048aa:	b2db      	uxtb	r3, r3
200048ac:	4619      	mov	r1, r3
200048ae:	6878      	ldr	r0, [r7, #4]
200048b0:	f000 fb86 	bl	20004fc0 <FLASH_Erase_Sector>
200048b4:	e023      	b.n	200048fe <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
200048b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
200048ba:	607b      	str	r3, [r7, #4]
200048bc:	4a20      	ldr	r2, [pc, #128]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048be:	687b      	ldr	r3, [r7, #4]
200048c0:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
200048c2:	4b1f      	ldr	r3, [pc, #124]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048c4:	2200      	movs	r2, #0
200048c6:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
200048c8:	f000 fcb8 	bl	2000523c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
200048cc:	6878      	ldr	r0, [r7, #4]
200048ce:	f000 f839 	bl	20004944 <HAL_FLASH_EndOfOperationCallback>
200048d2:	e014      	b.n	200048fe <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
200048d4:	4b1a      	ldr	r3, [pc, #104]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048d6:	781b      	ldrb	r3, [r3, #0]
200048d8:	b2db      	uxtb	r3, r3
200048da:	2b02      	cmp	r3, #2
200048dc:	d107      	bne.n	200048ee <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
200048de:	f000 fcad 	bl	2000523c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
200048e2:	4b17      	ldr	r3, [pc, #92]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048e4:	691b      	ldr	r3, [r3, #16]
200048e6:	4618      	mov	r0, r3
200048e8:	f000 f82c 	bl	20004944 <HAL_FLASH_EndOfOperationCallback>
200048ec:	e004      	b.n	200048f8 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
200048ee:	4b14      	ldr	r3, [pc, #80]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048f0:	695b      	ldr	r3, [r3, #20]
200048f2:	4618      	mov	r0, r3
200048f4:	f000 f826 	bl	20004944 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
200048f8:	4b11      	ldr	r3, [pc, #68]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
200048fa:	2200      	movs	r2, #0
200048fc:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
200048fe:	4b10      	ldr	r3, [pc, #64]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
20004900:	781b      	ldrb	r3, [r3, #0]
20004902:	b2db      	uxtb	r3, r3
20004904:	2b00      	cmp	r3, #0
20004906:	d114      	bne.n	20004932 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
20004908:	4b0c      	ldr	r3, [pc, #48]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
2000490a:	691b      	ldr	r3, [r3, #16]
2000490c:	4a0b      	ldr	r2, [pc, #44]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
2000490e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
20004912:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
20004914:	4b09      	ldr	r3, [pc, #36]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
20004916:	691b      	ldr	r3, [r3, #16]
20004918:	4a08      	ldr	r2, [pc, #32]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
2000491a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2000491e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
20004920:	4b06      	ldr	r3, [pc, #24]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
20004922:	691b      	ldr	r3, [r3, #16]
20004924:	4a05      	ldr	r2, [pc, #20]	; (2000493c <HAL_FLASH_IRQHandler+0x138>)
20004926:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
2000492a:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
2000492c:	4b04      	ldr	r3, [pc, #16]	; (20004940 <HAL_FLASH_IRQHandler+0x13c>)
2000492e:	2200      	movs	r2, #0
20004930:	761a      	strb	r2, [r3, #24]
  }
}
20004932:	bf00      	nop
20004934:	3708      	adds	r7, #8
20004936:	46bd      	mov	sp, r7
20004938:	bd80      	pop	{r7, pc}
2000493a:	bf00      	nop
2000493c:	40023c00 	.word	0x40023c00
20004940:	20000490 	.word	0x20000490

20004944 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
20004944:	b480      	push	{r7}
20004946:	b083      	sub	sp, #12
20004948:	af00      	add	r7, sp, #0
2000494a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
2000494c:	bf00      	nop
2000494e:	370c      	adds	r7, #12
20004950:	46bd      	mov	sp, r7
20004952:	f85d 7b04 	ldr.w	r7, [sp], #4
20004956:	4770      	bx	lr

20004958 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
20004958:	b480      	push	{r7}
2000495a:	b083      	sub	sp, #12
2000495c:	af00      	add	r7, sp, #0
2000495e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
20004960:	bf00      	nop
20004962:	370c      	adds	r7, #12
20004964:	46bd      	mov	sp, r7
20004966:	f85d 7b04 	ldr.w	r7, [sp], #4
2000496a:	4770      	bx	lr

2000496c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
2000496c:	b480      	push	{r7}
2000496e:	b083      	sub	sp, #12
20004970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
20004972:	2300      	movs	r3, #0
20004974:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
20004976:	4b0b      	ldr	r3, [pc, #44]	; (200049a4 <HAL_FLASH_Unlock+0x38>)
20004978:	691b      	ldr	r3, [r3, #16]
2000497a:	2b00      	cmp	r3, #0
2000497c:	da0b      	bge.n	20004996 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
2000497e:	4b09      	ldr	r3, [pc, #36]	; (200049a4 <HAL_FLASH_Unlock+0x38>)
20004980:	4a09      	ldr	r2, [pc, #36]	; (200049a8 <HAL_FLASH_Unlock+0x3c>)
20004982:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
20004984:	4b07      	ldr	r3, [pc, #28]	; (200049a4 <HAL_FLASH_Unlock+0x38>)
20004986:	4a09      	ldr	r2, [pc, #36]	; (200049ac <HAL_FLASH_Unlock+0x40>)
20004988:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
2000498a:	4b06      	ldr	r3, [pc, #24]	; (200049a4 <HAL_FLASH_Unlock+0x38>)
2000498c:	691b      	ldr	r3, [r3, #16]
2000498e:	2b00      	cmp	r3, #0
20004990:	da01      	bge.n	20004996 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
20004992:	2301      	movs	r3, #1
20004994:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
20004996:	79fb      	ldrb	r3, [r7, #7]
}
20004998:	4618      	mov	r0, r3
2000499a:	370c      	adds	r7, #12
2000499c:	46bd      	mov	sp, r7
2000499e:	f85d 7b04 	ldr.w	r7, [sp], #4
200049a2:	4770      	bx	lr
200049a4:	40023c00 	.word	0x40023c00
200049a8:	45670123 	.word	0x45670123
200049ac:	cdef89ab 	.word	0xcdef89ab

200049b0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
200049b0:	b480      	push	{r7}
200049b2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
200049b4:	4b05      	ldr	r3, [pc, #20]	; (200049cc <HAL_FLASH_Lock+0x1c>)
200049b6:	691b      	ldr	r3, [r3, #16]
200049b8:	4a04      	ldr	r2, [pc, #16]	; (200049cc <HAL_FLASH_Lock+0x1c>)
200049ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
200049be:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
200049c0:	2300      	movs	r3, #0
}
200049c2:	4618      	mov	r0, r3
200049c4:	46bd      	mov	sp, r7
200049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200049ca:	4770      	bx	lr
200049cc:	40023c00 	.word	0x40023c00

200049d0 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
200049d0:	b480      	push	{r7}
200049d2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
200049d4:	4b09      	ldr	r3, [pc, #36]	; (200049fc <HAL_FLASH_OB_Unlock+0x2c>)
200049d6:	695b      	ldr	r3, [r3, #20]
200049d8:	f003 0301 	and.w	r3, r3, #1
200049dc:	2b00      	cmp	r3, #0
200049de:	d007      	beq.n	200049f0 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
200049e0:	4b06      	ldr	r3, [pc, #24]	; (200049fc <HAL_FLASH_OB_Unlock+0x2c>)
200049e2:	4a07      	ldr	r2, [pc, #28]	; (20004a00 <HAL_FLASH_OB_Unlock+0x30>)
200049e4:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
200049e6:	4b05      	ldr	r3, [pc, #20]	; (200049fc <HAL_FLASH_OB_Unlock+0x2c>)
200049e8:	4a06      	ldr	r2, [pc, #24]	; (20004a04 <HAL_FLASH_OB_Unlock+0x34>)
200049ea:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
200049ec:	2300      	movs	r3, #0
200049ee:	e000      	b.n	200049f2 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
200049f0:	2301      	movs	r3, #1
}
200049f2:	4618      	mov	r0, r3
200049f4:	46bd      	mov	sp, r7
200049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
200049fa:	4770      	bx	lr
200049fc:	40023c00 	.word	0x40023c00
20004a00:	08192a3b 	.word	0x08192a3b
20004a04:	4c5d6e7f 	.word	0x4c5d6e7f

20004a08 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
20004a08:	b480      	push	{r7}
20004a0a:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
20004a0c:	4b05      	ldr	r3, [pc, #20]	; (20004a24 <HAL_FLASH_OB_Lock+0x1c>)
20004a0e:	695b      	ldr	r3, [r3, #20]
20004a10:	4a04      	ldr	r2, [pc, #16]	; (20004a24 <HAL_FLASH_OB_Lock+0x1c>)
20004a12:	f043 0301 	orr.w	r3, r3, #1
20004a16:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
20004a18:	2300      	movs	r3, #0
}
20004a1a:	4618      	mov	r0, r3
20004a1c:	46bd      	mov	sp, r7
20004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a22:	4770      	bx	lr
20004a24:	40023c00 	.word	0x40023c00

20004a28 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
20004a28:	b580      	push	{r7, lr}
20004a2a:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
20004a2c:	4b07      	ldr	r3, [pc, #28]	; (20004a4c <HAL_FLASH_OB_Launch+0x24>)
20004a2e:	781b      	ldrb	r3, [r3, #0]
20004a30:	b2db      	uxtb	r3, r3
20004a32:	4a06      	ldr	r2, [pc, #24]	; (20004a4c <HAL_FLASH_OB_Launch+0x24>)
20004a34:	f043 0302 	orr.w	r3, r3, #2
20004a38:	b2db      	uxtb	r3, r3
20004a3a:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
20004a3c:	f24c 3050 	movw	r0, #50000	; 0xc350
20004a40:	f000 f812 	bl	20004a68 <FLASH_WaitForLastOperation>
20004a44:	4603      	mov	r3, r0
}
20004a46:	4618      	mov	r0, r3
20004a48:	bd80      	pop	{r7, pc}
20004a4a:	bf00      	nop
20004a4c:	40023c14 	.word	0x40023c14

20004a50 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
20004a50:	b480      	push	{r7}
20004a52:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
20004a54:	4b03      	ldr	r3, [pc, #12]	; (20004a64 <HAL_FLASH_GetError+0x14>)
20004a56:	69db      	ldr	r3, [r3, #28]
}  
20004a58:	4618      	mov	r0, r3
20004a5a:	46bd      	mov	sp, r7
20004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
20004a60:	4770      	bx	lr
20004a62:	bf00      	nop
20004a64:	20000490 	.word	0x20000490

20004a68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
20004a68:	b580      	push	{r7, lr}
20004a6a:	b084      	sub	sp, #16
20004a6c:	af00      	add	r7, sp, #0
20004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20004a70:	2300      	movs	r3, #0
20004a72:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
20004a74:	4b1a      	ldr	r3, [pc, #104]	; (20004ae0 <FLASH_WaitForLastOperation+0x78>)
20004a76:	2200      	movs	r2, #0
20004a78:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
20004a7a:	f7fc ff45 	bl	20001908 <HAL_GetTick>
20004a7e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004a80:	e010      	b.n	20004aa4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
20004a82:	687b      	ldr	r3, [r7, #4]
20004a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20004a88:	d00c      	beq.n	20004aa4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
20004a8a:	687b      	ldr	r3, [r7, #4]
20004a8c:	2b00      	cmp	r3, #0
20004a8e:	d007      	beq.n	20004aa0 <FLASH_WaitForLastOperation+0x38>
20004a90:	f7fc ff3a 	bl	20001908 <HAL_GetTick>
20004a94:	4602      	mov	r2, r0
20004a96:	68fb      	ldr	r3, [r7, #12]
20004a98:	1ad3      	subs	r3, r2, r3
20004a9a:	687a      	ldr	r2, [r7, #4]
20004a9c:	429a      	cmp	r2, r3
20004a9e:	d201      	bcs.n	20004aa4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
20004aa0:	2303      	movs	r3, #3
20004aa2:	e019      	b.n	20004ad8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
20004aa4:	4b0f      	ldr	r3, [pc, #60]	; (20004ae4 <FLASH_WaitForLastOperation+0x7c>)
20004aa6:	68db      	ldr	r3, [r3, #12]
20004aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20004aac:	2b00      	cmp	r3, #0
20004aae:	d1e8      	bne.n	20004a82 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
20004ab0:	4b0c      	ldr	r3, [pc, #48]	; (20004ae4 <FLASH_WaitForLastOperation+0x7c>)
20004ab2:	68db      	ldr	r3, [r3, #12]
20004ab4:	f003 0301 	and.w	r3, r3, #1
20004ab8:	2b00      	cmp	r3, #0
20004aba:	d002      	beq.n	20004ac2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
20004abc:	4b09      	ldr	r3, [pc, #36]	; (20004ae4 <FLASH_WaitForLastOperation+0x7c>)
20004abe:	2201      	movs	r2, #1
20004ac0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
20004ac2:	4b08      	ldr	r3, [pc, #32]	; (20004ae4 <FLASH_WaitForLastOperation+0x7c>)
20004ac4:	68db      	ldr	r3, [r3, #12]
20004ac6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
20004aca:	2b00      	cmp	r3, #0
20004acc:	d003      	beq.n	20004ad6 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
20004ace:	f000 f8a5 	bl	20004c1c <FLASH_SetErrorCode>
    return HAL_ERROR;
20004ad2:	2301      	movs	r3, #1
20004ad4:	e000      	b.n	20004ad8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
20004ad6:	2300      	movs	r3, #0
  
}  
20004ad8:	4618      	mov	r0, r3
20004ada:	3710      	adds	r7, #16
20004adc:	46bd      	mov	sp, r7
20004ade:	bd80      	pop	{r7, pc}
20004ae0:	20000490 	.word	0x20000490
20004ae4:	40023c00 	.word	0x40023c00

20004ae8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
20004ae8:	b480      	push	{r7}
20004aea:	b085      	sub	sp, #20
20004aec:	af00      	add	r7, sp, #0
20004aee:	60f8      	str	r0, [r7, #12]
20004af0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004af4:	4b14      	ldr	r3, [pc, #80]	; (20004b48 <FLASH_Program_DoubleWord+0x60>)
20004af6:	691b      	ldr	r3, [r3, #16]
20004af8:	4a13      	ldr	r2, [pc, #76]	; (20004b48 <FLASH_Program_DoubleWord+0x60>)
20004afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004afe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
20004b00:	4b11      	ldr	r3, [pc, #68]	; (20004b48 <FLASH_Program_DoubleWord+0x60>)
20004b02:	691b      	ldr	r3, [r3, #16]
20004b04:	4a10      	ldr	r2, [pc, #64]	; (20004b48 <FLASH_Program_DoubleWord+0x60>)
20004b06:	f443 7340 	orr.w	r3, r3, #768	; 0x300
20004b0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004b0c:	4b0e      	ldr	r3, [pc, #56]	; (20004b48 <FLASH_Program_DoubleWord+0x60>)
20004b0e:	691b      	ldr	r3, [r3, #16]
20004b10:	4a0d      	ldr	r2, [pc, #52]	; (20004b48 <FLASH_Program_DoubleWord+0x60>)
20004b12:	f043 0301 	orr.w	r3, r3, #1
20004b16:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
20004b18:	68fb      	ldr	r3, [r7, #12]
20004b1a:	683a      	ldr	r2, [r7, #0]
20004b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
20004b1e:	f3bf 8f6f 	isb	sy
}
20004b22:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
20004b24:	e9d7 0100 	ldrd	r0, r1, [r7]
20004b28:	f04f 0200 	mov.w	r2, #0
20004b2c:	f04f 0300 	mov.w	r3, #0
20004b30:	000a      	movs	r2, r1
20004b32:	2300      	movs	r3, #0
20004b34:	68f9      	ldr	r1, [r7, #12]
20004b36:	3104      	adds	r1, #4
20004b38:	4613      	mov	r3, r2
20004b3a:	600b      	str	r3, [r1, #0]
}
20004b3c:	bf00      	nop
20004b3e:	3714      	adds	r7, #20
20004b40:	46bd      	mov	sp, r7
20004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b46:	4770      	bx	lr
20004b48:	40023c00 	.word	0x40023c00

20004b4c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
20004b4c:	b480      	push	{r7}
20004b4e:	b083      	sub	sp, #12
20004b50:	af00      	add	r7, sp, #0
20004b52:	6078      	str	r0, [r7, #4]
20004b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004b56:	4b0d      	ldr	r3, [pc, #52]	; (20004b8c <FLASH_Program_Word+0x40>)
20004b58:	691b      	ldr	r3, [r3, #16]
20004b5a:	4a0c      	ldr	r2, [pc, #48]	; (20004b8c <FLASH_Program_Word+0x40>)
20004b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004b60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
20004b62:	4b0a      	ldr	r3, [pc, #40]	; (20004b8c <FLASH_Program_Word+0x40>)
20004b64:	691b      	ldr	r3, [r3, #16]
20004b66:	4a09      	ldr	r2, [pc, #36]	; (20004b8c <FLASH_Program_Word+0x40>)
20004b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20004b6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004b6e:	4b07      	ldr	r3, [pc, #28]	; (20004b8c <FLASH_Program_Word+0x40>)
20004b70:	691b      	ldr	r3, [r3, #16]
20004b72:	4a06      	ldr	r2, [pc, #24]	; (20004b8c <FLASH_Program_Word+0x40>)
20004b74:	f043 0301 	orr.w	r3, r3, #1
20004b78:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
20004b7a:	687b      	ldr	r3, [r7, #4]
20004b7c:	683a      	ldr	r2, [r7, #0]
20004b7e:	601a      	str	r2, [r3, #0]
}
20004b80:	bf00      	nop
20004b82:	370c      	adds	r7, #12
20004b84:	46bd      	mov	sp, r7
20004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
20004b8a:	4770      	bx	lr
20004b8c:	40023c00 	.word	0x40023c00

20004b90 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
20004b90:	b480      	push	{r7}
20004b92:	b083      	sub	sp, #12
20004b94:	af00      	add	r7, sp, #0
20004b96:	6078      	str	r0, [r7, #4]
20004b98:	460b      	mov	r3, r1
20004b9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004b9c:	4b0d      	ldr	r3, [pc, #52]	; (20004bd4 <FLASH_Program_HalfWord+0x44>)
20004b9e:	691b      	ldr	r3, [r3, #16]
20004ba0:	4a0c      	ldr	r2, [pc, #48]	; (20004bd4 <FLASH_Program_HalfWord+0x44>)
20004ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004ba6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
20004ba8:	4b0a      	ldr	r3, [pc, #40]	; (20004bd4 <FLASH_Program_HalfWord+0x44>)
20004baa:	691b      	ldr	r3, [r3, #16]
20004bac:	4a09      	ldr	r2, [pc, #36]	; (20004bd4 <FLASH_Program_HalfWord+0x44>)
20004bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20004bb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004bb4:	4b07      	ldr	r3, [pc, #28]	; (20004bd4 <FLASH_Program_HalfWord+0x44>)
20004bb6:	691b      	ldr	r3, [r3, #16]
20004bb8:	4a06      	ldr	r2, [pc, #24]	; (20004bd4 <FLASH_Program_HalfWord+0x44>)
20004bba:	f043 0301 	orr.w	r3, r3, #1
20004bbe:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
20004bc0:	687b      	ldr	r3, [r7, #4]
20004bc2:	887a      	ldrh	r2, [r7, #2]
20004bc4:	801a      	strh	r2, [r3, #0]
}
20004bc6:	bf00      	nop
20004bc8:	370c      	adds	r7, #12
20004bca:	46bd      	mov	sp, r7
20004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
20004bd0:	4770      	bx	lr
20004bd2:	bf00      	nop
20004bd4:	40023c00 	.word	0x40023c00

20004bd8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
20004bd8:	b480      	push	{r7}
20004bda:	b083      	sub	sp, #12
20004bdc:	af00      	add	r7, sp, #0
20004bde:	6078      	str	r0, [r7, #4]
20004be0:	460b      	mov	r3, r1
20004be2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004be4:	4b0c      	ldr	r3, [pc, #48]	; (20004c18 <FLASH_Program_Byte+0x40>)
20004be6:	691b      	ldr	r3, [r3, #16]
20004be8:	4a0b      	ldr	r2, [pc, #44]	; (20004c18 <FLASH_Program_Byte+0x40>)
20004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004bee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
20004bf0:	4b09      	ldr	r3, [pc, #36]	; (20004c18 <FLASH_Program_Byte+0x40>)
20004bf2:	4a09      	ldr	r2, [pc, #36]	; (20004c18 <FLASH_Program_Byte+0x40>)
20004bf4:	691b      	ldr	r3, [r3, #16]
20004bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
20004bf8:	4b07      	ldr	r3, [pc, #28]	; (20004c18 <FLASH_Program_Byte+0x40>)
20004bfa:	691b      	ldr	r3, [r3, #16]
20004bfc:	4a06      	ldr	r2, [pc, #24]	; (20004c18 <FLASH_Program_Byte+0x40>)
20004bfe:	f043 0301 	orr.w	r3, r3, #1
20004c02:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
20004c04:	687b      	ldr	r3, [r7, #4]
20004c06:	78fa      	ldrb	r2, [r7, #3]
20004c08:	701a      	strb	r2, [r3, #0]
}
20004c0a:	bf00      	nop
20004c0c:	370c      	adds	r7, #12
20004c0e:	46bd      	mov	sp, r7
20004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
20004c14:	4770      	bx	lr
20004c16:	bf00      	nop
20004c18:	40023c00 	.word	0x40023c00

20004c1c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
20004c1c:	b480      	push	{r7}
20004c1e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
20004c20:	4b27      	ldr	r3, [pc, #156]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c22:	68db      	ldr	r3, [r3, #12]
20004c24:	f003 0310 	and.w	r3, r3, #16
20004c28:	2b00      	cmp	r3, #0
20004c2a:	d008      	beq.n	20004c3e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
20004c2c:	4b25      	ldr	r3, [pc, #148]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c2e:	69db      	ldr	r3, [r3, #28]
20004c30:	f043 0310 	orr.w	r3, r3, #16
20004c34:	4a23      	ldr	r2, [pc, #140]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c36:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
20004c38:	4b21      	ldr	r3, [pc, #132]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c3a:	2210      	movs	r2, #16
20004c3c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
20004c3e:	4b20      	ldr	r3, [pc, #128]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c40:	68db      	ldr	r3, [r3, #12]
20004c42:	f003 0320 	and.w	r3, r3, #32
20004c46:	2b00      	cmp	r3, #0
20004c48:	d008      	beq.n	20004c5c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
20004c4a:	4b1e      	ldr	r3, [pc, #120]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c4c:	69db      	ldr	r3, [r3, #28]
20004c4e:	f043 0308 	orr.w	r3, r3, #8
20004c52:	4a1c      	ldr	r2, [pc, #112]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c54:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
20004c56:	4b1a      	ldr	r3, [pc, #104]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c58:	2220      	movs	r2, #32
20004c5a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
20004c5c:	4b18      	ldr	r3, [pc, #96]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c5e:	68db      	ldr	r3, [r3, #12]
20004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
20004c64:	2b00      	cmp	r3, #0
20004c66:	d008      	beq.n	20004c7a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
20004c68:	4b16      	ldr	r3, [pc, #88]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c6a:	69db      	ldr	r3, [r3, #28]
20004c6c:	f043 0304 	orr.w	r3, r3, #4
20004c70:	4a14      	ldr	r2, [pc, #80]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c72:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
20004c74:	4b12      	ldr	r3, [pc, #72]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c76:	2240      	movs	r2, #64	; 0x40
20004c78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
20004c7a:	4b11      	ldr	r3, [pc, #68]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c7c:	68db      	ldr	r3, [r3, #12]
20004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
20004c82:	2b00      	cmp	r3, #0
20004c84:	d008      	beq.n	20004c98 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
20004c86:	4b0f      	ldr	r3, [pc, #60]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c88:	69db      	ldr	r3, [r3, #28]
20004c8a:	f043 0302 	orr.w	r3, r3, #2
20004c8e:	4a0d      	ldr	r2, [pc, #52]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004c90:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
20004c92:	4b0b      	ldr	r3, [pc, #44]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c94:	2280      	movs	r2, #128	; 0x80
20004c96:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
20004c98:	4b09      	ldr	r3, [pc, #36]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004c9a:	68db      	ldr	r3, [r3, #12]
20004c9c:	f003 0302 	and.w	r3, r3, #2
20004ca0:	2b00      	cmp	r3, #0
20004ca2:	d008      	beq.n	20004cb6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
20004ca4:	4b07      	ldr	r3, [pc, #28]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004ca6:	69db      	ldr	r3, [r3, #28]
20004ca8:	f043 0320 	orr.w	r3, r3, #32
20004cac:	4a05      	ldr	r2, [pc, #20]	; (20004cc4 <FLASH_SetErrorCode+0xa8>)
20004cae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
20004cb0:	4b03      	ldr	r3, [pc, #12]	; (20004cc0 <FLASH_SetErrorCode+0xa4>)
20004cb2:	2202      	movs	r2, #2
20004cb4:	60da      	str	r2, [r3, #12]
  }
}
20004cb6:	bf00      	nop
20004cb8:	46bd      	mov	sp, r7
20004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
20004cbe:	4770      	bx	lr
20004cc0:	40023c00 	.word	0x40023c00
20004cc4:	20000490 	.word	0x20000490

20004cc8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
20004cc8:	b580      	push	{r7, lr}
20004cca:	b084      	sub	sp, #16
20004ccc:	af00      	add	r7, sp, #0
20004cce:	6078      	str	r0, [r7, #4]
20004cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
20004cd2:	2301      	movs	r3, #1
20004cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
20004cd6:	2300      	movs	r3, #0
20004cd8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004cda:	4b31      	ldr	r3, [pc, #196]	; (20004da0 <HAL_FLASHEx_Erase+0xd8>)
20004cdc:	7e1b      	ldrb	r3, [r3, #24]
20004cde:	2b01      	cmp	r3, #1
20004ce0:	d101      	bne.n	20004ce6 <HAL_FLASHEx_Erase+0x1e>
20004ce2:	2302      	movs	r3, #2
20004ce4:	e058      	b.n	20004d98 <HAL_FLASHEx_Erase+0xd0>
20004ce6:	4b2e      	ldr	r3, [pc, #184]	; (20004da0 <HAL_FLASHEx_Erase+0xd8>)
20004ce8:	2201      	movs	r2, #1
20004cea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004cec:	f24c 3050 	movw	r0, #50000	; 0xc350
20004cf0:	f7ff feba 	bl	20004a68 <FLASH_WaitForLastOperation>
20004cf4:	4603      	mov	r3, r0
20004cf6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
20004cf8:	7bfb      	ldrb	r3, [r7, #15]
20004cfa:	2b00      	cmp	r3, #0
20004cfc:	d148      	bne.n	20004d90 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
20004cfe:	683b      	ldr	r3, [r7, #0]
20004d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
20004d04:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20004d06:	687b      	ldr	r3, [r7, #4]
20004d08:	681b      	ldr	r3, [r3, #0]
20004d0a:	2b01      	cmp	r3, #1
20004d0c:	d115      	bne.n	20004d3a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20004d0e:	687b      	ldr	r3, [r7, #4]
20004d10:	691b      	ldr	r3, [r3, #16]
20004d12:	b2da      	uxtb	r2, r3
20004d14:	687b      	ldr	r3, [r7, #4]
20004d16:	685b      	ldr	r3, [r3, #4]
20004d18:	4619      	mov	r1, r3
20004d1a:	4610      	mov	r0, r2
20004d1c:	f000 f92c 	bl	20004f78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004d20:	f24c 3050 	movw	r0, #50000	; 0xc350
20004d24:	f7ff fea0 	bl	20004a68 <FLASH_WaitForLastOperation>
20004d28:	4603      	mov	r3, r0
20004d2a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
20004d2c:	4b1d      	ldr	r3, [pc, #116]	; (20004da4 <HAL_FLASHEx_Erase+0xdc>)
20004d2e:	691b      	ldr	r3, [r3, #16]
20004d30:	4a1c      	ldr	r2, [pc, #112]	; (20004da4 <HAL_FLASHEx_Erase+0xdc>)
20004d32:	f023 0304 	bic.w	r3, r3, #4
20004d36:	6113      	str	r3, [r2, #16]
20004d38:	e028      	b.n	20004d8c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20004d3a:	687b      	ldr	r3, [r7, #4]
20004d3c:	689b      	ldr	r3, [r3, #8]
20004d3e:	60bb      	str	r3, [r7, #8]
20004d40:	e01c      	b.n	20004d7c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
20004d42:	687b      	ldr	r3, [r7, #4]
20004d44:	691b      	ldr	r3, [r3, #16]
20004d46:	b2db      	uxtb	r3, r3
20004d48:	4619      	mov	r1, r3
20004d4a:	68b8      	ldr	r0, [r7, #8]
20004d4c:	f000 f938 	bl	20004fc0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20004d50:	f24c 3050 	movw	r0, #50000	; 0xc350
20004d54:	f7ff fe88 	bl	20004a68 <FLASH_WaitForLastOperation>
20004d58:	4603      	mov	r3, r0
20004d5a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
20004d5c:	4b11      	ldr	r3, [pc, #68]	; (20004da4 <HAL_FLASHEx_Erase+0xdc>)
20004d5e:	691b      	ldr	r3, [r3, #16]
20004d60:	4a10      	ldr	r2, [pc, #64]	; (20004da4 <HAL_FLASHEx_Erase+0xdc>)
20004d62:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
20004d66:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
20004d68:	7bfb      	ldrb	r3, [r7, #15]
20004d6a:	2b00      	cmp	r3, #0
20004d6c:	d003      	beq.n	20004d76 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
20004d6e:	683b      	ldr	r3, [r7, #0]
20004d70:	68ba      	ldr	r2, [r7, #8]
20004d72:	601a      	str	r2, [r3, #0]
          break;
20004d74:	e00a      	b.n	20004d8c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
20004d76:	68bb      	ldr	r3, [r7, #8]
20004d78:	3301      	adds	r3, #1
20004d7a:	60bb      	str	r3, [r7, #8]
20004d7c:	687b      	ldr	r3, [r7, #4]
20004d7e:	68da      	ldr	r2, [r3, #12]
20004d80:	687b      	ldr	r3, [r7, #4]
20004d82:	689b      	ldr	r3, [r3, #8]
20004d84:	4413      	add	r3, r2
20004d86:	68ba      	ldr	r2, [r7, #8]
20004d88:	429a      	cmp	r2, r3
20004d8a:	d3da      	bcc.n	20004d42 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
20004d8c:	f000 fa56 	bl	2000523c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20004d90:	4b03      	ldr	r3, [pc, #12]	; (20004da0 <HAL_FLASHEx_Erase+0xd8>)
20004d92:	2200      	movs	r2, #0
20004d94:	761a      	strb	r2, [r3, #24]

  return status;
20004d96:	7bfb      	ldrb	r3, [r7, #15]
}
20004d98:	4618      	mov	r0, r3
20004d9a:	3710      	adds	r7, #16
20004d9c:	46bd      	mov	sp, r7
20004d9e:	bd80      	pop	{r7, pc}
20004da0:	20000490 	.word	0x20000490
20004da4:	40023c00 	.word	0x40023c00

20004da8 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
20004da8:	b580      	push	{r7, lr}
20004daa:	b084      	sub	sp, #16
20004dac:	af00      	add	r7, sp, #0
20004dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
20004db0:	2300      	movs	r3, #0
20004db2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004db4:	4b25      	ldr	r3, [pc, #148]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004db6:	7e1b      	ldrb	r3, [r3, #24]
20004db8:	2b01      	cmp	r3, #1
20004dba:	d101      	bne.n	20004dc0 <HAL_FLASHEx_Erase_IT+0x18>
20004dbc:	2302      	movs	r3, #2
20004dbe:	e040      	b.n	20004e42 <HAL_FLASHEx_Erase_IT+0x9a>
20004dc0:	4b22      	ldr	r3, [pc, #136]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004dc2:	2201      	movs	r2, #1
20004dc4:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
20004dc6:	4b22      	ldr	r3, [pc, #136]	; (20004e50 <HAL_FLASHEx_Erase_IT+0xa8>)
20004dc8:	691b      	ldr	r3, [r3, #16]
20004dca:	4a21      	ldr	r2, [pc, #132]	; (20004e50 <HAL_FLASHEx_Erase_IT+0xa8>)
20004dcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20004dd0:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
20004dd2:	4b1f      	ldr	r3, [pc, #124]	; (20004e50 <HAL_FLASHEx_Erase_IT+0xa8>)
20004dd4:	691b      	ldr	r3, [r3, #16]
20004dd6:	4a1e      	ldr	r2, [pc, #120]	; (20004e50 <HAL_FLASHEx_Erase_IT+0xa8>)
20004dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
20004ddc:	6113      	str	r3, [r2, #16]
  
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
20004dde:	4b1c      	ldr	r3, [pc, #112]	; (20004e50 <HAL_FLASHEx_Erase_IT+0xa8>)
20004de0:	22f3      	movs	r2, #243	; 0xf3
20004de2:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_PGSERR);  
  
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
20004de4:	687b      	ldr	r3, [r7, #4]
20004de6:	681b      	ldr	r3, [r3, #0]
20004de8:	2b01      	cmp	r3, #1
20004dea:	d110      	bne.n	20004e0e <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
20004dec:	4b17      	ldr	r3, [pc, #92]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004dee:	2202      	movs	r2, #2
20004df0:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
20004df2:	687b      	ldr	r3, [r7, #4]
20004df4:	685b      	ldr	r3, [r3, #4]
20004df6:	4a15      	ldr	r2, [pc, #84]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004df8:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
20004dfa:	687b      	ldr	r3, [r7, #4]
20004dfc:	691b      	ldr	r3, [r3, #16]
20004dfe:	b2da      	uxtb	r2, r3
20004e00:	687b      	ldr	r3, [r7, #4]
20004e02:	685b      	ldr	r3, [r3, #4]
20004e04:	4619      	mov	r1, r3
20004e06:	4610      	mov	r0, r2
20004e08:	f000 f8b6 	bl	20004f78 <FLASH_MassErase>
20004e0c:	e018      	b.n	20004e40 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
20004e0e:	4b0f      	ldr	r3, [pc, #60]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004e10:	2201      	movs	r2, #1
20004e12:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
20004e14:	687b      	ldr	r3, [r7, #4]
20004e16:	68db      	ldr	r3, [r3, #12]
20004e18:	4a0c      	ldr	r2, [pc, #48]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004e1a:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
20004e1c:	687b      	ldr	r3, [r7, #4]
20004e1e:	689b      	ldr	r3, [r3, #8]
20004e20:	4a0a      	ldr	r2, [pc, #40]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004e22:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
20004e24:	687b      	ldr	r3, [r7, #4]
20004e26:	691b      	ldr	r3, [r3, #16]
20004e28:	b2da      	uxtb	r2, r3
20004e2a:	4b08      	ldr	r3, [pc, #32]	; (20004e4c <HAL_FLASHEx_Erase_IT+0xa4>)
20004e2c:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
20004e2e:	687b      	ldr	r3, [r7, #4]
20004e30:	689a      	ldr	r2, [r3, #8]
20004e32:	687b      	ldr	r3, [r7, #4]
20004e34:	691b      	ldr	r3, [r3, #16]
20004e36:	b2db      	uxtb	r3, r3
20004e38:	4619      	mov	r1, r3
20004e3a:	4610      	mov	r0, r2
20004e3c:	f000 f8c0 	bl	20004fc0 <FLASH_Erase_Sector>
  }

  return status;
20004e40:	7bfb      	ldrb	r3, [r7, #15]
}
20004e42:	4618      	mov	r0, r3
20004e44:	3710      	adds	r7, #16
20004e46:	46bd      	mov	sp, r7
20004e48:	bd80      	pop	{r7, pc}
20004e4a:	bf00      	nop
20004e4c:	20000490 	.word	0x20000490
20004e50:	40023c00 	.word	0x40023c00

20004e54 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
20004e54:	b580      	push	{r7, lr}
20004e56:	b084      	sub	sp, #16
20004e58:	af00      	add	r7, sp, #0
20004e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
20004e5c:	2301      	movs	r3, #1
20004e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
20004e60:	4b32      	ldr	r3, [pc, #200]	; (20004f2c <HAL_FLASHEx_OBProgram+0xd8>)
20004e62:	7e1b      	ldrb	r3, [r3, #24]
20004e64:	2b01      	cmp	r3, #1
20004e66:	d101      	bne.n	20004e6c <HAL_FLASHEx_OBProgram+0x18>
20004e68:	2302      	movs	r3, #2
20004e6a:	e05b      	b.n	20004f24 <HAL_FLASHEx_OBProgram+0xd0>
20004e6c:	4b2f      	ldr	r3, [pc, #188]	; (20004f2c <HAL_FLASHEx_OBProgram+0xd8>)
20004e6e:	2201      	movs	r2, #1
20004e70:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
20004e72:	687b      	ldr	r3, [r7, #4]
20004e74:	681b      	ldr	r3, [r3, #0]
20004e76:	f003 0301 	and.w	r3, r3, #1
20004e7a:	2b00      	cmp	r3, #0
20004e7c:	d018      	beq.n	20004eb0 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
20004e7e:	687b      	ldr	r3, [r7, #4]
20004e80:	685b      	ldr	r3, [r3, #4]
20004e82:	2b01      	cmp	r3, #1
20004e84:	d10a      	bne.n	20004e9c <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
20004e86:	687b      	ldr	r3, [r7, #4]
20004e88:	689a      	ldr	r2, [r3, #8]
20004e8a:	687b      	ldr	r3, [r7, #4]
20004e8c:	68db      	ldr	r3, [r3, #12]
20004e8e:	4619      	mov	r1, r3
20004e90:	4610      	mov	r0, r2
20004e92:	f000 f8dd 	bl	20005050 <FLASH_OB_EnableWRP>
20004e96:	4603      	mov	r3, r0
20004e98:	73fb      	strb	r3, [r7, #15]
20004e9a:	e009      	b.n	20004eb0 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
20004e9c:	687b      	ldr	r3, [r7, #4]
20004e9e:	689a      	ldr	r2, [r3, #8]
20004ea0:	687b      	ldr	r3, [r7, #4]
20004ea2:	68db      	ldr	r3, [r3, #12]
20004ea4:	4619      	mov	r1, r3
20004ea6:	4610      	mov	r0, r2
20004ea8:	f000 f8f4 	bl	20005094 <FLASH_OB_DisableWRP>
20004eac:	4603      	mov	r3, r0
20004eae:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
20004eb0:	687b      	ldr	r3, [r7, #4]
20004eb2:	681b      	ldr	r3, [r3, #0]
20004eb4:	f003 0302 	and.w	r3, r3, #2
20004eb8:	2b00      	cmp	r3, #0
20004eba:	d007      	beq.n	20004ecc <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
20004ebc:	687b      	ldr	r3, [r7, #4]
20004ebe:	691b      	ldr	r3, [r3, #16]
20004ec0:	b2db      	uxtb	r3, r3
20004ec2:	4618      	mov	r0, r3
20004ec4:	f000 f906 	bl	200050d4 <FLASH_OB_RDP_LevelConfig>
20004ec8:	4603      	mov	r3, r0
20004eca:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
20004ecc:	687b      	ldr	r3, [r7, #4]
20004ece:	681b      	ldr	r3, [r3, #0]
20004ed0:	f003 0304 	and.w	r3, r3, #4
20004ed4:	2b00      	cmp	r3, #0
20004ed6:	d013      	beq.n	20004f00 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
20004ed8:	687b      	ldr	r3, [r7, #4]
20004eda:	7e1b      	ldrb	r3, [r3, #24]
20004edc:	f003 0320 	and.w	r3, r3, #32
20004ee0:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
20004ee2:	687b      	ldr	r3, [r7, #4]
20004ee4:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
20004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
20004eea:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
20004eec:	687b      	ldr	r3, [r7, #4]
20004eee:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
20004ef0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
20004ef4:	b2db      	uxtb	r3, r3
20004ef6:	461a      	mov	r2, r3
20004ef8:	f000 f906 	bl	20005108 <FLASH_OB_UserConfig>
20004efc:	4603      	mov	r3, r0
20004efe:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
20004f00:	687b      	ldr	r3, [r7, #4]
20004f02:	681b      	ldr	r3, [r3, #0]
20004f04:	f003 0308 	and.w	r3, r3, #8
20004f08:	2b00      	cmp	r3, #0
20004f0a:	d007      	beq.n	20004f1c <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
20004f0c:	687b      	ldr	r3, [r7, #4]
20004f0e:	695b      	ldr	r3, [r3, #20]
20004f10:	b2db      	uxtb	r3, r3
20004f12:	4618      	mov	r0, r3
20004f14:	f000 f928 	bl	20005168 <FLASH_OB_BOR_LevelConfig>
20004f18:	4603      	mov	r3, r0
20004f1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
20004f1c:	4b03      	ldr	r3, [pc, #12]	; (20004f2c <HAL_FLASHEx_OBProgram+0xd8>)
20004f1e:	2200      	movs	r2, #0
20004f20:	761a      	strb	r2, [r3, #24]

  return status;
20004f22:	7bfb      	ldrb	r3, [r7, #15]
}
20004f24:	4618      	mov	r0, r3
20004f26:	3710      	adds	r7, #16
20004f28:	46bd      	mov	sp, r7
20004f2a:	bd80      	pop	{r7, pc}
20004f2c:	20000490 	.word	0x20000490

20004f30 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
20004f30:	b580      	push	{r7, lr}
20004f32:	b082      	sub	sp, #8
20004f34:	af00      	add	r7, sp, #0
20004f36:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
20004f38:	687b      	ldr	r3, [r7, #4]
20004f3a:	220f      	movs	r2, #15
20004f3c:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
20004f3e:	f000 f941 	bl	200051c4 <FLASH_OB_GetWRP>
20004f42:	4603      	mov	r3, r0
20004f44:	461a      	mov	r2, r3
20004f46:	687b      	ldr	r3, [r7, #4]
20004f48:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
20004f4a:	f000 f947 	bl	200051dc <FLASH_OB_GetRDP>
20004f4e:	4603      	mov	r3, r0
20004f50:	461a      	mov	r2, r3
20004f52:	687b      	ldr	r3, [r7, #4]
20004f54:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
20004f56:	f000 f925 	bl	200051a4 <FLASH_OB_GetUser>
20004f5a:	4603      	mov	r3, r0
20004f5c:	461a      	mov	r2, r3
20004f5e:	687b      	ldr	r3, [r7, #4]
20004f60:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
20004f62:	f000 f95b 	bl	2000521c <FLASH_OB_GetBOR>
20004f66:	4603      	mov	r3, r0
20004f68:	461a      	mov	r2, r3
20004f6a:	687b      	ldr	r3, [r7, #4]
20004f6c:	615a      	str	r2, [r3, #20]
}
20004f6e:	bf00      	nop
20004f70:	3708      	adds	r7, #8
20004f72:	46bd      	mov	sp, r7
20004f74:	bd80      	pop	{r7, pc}
	...

20004f78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
20004f78:	b480      	push	{r7}
20004f7a:	b083      	sub	sp, #12
20004f7c:	af00      	add	r7, sp, #0
20004f7e:	4603      	mov	r3, r0
20004f80:	6039      	str	r1, [r7, #0]
20004f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004f84:	4b0d      	ldr	r3, [pc, #52]	; (20004fbc <FLASH_MassErase+0x44>)
20004f86:	691b      	ldr	r3, [r3, #16]
20004f88:	4a0c      	ldr	r2, [pc, #48]	; (20004fbc <FLASH_MassErase+0x44>)
20004f8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20004f8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
20004f90:	4b0a      	ldr	r3, [pc, #40]	; (20004fbc <FLASH_MassErase+0x44>)
20004f92:	691b      	ldr	r3, [r3, #16]
20004f94:	4a09      	ldr	r2, [pc, #36]	; (20004fbc <FLASH_MassErase+0x44>)
20004f96:	f043 0304 	orr.w	r3, r3, #4
20004f9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
20004f9c:	4b07      	ldr	r3, [pc, #28]	; (20004fbc <FLASH_MassErase+0x44>)
20004f9e:	691a      	ldr	r2, [r3, #16]
20004fa0:	79fb      	ldrb	r3, [r7, #7]
20004fa2:	021b      	lsls	r3, r3, #8
20004fa4:	4313      	orrs	r3, r2
20004fa6:	4a05      	ldr	r2, [pc, #20]	; (20004fbc <FLASH_MassErase+0x44>)
20004fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20004fac:	6113      	str	r3, [r2, #16]
}
20004fae:	bf00      	nop
20004fb0:	370c      	adds	r7, #12
20004fb2:	46bd      	mov	sp, r7
20004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20004fb8:	4770      	bx	lr
20004fba:	bf00      	nop
20004fbc:	40023c00 	.word	0x40023c00

20004fc0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
20004fc0:	b480      	push	{r7}
20004fc2:	b085      	sub	sp, #20
20004fc4:	af00      	add	r7, sp, #0
20004fc6:	6078      	str	r0, [r7, #4]
20004fc8:	460b      	mov	r3, r1
20004fca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
20004fcc:	2300      	movs	r3, #0
20004fce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
20004fd0:	78fb      	ldrb	r3, [r7, #3]
20004fd2:	2b00      	cmp	r3, #0
20004fd4:	d102      	bne.n	20004fdc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
20004fd6:	2300      	movs	r3, #0
20004fd8:	60fb      	str	r3, [r7, #12]
20004fda:	e010      	b.n	20004ffe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
20004fdc:	78fb      	ldrb	r3, [r7, #3]
20004fde:	2b01      	cmp	r3, #1
20004fe0:	d103      	bne.n	20004fea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
20004fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
20004fe6:	60fb      	str	r3, [r7, #12]
20004fe8:	e009      	b.n	20004ffe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
20004fea:	78fb      	ldrb	r3, [r7, #3]
20004fec:	2b02      	cmp	r3, #2
20004fee:	d103      	bne.n	20004ff8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
20004ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
20004ff4:	60fb      	str	r3, [r7, #12]
20004ff6:	e002      	b.n	20004ffe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
20004ff8:	f44f 7340 	mov.w	r3, #768	; 0x300
20004ffc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
20004ffe:	4b13      	ldr	r3, [pc, #76]	; (2000504c <FLASH_Erase_Sector+0x8c>)
20005000:	691b      	ldr	r3, [r3, #16]
20005002:	4a12      	ldr	r2, [pc, #72]	; (2000504c <FLASH_Erase_Sector+0x8c>)
20005004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20005008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
2000500a:	4b10      	ldr	r3, [pc, #64]	; (2000504c <FLASH_Erase_Sector+0x8c>)
2000500c:	691a      	ldr	r2, [r3, #16]
2000500e:	490f      	ldr	r1, [pc, #60]	; (2000504c <FLASH_Erase_Sector+0x8c>)
20005010:	68fb      	ldr	r3, [r7, #12]
20005012:	4313      	orrs	r3, r2
20005014:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
20005016:	4b0d      	ldr	r3, [pc, #52]	; (2000504c <FLASH_Erase_Sector+0x8c>)
20005018:	691b      	ldr	r3, [r3, #16]
2000501a:	4a0c      	ldr	r2, [pc, #48]	; (2000504c <FLASH_Erase_Sector+0x8c>)
2000501c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
20005020:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
20005022:	4b0a      	ldr	r3, [pc, #40]	; (2000504c <FLASH_Erase_Sector+0x8c>)
20005024:	691a      	ldr	r2, [r3, #16]
20005026:	687b      	ldr	r3, [r7, #4]
20005028:	00db      	lsls	r3, r3, #3
2000502a:	4313      	orrs	r3, r2
2000502c:	4a07      	ldr	r2, [pc, #28]	; (2000504c <FLASH_Erase_Sector+0x8c>)
2000502e:	f043 0302 	orr.w	r3, r3, #2
20005032:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
20005034:	4b05      	ldr	r3, [pc, #20]	; (2000504c <FLASH_Erase_Sector+0x8c>)
20005036:	691b      	ldr	r3, [r3, #16]
20005038:	4a04      	ldr	r2, [pc, #16]	; (2000504c <FLASH_Erase_Sector+0x8c>)
2000503a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000503e:	6113      	str	r3, [r2, #16]
}
20005040:	bf00      	nop
20005042:	3714      	adds	r7, #20
20005044:	46bd      	mov	sp, r7
20005046:	f85d 7b04 	ldr.w	r7, [sp], #4
2000504a:	4770      	bx	lr
2000504c:	40023c00 	.word	0x40023c00

20005050 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
20005050:	b580      	push	{r7, lr}
20005052:	b084      	sub	sp, #16
20005054:	af00      	add	r7, sp, #0
20005056:	6078      	str	r0, [r7, #4]
20005058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000505a:	2300      	movs	r3, #0
2000505c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
2000505e:	f24c 3050 	movw	r0, #50000	; 0xc350
20005062:	f7ff fd01 	bl	20004a68 <FLASH_WaitForLastOperation>
20005066:	4603      	mov	r3, r0
20005068:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
2000506a:	7bfb      	ldrb	r3, [r7, #15]
2000506c:	2b00      	cmp	r3, #0
2000506e:	d10a      	bne.n	20005086 <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
20005070:	4b07      	ldr	r3, [pc, #28]	; (20005090 <FLASH_OB_EnableWRP+0x40>)
20005072:	881b      	ldrh	r3, [r3, #0]
20005074:	b29a      	uxth	r2, r3
20005076:	687b      	ldr	r3, [r7, #4]
20005078:	b29b      	uxth	r3, r3
2000507a:	43db      	mvns	r3, r3
2000507c:	b29b      	uxth	r3, r3
2000507e:	4904      	ldr	r1, [pc, #16]	; (20005090 <FLASH_OB_EnableWRP+0x40>)
20005080:	4013      	ands	r3, r2
20005082:	b29b      	uxth	r3, r3
20005084:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
20005086:	7bfb      	ldrb	r3, [r7, #15]
}
20005088:	4618      	mov	r0, r3
2000508a:	3710      	adds	r7, #16
2000508c:	46bd      	mov	sp, r7
2000508e:	bd80      	pop	{r7, pc}
20005090:	40023c16 	.word	0x40023c16

20005094 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
20005094:	b580      	push	{r7, lr}
20005096:	b084      	sub	sp, #16
20005098:	af00      	add	r7, sp, #0
2000509a:	6078      	str	r0, [r7, #4]
2000509c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2000509e:	2300      	movs	r3, #0
200050a0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200050a2:	f24c 3050 	movw	r0, #50000	; 0xc350
200050a6:	f7ff fcdf 	bl	20004a68 <FLASH_WaitForLastOperation>
200050aa:	4603      	mov	r3, r0
200050ac:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
200050ae:	7bfb      	ldrb	r3, [r7, #15]
200050b0:	2b00      	cmp	r3, #0
200050b2:	d108      	bne.n	200050c6 <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
200050b4:	4b06      	ldr	r3, [pc, #24]	; (200050d0 <FLASH_OB_DisableWRP+0x3c>)
200050b6:	881b      	ldrh	r3, [r3, #0]
200050b8:	b29a      	uxth	r2, r3
200050ba:	687b      	ldr	r3, [r7, #4]
200050bc:	b29b      	uxth	r3, r3
200050be:	4904      	ldr	r1, [pc, #16]	; (200050d0 <FLASH_OB_DisableWRP+0x3c>)
200050c0:	4313      	orrs	r3, r2
200050c2:	b29b      	uxth	r3, r3
200050c4:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
200050c6:	7bfb      	ldrb	r3, [r7, #15]
}
200050c8:	4618      	mov	r0, r3
200050ca:	3710      	adds	r7, #16
200050cc:	46bd      	mov	sp, r7
200050ce:	bd80      	pop	{r7, pc}
200050d0:	40023c16 	.word	0x40023c16

200050d4 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
200050d4:	b580      	push	{r7, lr}
200050d6:	b084      	sub	sp, #16
200050d8:	af00      	add	r7, sp, #0
200050da:	4603      	mov	r3, r0
200050dc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
200050de:	2300      	movs	r3, #0
200050e0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
200050e2:	f24c 3050 	movw	r0, #50000	; 0xc350
200050e6:	f7ff fcbf 	bl	20004a68 <FLASH_WaitForLastOperation>
200050ea:	4603      	mov	r3, r0
200050ec:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
200050ee:	7bfb      	ldrb	r3, [r7, #15]
200050f0:	2b00      	cmp	r3, #0
200050f2:	d102      	bne.n	200050fa <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
200050f4:	4a03      	ldr	r2, [pc, #12]	; (20005104 <FLASH_OB_RDP_LevelConfig+0x30>)
200050f6:	79fb      	ldrb	r3, [r7, #7]
200050f8:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
200050fa:	7bfb      	ldrb	r3, [r7, #15]
}
200050fc:	4618      	mov	r0, r3
200050fe:	3710      	adds	r7, #16
20005100:	46bd      	mov	sp, r7
20005102:	bd80      	pop	{r7, pc}
20005104:	40023c15 	.word	0x40023c15

20005108 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
20005108:	b580      	push	{r7, lr}
2000510a:	b084      	sub	sp, #16
2000510c:	af00      	add	r7, sp, #0
2000510e:	4603      	mov	r3, r0
20005110:	71fb      	strb	r3, [r7, #7]
20005112:	460b      	mov	r3, r1
20005114:	71bb      	strb	r3, [r7, #6]
20005116:	4613      	mov	r3, r2
20005118:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
2000511a:	23ff      	movs	r3, #255	; 0xff
2000511c:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
2000511e:	2300      	movs	r3, #0
20005120:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
20005122:	f24c 3050 	movw	r0, #50000	; 0xc350
20005126:	f7ff fc9f 	bl	20004a68 <FLASH_WaitForLastOperation>
2000512a:	4603      	mov	r3, r0
2000512c:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
2000512e:	7bbb      	ldrb	r3, [r7, #14]
20005130:	2b00      	cmp	r3, #0
20005132:	d111      	bne.n	20005158 <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
20005134:	4b0b      	ldr	r3, [pc, #44]	; (20005164 <FLASH_OB_UserConfig+0x5c>)
20005136:	781b      	ldrb	r3, [r3, #0]
20005138:	b2db      	uxtb	r3, r3
2000513a:	f003 031f 	and.w	r3, r3, #31
2000513e:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
20005140:	79ba      	ldrb	r2, [r7, #6]
20005142:	7bfb      	ldrb	r3, [r7, #15]
20005144:	4313      	orrs	r3, r2
20005146:	b2da      	uxtb	r2, r3
20005148:	797b      	ldrb	r3, [r7, #5]
2000514a:	4313      	orrs	r3, r2
2000514c:	b2da      	uxtb	r2, r3
2000514e:	4905      	ldr	r1, [pc, #20]	; (20005164 <FLASH_OB_UserConfig+0x5c>)
20005150:	79fb      	ldrb	r3, [r7, #7]
20005152:	4313      	orrs	r3, r2
20005154:	b2db      	uxtb	r3, r3
20005156:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
20005158:	7bbb      	ldrb	r3, [r7, #14]
}
2000515a:	4618      	mov	r0, r3
2000515c:	3710      	adds	r7, #16
2000515e:	46bd      	mov	sp, r7
20005160:	bd80      	pop	{r7, pc}
20005162:	bf00      	nop
20005164:	40023c14 	.word	0x40023c14

20005168 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
20005168:	b480      	push	{r7}
2000516a:	b083      	sub	sp, #12
2000516c:	af00      	add	r7, sp, #0
2000516e:	4603      	mov	r3, r0
20005170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
20005172:	4b0b      	ldr	r3, [pc, #44]	; (200051a0 <FLASH_OB_BOR_LevelConfig+0x38>)
20005174:	781b      	ldrb	r3, [r3, #0]
20005176:	b2db      	uxtb	r3, r3
20005178:	4a09      	ldr	r2, [pc, #36]	; (200051a0 <FLASH_OB_BOR_LevelConfig+0x38>)
2000517a:	f023 030c 	bic.w	r3, r3, #12
2000517e:	b2db      	uxtb	r3, r3
20005180:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
20005182:	4b07      	ldr	r3, [pc, #28]	; (200051a0 <FLASH_OB_BOR_LevelConfig+0x38>)
20005184:	781b      	ldrb	r3, [r3, #0]
20005186:	b2da      	uxtb	r2, r3
20005188:	4905      	ldr	r1, [pc, #20]	; (200051a0 <FLASH_OB_BOR_LevelConfig+0x38>)
2000518a:	79fb      	ldrb	r3, [r7, #7]
2000518c:	4313      	orrs	r3, r2
2000518e:	b2db      	uxtb	r3, r3
20005190:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
20005192:	2300      	movs	r3, #0
  
}
20005194:	4618      	mov	r0, r3
20005196:	370c      	adds	r7, #12
20005198:	46bd      	mov	sp, r7
2000519a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000519e:	4770      	bx	lr
200051a0:	40023c14 	.word	0x40023c14

200051a4 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
200051a4:	b480      	push	{r7}
200051a6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
200051a8:	4b05      	ldr	r3, [pc, #20]	; (200051c0 <FLASH_OB_GetUser+0x1c>)
200051aa:	695b      	ldr	r3, [r3, #20]
200051ac:	b2db      	uxtb	r3, r3
200051ae:	f023 031f 	bic.w	r3, r3, #31
200051b2:	b2db      	uxtb	r3, r3
}
200051b4:	4618      	mov	r0, r3
200051b6:	46bd      	mov	sp, r7
200051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
200051bc:	4770      	bx	lr
200051be:	bf00      	nop
200051c0:	40023c00 	.word	0x40023c00

200051c4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
200051c4:	b480      	push	{r7}
200051c6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
200051c8:	4b03      	ldr	r3, [pc, #12]	; (200051d8 <FLASH_OB_GetWRP+0x14>)
200051ca:	881b      	ldrh	r3, [r3, #0]
200051cc:	b29b      	uxth	r3, r3
}
200051ce:	4618      	mov	r0, r3
200051d0:	46bd      	mov	sp, r7
200051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200051d6:	4770      	bx	lr
200051d8:	40023c16 	.word	0x40023c16

200051dc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
200051dc:	b480      	push	{r7}
200051de:	b083      	sub	sp, #12
200051e0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
200051e2:	23aa      	movs	r3, #170	; 0xaa
200051e4:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
200051e6:	4b0c      	ldr	r3, [pc, #48]	; (20005218 <FLASH_OB_GetRDP+0x3c>)
200051e8:	781b      	ldrb	r3, [r3, #0]
200051ea:	b2db      	uxtb	r3, r3
200051ec:	2bcc      	cmp	r3, #204	; 0xcc
200051ee:	d102      	bne.n	200051f6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
200051f0:	23cc      	movs	r3, #204	; 0xcc
200051f2:	71fb      	strb	r3, [r7, #7]
200051f4:	e009      	b.n	2000520a <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
200051f6:	4b08      	ldr	r3, [pc, #32]	; (20005218 <FLASH_OB_GetRDP+0x3c>)
200051f8:	781b      	ldrb	r3, [r3, #0]
200051fa:	b2db      	uxtb	r3, r3
200051fc:	2baa      	cmp	r3, #170	; 0xaa
200051fe:	d102      	bne.n	20005206 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
20005200:	23aa      	movs	r3, #170	; 0xaa
20005202:	71fb      	strb	r3, [r7, #7]
20005204:	e001      	b.n	2000520a <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
20005206:	2355      	movs	r3, #85	; 0x55
20005208:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
2000520a:	79fb      	ldrb	r3, [r7, #7]
}
2000520c:	4618      	mov	r0, r3
2000520e:	370c      	adds	r7, #12
20005210:	46bd      	mov	sp, r7
20005212:	f85d 7b04 	ldr.w	r7, [sp], #4
20005216:	4770      	bx	lr
20005218:	40023c15 	.word	0x40023c15

2000521c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
2000521c:	b480      	push	{r7}
2000521e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
20005220:	4b05      	ldr	r3, [pc, #20]	; (20005238 <FLASH_OB_GetBOR+0x1c>)
20005222:	781b      	ldrb	r3, [r3, #0]
20005224:	b2db      	uxtb	r3, r3
20005226:	f003 030c 	and.w	r3, r3, #12
2000522a:	b2db      	uxtb	r3, r3
}
2000522c:	4618      	mov	r0, r3
2000522e:	46bd      	mov	sp, r7
20005230:	f85d 7b04 	ldr.w	r7, [sp], #4
20005234:	4770      	bx	lr
20005236:	bf00      	nop
20005238:	40023c14 	.word	0x40023c14

2000523c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
2000523c:	b480      	push	{r7}
2000523e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
20005240:	4b20      	ldr	r3, [pc, #128]	; (200052c4 <FLASH_FlushCaches+0x88>)
20005242:	681b      	ldr	r3, [r3, #0]
20005244:	f403 7300 	and.w	r3, r3, #512	; 0x200
20005248:	2b00      	cmp	r3, #0
2000524a:	d017      	beq.n	2000527c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
2000524c:	4b1d      	ldr	r3, [pc, #116]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000524e:	681b      	ldr	r3, [r3, #0]
20005250:	4a1c      	ldr	r2, [pc, #112]	; (200052c4 <FLASH_FlushCaches+0x88>)
20005252:	f423 7300 	bic.w	r3, r3, #512	; 0x200
20005256:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
20005258:	4b1a      	ldr	r3, [pc, #104]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000525a:	681b      	ldr	r3, [r3, #0]
2000525c:	4a19      	ldr	r2, [pc, #100]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000525e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
20005262:	6013      	str	r3, [r2, #0]
20005264:	4b17      	ldr	r3, [pc, #92]	; (200052c4 <FLASH_FlushCaches+0x88>)
20005266:	681b      	ldr	r3, [r3, #0]
20005268:	4a16      	ldr	r2, [pc, #88]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000526a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
2000526e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
20005270:	4b14      	ldr	r3, [pc, #80]	; (200052c4 <FLASH_FlushCaches+0x88>)
20005272:	681b      	ldr	r3, [r3, #0]
20005274:	4a13      	ldr	r2, [pc, #76]	; (200052c4 <FLASH_FlushCaches+0x88>)
20005276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000527a:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
2000527c:	4b11      	ldr	r3, [pc, #68]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000527e:	681b      	ldr	r3, [r3, #0]
20005280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20005284:	2b00      	cmp	r3, #0
20005286:	d017      	beq.n	200052b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
20005288:	4b0e      	ldr	r3, [pc, #56]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000528a:	681b      	ldr	r3, [r3, #0]
2000528c:	4a0d      	ldr	r2, [pc, #52]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000528e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
20005292:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
20005294:	4b0b      	ldr	r3, [pc, #44]	; (200052c4 <FLASH_FlushCaches+0x88>)
20005296:	681b      	ldr	r3, [r3, #0]
20005298:	4a0a      	ldr	r2, [pc, #40]	; (200052c4 <FLASH_FlushCaches+0x88>)
2000529a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
2000529e:	6013      	str	r3, [r2, #0]
200052a0:	4b08      	ldr	r3, [pc, #32]	; (200052c4 <FLASH_FlushCaches+0x88>)
200052a2:	681b      	ldr	r3, [r3, #0]
200052a4:	4a07      	ldr	r2, [pc, #28]	; (200052c4 <FLASH_FlushCaches+0x88>)
200052a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
200052aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
200052ac:	4b05      	ldr	r3, [pc, #20]	; (200052c4 <FLASH_FlushCaches+0x88>)
200052ae:	681b      	ldr	r3, [r3, #0]
200052b0:	4a04      	ldr	r2, [pc, #16]	; (200052c4 <FLASH_FlushCaches+0x88>)
200052b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
200052b6:	6013      	str	r3, [r2, #0]
  }
}
200052b8:	bf00      	nop
200052ba:	46bd      	mov	sp, r7
200052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
200052c0:	4770      	bx	lr
200052c2:	bf00      	nop
200052c4:	40023c00 	.word	0x40023c00

200052c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
200052c8:	b480      	push	{r7}
200052ca:	b089      	sub	sp, #36	; 0x24
200052cc:	af00      	add	r7, sp, #0
200052ce:	6078      	str	r0, [r7, #4]
200052d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
200052d2:	2300      	movs	r3, #0
200052d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
200052d6:	2300      	movs	r3, #0
200052d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
200052da:	2300      	movs	r3, #0
200052dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
200052de:	2300      	movs	r3, #0
200052e0:	61fb      	str	r3, [r7, #28]
200052e2:	e16b      	b.n	200055bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
200052e4:	2201      	movs	r2, #1
200052e6:	69fb      	ldr	r3, [r7, #28]
200052e8:	fa02 f303 	lsl.w	r3, r2, r3
200052ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
200052ee:	683b      	ldr	r3, [r7, #0]
200052f0:	681b      	ldr	r3, [r3, #0]
200052f2:	697a      	ldr	r2, [r7, #20]
200052f4:	4013      	ands	r3, r2
200052f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
200052f8:	693a      	ldr	r2, [r7, #16]
200052fa:	697b      	ldr	r3, [r7, #20]
200052fc:	429a      	cmp	r2, r3
200052fe:	f040 815a 	bne.w	200055b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20005302:	683b      	ldr	r3, [r7, #0]
20005304:	685b      	ldr	r3, [r3, #4]
20005306:	f003 0303 	and.w	r3, r3, #3
2000530a:	2b01      	cmp	r3, #1
2000530c:	d005      	beq.n	2000531a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000530e:	683b      	ldr	r3, [r7, #0]
20005310:	685b      	ldr	r3, [r3, #4]
20005312:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
20005316:	2b02      	cmp	r3, #2
20005318:	d130      	bne.n	2000537c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000531a:	687b      	ldr	r3, [r7, #4]
2000531c:	689b      	ldr	r3, [r3, #8]
2000531e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
20005320:	69fb      	ldr	r3, [r7, #28]
20005322:	005b      	lsls	r3, r3, #1
20005324:	2203      	movs	r2, #3
20005326:	fa02 f303 	lsl.w	r3, r2, r3
2000532a:	43db      	mvns	r3, r3
2000532c:	69ba      	ldr	r2, [r7, #24]
2000532e:	4013      	ands	r3, r2
20005330:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
20005332:	683b      	ldr	r3, [r7, #0]
20005334:	68da      	ldr	r2, [r3, #12]
20005336:	69fb      	ldr	r3, [r7, #28]
20005338:	005b      	lsls	r3, r3, #1
2000533a:	fa02 f303 	lsl.w	r3, r2, r3
2000533e:	69ba      	ldr	r2, [r7, #24]
20005340:	4313      	orrs	r3, r2
20005342:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
20005344:	687b      	ldr	r3, [r7, #4]
20005346:	69ba      	ldr	r2, [r7, #24]
20005348:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000534a:	687b      	ldr	r3, [r7, #4]
2000534c:	685b      	ldr	r3, [r3, #4]
2000534e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
20005350:	2201      	movs	r2, #1
20005352:	69fb      	ldr	r3, [r7, #28]
20005354:	fa02 f303 	lsl.w	r3, r2, r3
20005358:	43db      	mvns	r3, r3
2000535a:	69ba      	ldr	r2, [r7, #24]
2000535c:	4013      	ands	r3, r2
2000535e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
20005360:	683b      	ldr	r3, [r7, #0]
20005362:	685b      	ldr	r3, [r3, #4]
20005364:	091b      	lsrs	r3, r3, #4
20005366:	f003 0201 	and.w	r2, r3, #1
2000536a:	69fb      	ldr	r3, [r7, #28]
2000536c:	fa02 f303 	lsl.w	r3, r2, r3
20005370:	69ba      	ldr	r2, [r7, #24]
20005372:	4313      	orrs	r3, r2
20005374:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
20005376:	687b      	ldr	r3, [r7, #4]
20005378:	69ba      	ldr	r2, [r7, #24]
2000537a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
2000537c:	683b      	ldr	r3, [r7, #0]
2000537e:	685b      	ldr	r3, [r3, #4]
20005380:	f003 0303 	and.w	r3, r3, #3
20005384:	2b03      	cmp	r3, #3
20005386:	d017      	beq.n	200053b8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
20005388:	687b      	ldr	r3, [r7, #4]
2000538a:	68db      	ldr	r3, [r3, #12]
2000538c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000538e:	69fb      	ldr	r3, [r7, #28]
20005390:	005b      	lsls	r3, r3, #1
20005392:	2203      	movs	r2, #3
20005394:	fa02 f303 	lsl.w	r3, r2, r3
20005398:	43db      	mvns	r3, r3
2000539a:	69ba      	ldr	r2, [r7, #24]
2000539c:	4013      	ands	r3, r2
2000539e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
200053a0:	683b      	ldr	r3, [r7, #0]
200053a2:	689a      	ldr	r2, [r3, #8]
200053a4:	69fb      	ldr	r3, [r7, #28]
200053a6:	005b      	lsls	r3, r3, #1
200053a8:	fa02 f303 	lsl.w	r3, r2, r3
200053ac:	69ba      	ldr	r2, [r7, #24]
200053ae:	4313      	orrs	r3, r2
200053b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
200053b2:	687b      	ldr	r3, [r7, #4]
200053b4:	69ba      	ldr	r2, [r7, #24]
200053b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
200053b8:	683b      	ldr	r3, [r7, #0]
200053ba:	685b      	ldr	r3, [r3, #4]
200053bc:	f003 0303 	and.w	r3, r3, #3
200053c0:	2b02      	cmp	r3, #2
200053c2:	d123      	bne.n	2000540c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
200053c4:	69fb      	ldr	r3, [r7, #28]
200053c6:	08da      	lsrs	r2, r3, #3
200053c8:	687b      	ldr	r3, [r7, #4]
200053ca:	3208      	adds	r2, #8
200053cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
200053d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
200053d2:	69fb      	ldr	r3, [r7, #28]
200053d4:	f003 0307 	and.w	r3, r3, #7
200053d8:	009b      	lsls	r3, r3, #2
200053da:	220f      	movs	r2, #15
200053dc:	fa02 f303 	lsl.w	r3, r2, r3
200053e0:	43db      	mvns	r3, r3
200053e2:	69ba      	ldr	r2, [r7, #24]
200053e4:	4013      	ands	r3, r2
200053e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
200053e8:	683b      	ldr	r3, [r7, #0]
200053ea:	691a      	ldr	r2, [r3, #16]
200053ec:	69fb      	ldr	r3, [r7, #28]
200053ee:	f003 0307 	and.w	r3, r3, #7
200053f2:	009b      	lsls	r3, r3, #2
200053f4:	fa02 f303 	lsl.w	r3, r2, r3
200053f8:	69ba      	ldr	r2, [r7, #24]
200053fa:	4313      	orrs	r3, r2
200053fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
200053fe:	69fb      	ldr	r3, [r7, #28]
20005400:	08da      	lsrs	r2, r3, #3
20005402:	687b      	ldr	r3, [r7, #4]
20005404:	3208      	adds	r2, #8
20005406:	69b9      	ldr	r1, [r7, #24]
20005408:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000540c:	687b      	ldr	r3, [r7, #4]
2000540e:	681b      	ldr	r3, [r3, #0]
20005410:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
20005412:	69fb      	ldr	r3, [r7, #28]
20005414:	005b      	lsls	r3, r3, #1
20005416:	2203      	movs	r2, #3
20005418:	fa02 f303 	lsl.w	r3, r2, r3
2000541c:	43db      	mvns	r3, r3
2000541e:	69ba      	ldr	r2, [r7, #24]
20005420:	4013      	ands	r3, r2
20005422:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
20005424:	683b      	ldr	r3, [r7, #0]
20005426:	685b      	ldr	r3, [r3, #4]
20005428:	f003 0203 	and.w	r2, r3, #3
2000542c:	69fb      	ldr	r3, [r7, #28]
2000542e:	005b      	lsls	r3, r3, #1
20005430:	fa02 f303 	lsl.w	r3, r2, r3
20005434:	69ba      	ldr	r2, [r7, #24]
20005436:	4313      	orrs	r3, r2
20005438:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000543a:	687b      	ldr	r3, [r7, #4]
2000543c:	69ba      	ldr	r2, [r7, #24]
2000543e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
20005440:	683b      	ldr	r3, [r7, #0]
20005442:	685b      	ldr	r3, [r3, #4]
20005444:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20005448:	2b00      	cmp	r3, #0
2000544a:	f000 80b4 	beq.w	200055b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000544e:	2300      	movs	r3, #0
20005450:	60fb      	str	r3, [r7, #12]
20005452:	4b60      	ldr	r3, [pc, #384]	; (200055d4 <HAL_GPIO_Init+0x30c>)
20005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20005456:	4a5f      	ldr	r2, [pc, #380]	; (200055d4 <HAL_GPIO_Init+0x30c>)
20005458:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000545c:	6453      	str	r3, [r2, #68]	; 0x44
2000545e:	4b5d      	ldr	r3, [pc, #372]	; (200055d4 <HAL_GPIO_Init+0x30c>)
20005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
20005462:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20005466:	60fb      	str	r3, [r7, #12]
20005468:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000546a:	4a5b      	ldr	r2, [pc, #364]	; (200055d8 <HAL_GPIO_Init+0x310>)
2000546c:	69fb      	ldr	r3, [r7, #28]
2000546e:	089b      	lsrs	r3, r3, #2
20005470:	3302      	adds	r3, #2
20005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005476:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
20005478:	69fb      	ldr	r3, [r7, #28]
2000547a:	f003 0303 	and.w	r3, r3, #3
2000547e:	009b      	lsls	r3, r3, #2
20005480:	220f      	movs	r2, #15
20005482:	fa02 f303 	lsl.w	r3, r2, r3
20005486:	43db      	mvns	r3, r3
20005488:	69ba      	ldr	r2, [r7, #24]
2000548a:	4013      	ands	r3, r2
2000548c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000548e:	687b      	ldr	r3, [r7, #4]
20005490:	4a52      	ldr	r2, [pc, #328]	; (200055dc <HAL_GPIO_Init+0x314>)
20005492:	4293      	cmp	r3, r2
20005494:	d02b      	beq.n	200054ee <HAL_GPIO_Init+0x226>
20005496:	687b      	ldr	r3, [r7, #4]
20005498:	4a51      	ldr	r2, [pc, #324]	; (200055e0 <HAL_GPIO_Init+0x318>)
2000549a:	4293      	cmp	r3, r2
2000549c:	d025      	beq.n	200054ea <HAL_GPIO_Init+0x222>
2000549e:	687b      	ldr	r3, [r7, #4]
200054a0:	4a50      	ldr	r2, [pc, #320]	; (200055e4 <HAL_GPIO_Init+0x31c>)
200054a2:	4293      	cmp	r3, r2
200054a4:	d01f      	beq.n	200054e6 <HAL_GPIO_Init+0x21e>
200054a6:	687b      	ldr	r3, [r7, #4]
200054a8:	4a4f      	ldr	r2, [pc, #316]	; (200055e8 <HAL_GPIO_Init+0x320>)
200054aa:	4293      	cmp	r3, r2
200054ac:	d019      	beq.n	200054e2 <HAL_GPIO_Init+0x21a>
200054ae:	687b      	ldr	r3, [r7, #4]
200054b0:	4a4e      	ldr	r2, [pc, #312]	; (200055ec <HAL_GPIO_Init+0x324>)
200054b2:	4293      	cmp	r3, r2
200054b4:	d013      	beq.n	200054de <HAL_GPIO_Init+0x216>
200054b6:	687b      	ldr	r3, [r7, #4]
200054b8:	4a4d      	ldr	r2, [pc, #308]	; (200055f0 <HAL_GPIO_Init+0x328>)
200054ba:	4293      	cmp	r3, r2
200054bc:	d00d      	beq.n	200054da <HAL_GPIO_Init+0x212>
200054be:	687b      	ldr	r3, [r7, #4]
200054c0:	4a4c      	ldr	r2, [pc, #304]	; (200055f4 <HAL_GPIO_Init+0x32c>)
200054c2:	4293      	cmp	r3, r2
200054c4:	d007      	beq.n	200054d6 <HAL_GPIO_Init+0x20e>
200054c6:	687b      	ldr	r3, [r7, #4]
200054c8:	4a4b      	ldr	r2, [pc, #300]	; (200055f8 <HAL_GPIO_Init+0x330>)
200054ca:	4293      	cmp	r3, r2
200054cc:	d101      	bne.n	200054d2 <HAL_GPIO_Init+0x20a>
200054ce:	2307      	movs	r3, #7
200054d0:	e00e      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054d2:	2308      	movs	r3, #8
200054d4:	e00c      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054d6:	2306      	movs	r3, #6
200054d8:	e00a      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054da:	2305      	movs	r3, #5
200054dc:	e008      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054de:	2304      	movs	r3, #4
200054e0:	e006      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054e2:	2303      	movs	r3, #3
200054e4:	e004      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054e6:	2302      	movs	r3, #2
200054e8:	e002      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054ea:	2301      	movs	r3, #1
200054ec:	e000      	b.n	200054f0 <HAL_GPIO_Init+0x228>
200054ee:	2300      	movs	r3, #0
200054f0:	69fa      	ldr	r2, [r7, #28]
200054f2:	f002 0203 	and.w	r2, r2, #3
200054f6:	0092      	lsls	r2, r2, #2
200054f8:	4093      	lsls	r3, r2
200054fa:	69ba      	ldr	r2, [r7, #24]
200054fc:	4313      	orrs	r3, r2
200054fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
20005500:	4935      	ldr	r1, [pc, #212]	; (200055d8 <HAL_GPIO_Init+0x310>)
20005502:	69fb      	ldr	r3, [r7, #28]
20005504:	089b      	lsrs	r3, r3, #2
20005506:	3302      	adds	r3, #2
20005508:	69ba      	ldr	r2, [r7, #24]
2000550a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000550e:	4b3b      	ldr	r3, [pc, #236]	; (200055fc <HAL_GPIO_Init+0x334>)
20005510:	681b      	ldr	r3, [r3, #0]
20005512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005514:	693b      	ldr	r3, [r7, #16]
20005516:	43db      	mvns	r3, r3
20005518:	69ba      	ldr	r2, [r7, #24]
2000551a:	4013      	ands	r3, r2
2000551c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000551e:	683b      	ldr	r3, [r7, #0]
20005520:	685b      	ldr	r3, [r3, #4]
20005522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005526:	2b00      	cmp	r3, #0
20005528:	d003      	beq.n	20005532 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000552a:	69ba      	ldr	r2, [r7, #24]
2000552c:	693b      	ldr	r3, [r7, #16]
2000552e:	4313      	orrs	r3, r2
20005530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
20005532:	4a32      	ldr	r2, [pc, #200]	; (200055fc <HAL_GPIO_Init+0x334>)
20005534:	69bb      	ldr	r3, [r7, #24]
20005536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
20005538:	4b30      	ldr	r3, [pc, #192]	; (200055fc <HAL_GPIO_Init+0x334>)
2000553a:	685b      	ldr	r3, [r3, #4]
2000553c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000553e:	693b      	ldr	r3, [r7, #16]
20005540:	43db      	mvns	r3, r3
20005542:	69ba      	ldr	r2, [r7, #24]
20005544:	4013      	ands	r3, r2
20005546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
20005548:	683b      	ldr	r3, [r7, #0]
2000554a:	685b      	ldr	r3, [r3, #4]
2000554c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005550:	2b00      	cmp	r3, #0
20005552:	d003      	beq.n	2000555c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
20005554:	69ba      	ldr	r2, [r7, #24]
20005556:	693b      	ldr	r3, [r7, #16]
20005558:	4313      	orrs	r3, r2
2000555a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000555c:	4a27      	ldr	r2, [pc, #156]	; (200055fc <HAL_GPIO_Init+0x334>)
2000555e:	69bb      	ldr	r3, [r7, #24]
20005560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
20005562:	4b26      	ldr	r3, [pc, #152]	; (200055fc <HAL_GPIO_Init+0x334>)
20005564:	689b      	ldr	r3, [r3, #8]
20005566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005568:	693b      	ldr	r3, [r7, #16]
2000556a:	43db      	mvns	r3, r3
2000556c:	69ba      	ldr	r2, [r7, #24]
2000556e:	4013      	ands	r3, r2
20005570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
20005572:	683b      	ldr	r3, [r7, #0]
20005574:	685b      	ldr	r3, [r3, #4]
20005576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000557a:	2b00      	cmp	r3, #0
2000557c:	d003      	beq.n	20005586 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000557e:	69ba      	ldr	r2, [r7, #24]
20005580:	693b      	ldr	r3, [r7, #16]
20005582:	4313      	orrs	r3, r2
20005584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
20005586:	4a1d      	ldr	r2, [pc, #116]	; (200055fc <HAL_GPIO_Init+0x334>)
20005588:	69bb      	ldr	r3, [r7, #24]
2000558a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000558c:	4b1b      	ldr	r3, [pc, #108]	; (200055fc <HAL_GPIO_Init+0x334>)
2000558e:	68db      	ldr	r3, [r3, #12]
20005590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
20005592:	693b      	ldr	r3, [r7, #16]
20005594:	43db      	mvns	r3, r3
20005596:	69ba      	ldr	r2, [r7, #24]
20005598:	4013      	ands	r3, r2
2000559a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000559c:	683b      	ldr	r3, [r7, #0]
2000559e:	685b      	ldr	r3, [r3, #4]
200055a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
200055a4:	2b00      	cmp	r3, #0
200055a6:	d003      	beq.n	200055b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
200055a8:	69ba      	ldr	r2, [r7, #24]
200055aa:	693b      	ldr	r3, [r7, #16]
200055ac:	4313      	orrs	r3, r2
200055ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
200055b0:	4a12      	ldr	r2, [pc, #72]	; (200055fc <HAL_GPIO_Init+0x334>)
200055b2:	69bb      	ldr	r3, [r7, #24]
200055b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
200055b6:	69fb      	ldr	r3, [r7, #28]
200055b8:	3301      	adds	r3, #1
200055ba:	61fb      	str	r3, [r7, #28]
200055bc:	69fb      	ldr	r3, [r7, #28]
200055be:	2b0f      	cmp	r3, #15
200055c0:	f67f ae90 	bls.w	200052e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
200055c4:	bf00      	nop
200055c6:	bf00      	nop
200055c8:	3724      	adds	r7, #36	; 0x24
200055ca:	46bd      	mov	sp, r7
200055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200055d0:	4770      	bx	lr
200055d2:	bf00      	nop
200055d4:	40023800 	.word	0x40023800
200055d8:	40013800 	.word	0x40013800
200055dc:	40020000 	.word	0x40020000
200055e0:	40020400 	.word	0x40020400
200055e4:	40020800 	.word	0x40020800
200055e8:	40020c00 	.word	0x40020c00
200055ec:	40021000 	.word	0x40021000
200055f0:	40021400 	.word	0x40021400
200055f4:	40021800 	.word	0x40021800
200055f8:	40021c00 	.word	0x40021c00
200055fc:	40013c00 	.word	0x40013c00

20005600 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
20005600:	b480      	push	{r7}
20005602:	b087      	sub	sp, #28
20005604:	af00      	add	r7, sp, #0
20005606:	6078      	str	r0, [r7, #4]
20005608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000560a:	2300      	movs	r3, #0
2000560c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
2000560e:	2300      	movs	r3, #0
20005610:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
20005612:	2300      	movs	r3, #0
20005614:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
20005616:	2300      	movs	r3, #0
20005618:	617b      	str	r3, [r7, #20]
2000561a:	e0cd      	b.n	200057b8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000561c:	2201      	movs	r2, #1
2000561e:	697b      	ldr	r3, [r7, #20]
20005620:	fa02 f303 	lsl.w	r3, r2, r3
20005624:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
20005626:	683a      	ldr	r2, [r7, #0]
20005628:	693b      	ldr	r3, [r7, #16]
2000562a:	4013      	ands	r3, r2
2000562c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
2000562e:	68fa      	ldr	r2, [r7, #12]
20005630:	693b      	ldr	r3, [r7, #16]
20005632:	429a      	cmp	r2, r3
20005634:	f040 80bd 	bne.w	200057b2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
20005638:	4a65      	ldr	r2, [pc, #404]	; (200057d0 <HAL_GPIO_DeInit+0x1d0>)
2000563a:	697b      	ldr	r3, [r7, #20]
2000563c:	089b      	lsrs	r3, r3, #2
2000563e:	3302      	adds	r3, #2
20005640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
20005644:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
20005646:	697b      	ldr	r3, [r7, #20]
20005648:	f003 0303 	and.w	r3, r3, #3
2000564c:	009b      	lsls	r3, r3, #2
2000564e:	220f      	movs	r2, #15
20005650:	fa02 f303 	lsl.w	r3, r2, r3
20005654:	68ba      	ldr	r2, [r7, #8]
20005656:	4013      	ands	r3, r2
20005658:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
2000565a:	687b      	ldr	r3, [r7, #4]
2000565c:	4a5d      	ldr	r2, [pc, #372]	; (200057d4 <HAL_GPIO_DeInit+0x1d4>)
2000565e:	4293      	cmp	r3, r2
20005660:	d02b      	beq.n	200056ba <HAL_GPIO_DeInit+0xba>
20005662:	687b      	ldr	r3, [r7, #4]
20005664:	4a5c      	ldr	r2, [pc, #368]	; (200057d8 <HAL_GPIO_DeInit+0x1d8>)
20005666:	4293      	cmp	r3, r2
20005668:	d025      	beq.n	200056b6 <HAL_GPIO_DeInit+0xb6>
2000566a:	687b      	ldr	r3, [r7, #4]
2000566c:	4a5b      	ldr	r2, [pc, #364]	; (200057dc <HAL_GPIO_DeInit+0x1dc>)
2000566e:	4293      	cmp	r3, r2
20005670:	d01f      	beq.n	200056b2 <HAL_GPIO_DeInit+0xb2>
20005672:	687b      	ldr	r3, [r7, #4]
20005674:	4a5a      	ldr	r2, [pc, #360]	; (200057e0 <HAL_GPIO_DeInit+0x1e0>)
20005676:	4293      	cmp	r3, r2
20005678:	d019      	beq.n	200056ae <HAL_GPIO_DeInit+0xae>
2000567a:	687b      	ldr	r3, [r7, #4]
2000567c:	4a59      	ldr	r2, [pc, #356]	; (200057e4 <HAL_GPIO_DeInit+0x1e4>)
2000567e:	4293      	cmp	r3, r2
20005680:	d013      	beq.n	200056aa <HAL_GPIO_DeInit+0xaa>
20005682:	687b      	ldr	r3, [r7, #4]
20005684:	4a58      	ldr	r2, [pc, #352]	; (200057e8 <HAL_GPIO_DeInit+0x1e8>)
20005686:	4293      	cmp	r3, r2
20005688:	d00d      	beq.n	200056a6 <HAL_GPIO_DeInit+0xa6>
2000568a:	687b      	ldr	r3, [r7, #4]
2000568c:	4a57      	ldr	r2, [pc, #348]	; (200057ec <HAL_GPIO_DeInit+0x1ec>)
2000568e:	4293      	cmp	r3, r2
20005690:	d007      	beq.n	200056a2 <HAL_GPIO_DeInit+0xa2>
20005692:	687b      	ldr	r3, [r7, #4]
20005694:	4a56      	ldr	r2, [pc, #344]	; (200057f0 <HAL_GPIO_DeInit+0x1f0>)
20005696:	4293      	cmp	r3, r2
20005698:	d101      	bne.n	2000569e <HAL_GPIO_DeInit+0x9e>
2000569a:	2307      	movs	r3, #7
2000569c:	e00e      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
2000569e:	2308      	movs	r3, #8
200056a0:	e00c      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
200056a2:	2306      	movs	r3, #6
200056a4:	e00a      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
200056a6:	2305      	movs	r3, #5
200056a8:	e008      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
200056aa:	2304      	movs	r3, #4
200056ac:	e006      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
200056ae:	2303      	movs	r3, #3
200056b0:	e004      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
200056b2:	2302      	movs	r3, #2
200056b4:	e002      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
200056b6:	2301      	movs	r3, #1
200056b8:	e000      	b.n	200056bc <HAL_GPIO_DeInit+0xbc>
200056ba:	2300      	movs	r3, #0
200056bc:	697a      	ldr	r2, [r7, #20]
200056be:	f002 0203 	and.w	r2, r2, #3
200056c2:	0092      	lsls	r2, r2, #2
200056c4:	4093      	lsls	r3, r2
200056c6:	68ba      	ldr	r2, [r7, #8]
200056c8:	429a      	cmp	r2, r3
200056ca:	d132      	bne.n	20005732 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
200056cc:	4b49      	ldr	r3, [pc, #292]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
200056ce:	681a      	ldr	r2, [r3, #0]
200056d0:	68fb      	ldr	r3, [r7, #12]
200056d2:	43db      	mvns	r3, r3
200056d4:	4947      	ldr	r1, [pc, #284]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
200056d6:	4013      	ands	r3, r2
200056d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
200056da:	4b46      	ldr	r3, [pc, #280]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
200056dc:	685a      	ldr	r2, [r3, #4]
200056de:	68fb      	ldr	r3, [r7, #12]
200056e0:	43db      	mvns	r3, r3
200056e2:	4944      	ldr	r1, [pc, #272]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
200056e4:	4013      	ands	r3, r2
200056e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
200056e8:	4b42      	ldr	r3, [pc, #264]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
200056ea:	689a      	ldr	r2, [r3, #8]
200056ec:	68fb      	ldr	r3, [r7, #12]
200056ee:	43db      	mvns	r3, r3
200056f0:	4940      	ldr	r1, [pc, #256]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
200056f2:	4013      	ands	r3, r2
200056f4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
200056f6:	4b3f      	ldr	r3, [pc, #252]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
200056f8:	68da      	ldr	r2, [r3, #12]
200056fa:	68fb      	ldr	r3, [r7, #12]
200056fc:	43db      	mvns	r3, r3
200056fe:	493d      	ldr	r1, [pc, #244]	; (200057f4 <HAL_GPIO_DeInit+0x1f4>)
20005700:	4013      	ands	r3, r2
20005702:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
20005704:	697b      	ldr	r3, [r7, #20]
20005706:	f003 0303 	and.w	r3, r3, #3
2000570a:	009b      	lsls	r3, r3, #2
2000570c:	220f      	movs	r2, #15
2000570e:	fa02 f303 	lsl.w	r3, r2, r3
20005712:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
20005714:	4a2e      	ldr	r2, [pc, #184]	; (200057d0 <HAL_GPIO_DeInit+0x1d0>)
20005716:	697b      	ldr	r3, [r7, #20]
20005718:	089b      	lsrs	r3, r3, #2
2000571a:	3302      	adds	r3, #2
2000571c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
20005720:	68bb      	ldr	r3, [r7, #8]
20005722:	43da      	mvns	r2, r3
20005724:	482a      	ldr	r0, [pc, #168]	; (200057d0 <HAL_GPIO_DeInit+0x1d0>)
20005726:	697b      	ldr	r3, [r7, #20]
20005728:	089b      	lsrs	r3, r3, #2
2000572a:	400a      	ands	r2, r1
2000572c:	3302      	adds	r3, #2
2000572e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
20005732:	687b      	ldr	r3, [r7, #4]
20005734:	681a      	ldr	r2, [r3, #0]
20005736:	697b      	ldr	r3, [r7, #20]
20005738:	005b      	lsls	r3, r3, #1
2000573a:	2103      	movs	r1, #3
2000573c:	fa01 f303 	lsl.w	r3, r1, r3
20005740:	43db      	mvns	r3, r3
20005742:	401a      	ands	r2, r3
20005744:	687b      	ldr	r3, [r7, #4]
20005746:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
20005748:	697b      	ldr	r3, [r7, #20]
2000574a:	08da      	lsrs	r2, r3, #3
2000574c:	687b      	ldr	r3, [r7, #4]
2000574e:	3208      	adds	r2, #8
20005750:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
20005754:	697b      	ldr	r3, [r7, #20]
20005756:	f003 0307 	and.w	r3, r3, #7
2000575a:	009b      	lsls	r3, r3, #2
2000575c:	220f      	movs	r2, #15
2000575e:	fa02 f303 	lsl.w	r3, r2, r3
20005762:	43db      	mvns	r3, r3
20005764:	697a      	ldr	r2, [r7, #20]
20005766:	08d2      	lsrs	r2, r2, #3
20005768:	4019      	ands	r1, r3
2000576a:	687b      	ldr	r3, [r7, #4]
2000576c:	3208      	adds	r2, #8
2000576e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
20005772:	687b      	ldr	r3, [r7, #4]
20005774:	68da      	ldr	r2, [r3, #12]
20005776:	697b      	ldr	r3, [r7, #20]
20005778:	005b      	lsls	r3, r3, #1
2000577a:	2103      	movs	r1, #3
2000577c:	fa01 f303 	lsl.w	r3, r1, r3
20005780:	43db      	mvns	r3, r3
20005782:	401a      	ands	r2, r3
20005784:	687b      	ldr	r3, [r7, #4]
20005786:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
20005788:	687b      	ldr	r3, [r7, #4]
2000578a:	685a      	ldr	r2, [r3, #4]
2000578c:	2101      	movs	r1, #1
2000578e:	697b      	ldr	r3, [r7, #20]
20005790:	fa01 f303 	lsl.w	r3, r1, r3
20005794:	43db      	mvns	r3, r3
20005796:	401a      	ands	r2, r3
20005798:	687b      	ldr	r3, [r7, #4]
2000579a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000579c:	687b      	ldr	r3, [r7, #4]
2000579e:	689a      	ldr	r2, [r3, #8]
200057a0:	697b      	ldr	r3, [r7, #20]
200057a2:	005b      	lsls	r3, r3, #1
200057a4:	2103      	movs	r1, #3
200057a6:	fa01 f303 	lsl.w	r3, r1, r3
200057aa:	43db      	mvns	r3, r3
200057ac:	401a      	ands	r2, r3
200057ae:	687b      	ldr	r3, [r7, #4]
200057b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
200057b2:	697b      	ldr	r3, [r7, #20]
200057b4:	3301      	adds	r3, #1
200057b6:	617b      	str	r3, [r7, #20]
200057b8:	697b      	ldr	r3, [r7, #20]
200057ba:	2b0f      	cmp	r3, #15
200057bc:	f67f af2e 	bls.w	2000561c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
200057c0:	bf00      	nop
200057c2:	bf00      	nop
200057c4:	371c      	adds	r7, #28
200057c6:	46bd      	mov	sp, r7
200057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
200057cc:	4770      	bx	lr
200057ce:	bf00      	nop
200057d0:	40013800 	.word	0x40013800
200057d4:	40020000 	.word	0x40020000
200057d8:	40020400 	.word	0x40020400
200057dc:	40020800 	.word	0x40020800
200057e0:	40020c00 	.word	0x40020c00
200057e4:	40021000 	.word	0x40021000
200057e8:	40021400 	.word	0x40021400
200057ec:	40021800 	.word	0x40021800
200057f0:	40021c00 	.word	0x40021c00
200057f4:	40013c00 	.word	0x40013c00

200057f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
200057f8:	b480      	push	{r7}
200057fa:	b085      	sub	sp, #20
200057fc:	af00      	add	r7, sp, #0
200057fe:	6078      	str	r0, [r7, #4]
20005800:	460b      	mov	r3, r1
20005802:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
20005804:	687b      	ldr	r3, [r7, #4]
20005806:	691a      	ldr	r2, [r3, #16]
20005808:	887b      	ldrh	r3, [r7, #2]
2000580a:	4013      	ands	r3, r2
2000580c:	2b00      	cmp	r3, #0
2000580e:	d002      	beq.n	20005816 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
20005810:	2301      	movs	r3, #1
20005812:	73fb      	strb	r3, [r7, #15]
20005814:	e001      	b.n	2000581a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
20005816:	2300      	movs	r3, #0
20005818:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2000581a:	7bfb      	ldrb	r3, [r7, #15]
}
2000581c:	4618      	mov	r0, r3
2000581e:	3714      	adds	r7, #20
20005820:	46bd      	mov	sp, r7
20005822:	f85d 7b04 	ldr.w	r7, [sp], #4
20005826:	4770      	bx	lr

20005828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20005828:	b480      	push	{r7}
2000582a:	b083      	sub	sp, #12
2000582c:	af00      	add	r7, sp, #0
2000582e:	6078      	str	r0, [r7, #4]
20005830:	460b      	mov	r3, r1
20005832:	807b      	strh	r3, [r7, #2]
20005834:	4613      	mov	r3, r2
20005836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
20005838:	787b      	ldrb	r3, [r7, #1]
2000583a:	2b00      	cmp	r3, #0
2000583c:	d003      	beq.n	20005846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000583e:	887a      	ldrh	r2, [r7, #2]
20005840:	687b      	ldr	r3, [r7, #4]
20005842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
20005844:	e003      	b.n	2000584e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
20005846:	887b      	ldrh	r3, [r7, #2]
20005848:	041a      	lsls	r2, r3, #16
2000584a:	687b      	ldr	r3, [r7, #4]
2000584c:	619a      	str	r2, [r3, #24]
}
2000584e:	bf00      	nop
20005850:	370c      	adds	r7, #12
20005852:	46bd      	mov	sp, r7
20005854:	f85d 7b04 	ldr.w	r7, [sp], #4
20005858:	4770      	bx	lr

2000585a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000585a:	b480      	push	{r7}
2000585c:	b085      	sub	sp, #20
2000585e:	af00      	add	r7, sp, #0
20005860:	6078      	str	r0, [r7, #4]
20005862:	460b      	mov	r3, r1
20005864:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
20005866:	687b      	ldr	r3, [r7, #4]
20005868:	695b      	ldr	r3, [r3, #20]
2000586a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
2000586c:	887a      	ldrh	r2, [r7, #2]
2000586e:	68fb      	ldr	r3, [r7, #12]
20005870:	4013      	ands	r3, r2
20005872:	041a      	lsls	r2, r3, #16
20005874:	68fb      	ldr	r3, [r7, #12]
20005876:	43d9      	mvns	r1, r3
20005878:	887b      	ldrh	r3, [r7, #2]
2000587a:	400b      	ands	r3, r1
2000587c:	431a      	orrs	r2, r3
2000587e:	687b      	ldr	r3, [r7, #4]
20005880:	619a      	str	r2, [r3, #24]
}
20005882:	bf00      	nop
20005884:	3714      	adds	r7, #20
20005886:	46bd      	mov	sp, r7
20005888:	f85d 7b04 	ldr.w	r7, [sp], #4
2000588c:	4770      	bx	lr

2000588e <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000588e:	b480      	push	{r7}
20005890:	b085      	sub	sp, #20
20005892:	af00      	add	r7, sp, #0
20005894:	6078      	str	r0, [r7, #4]
20005896:	460b      	mov	r3, r1
20005898:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
2000589a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000589e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
200058a0:	887a      	ldrh	r2, [r7, #2]
200058a2:	68fb      	ldr	r3, [r7, #12]
200058a4:	4313      	orrs	r3, r2
200058a6:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
200058a8:	68fa      	ldr	r2, [r7, #12]
200058aa:	687b      	ldr	r3, [r7, #4]
200058ac:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
200058ae:	887a      	ldrh	r2, [r7, #2]
200058b0:	687b      	ldr	r3, [r7, #4]
200058b2:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
200058b4:	68fa      	ldr	r2, [r7, #12]
200058b6:	687b      	ldr	r3, [r7, #4]
200058b8:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
200058ba:	687b      	ldr	r3, [r7, #4]
200058bc:	69db      	ldr	r3, [r3, #28]
200058be:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
200058c0:	687b      	ldr	r3, [r7, #4]
200058c2:	69db      	ldr	r3, [r3, #28]
200058c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200058c8:	2b00      	cmp	r3, #0
200058ca:	d001      	beq.n	200058d0 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
200058cc:	2300      	movs	r3, #0
200058ce:	e000      	b.n	200058d2 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
200058d0:	2301      	movs	r3, #1
  }
}
200058d2:	4618      	mov	r0, r3
200058d4:	3714      	adds	r7, #20
200058d6:	46bd      	mov	sp, r7
200058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
200058dc:	4770      	bx	lr
	...

200058e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
200058e0:	b580      	push	{r7, lr}
200058e2:	b082      	sub	sp, #8
200058e4:	af00      	add	r7, sp, #0
200058e6:	4603      	mov	r3, r0
200058e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
200058ea:	4b08      	ldr	r3, [pc, #32]	; (2000590c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
200058ec:	695a      	ldr	r2, [r3, #20]
200058ee:	88fb      	ldrh	r3, [r7, #6]
200058f0:	4013      	ands	r3, r2
200058f2:	2b00      	cmp	r3, #0
200058f4:	d006      	beq.n	20005904 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
200058f6:	4a05      	ldr	r2, [pc, #20]	; (2000590c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
200058f8:	88fb      	ldrh	r3, [r7, #6]
200058fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
200058fc:	88fb      	ldrh	r3, [r7, #6]
200058fe:	4618      	mov	r0, r3
20005900:	f000 f806 	bl	20005910 <HAL_GPIO_EXTI_Callback>
  }
}
20005904:	bf00      	nop
20005906:	3708      	adds	r7, #8
20005908:	46bd      	mov	sp, r7
2000590a:	bd80      	pop	{r7, pc}
2000590c:	40013c00 	.word	0x40013c00

20005910 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
20005910:	b480      	push	{r7}
20005912:	b083      	sub	sp, #12
20005914:	af00      	add	r7, sp, #0
20005916:	4603      	mov	r3, r0
20005918:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
2000591a:	bf00      	nop
2000591c:	370c      	adds	r7, #12
2000591e:	46bd      	mov	sp, r7
20005920:	f85d 7b04 	ldr.w	r7, [sp], #4
20005924:	4770      	bx	lr
	...

20005928 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
20005928:	b480      	push	{r7}
2000592a:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
2000592c:	4b08      	ldr	r3, [pc, #32]	; (20005950 <HAL_PWR_DeInit+0x28>)
2000592e:	6a1b      	ldr	r3, [r3, #32]
20005930:	4a07      	ldr	r2, [pc, #28]	; (20005950 <HAL_PWR_DeInit+0x28>)
20005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20005936:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
20005938:	4b05      	ldr	r3, [pc, #20]	; (20005950 <HAL_PWR_DeInit+0x28>)
2000593a:	6a1b      	ldr	r3, [r3, #32]
2000593c:	4a04      	ldr	r2, [pc, #16]	; (20005950 <HAL_PWR_DeInit+0x28>)
2000593e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20005942:	6213      	str	r3, [r2, #32]
}
20005944:	bf00      	nop
20005946:	46bd      	mov	sp, r7
20005948:	f85d 7b04 	ldr.w	r7, [sp], #4
2000594c:	4770      	bx	lr
2000594e:	bf00      	nop
20005950:	40023800 	.word	0x40023800

20005954 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
20005954:	b480      	push	{r7}
20005956:	b083      	sub	sp, #12
20005958:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
2000595a:	4b06      	ldr	r3, [pc, #24]	; (20005974 <HAL_PWR_EnableBkUpAccess+0x20>)
2000595c:	2201      	movs	r2, #1
2000595e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005960:	4b05      	ldr	r3, [pc, #20]	; (20005978 <HAL_PWR_EnableBkUpAccess+0x24>)
20005962:	681b      	ldr	r3, [r3, #0]
20005964:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
20005966:	687b      	ldr	r3, [r7, #4]
}
20005968:	bf00      	nop
2000596a:	370c      	adds	r7, #12
2000596c:	46bd      	mov	sp, r7
2000596e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005972:	4770      	bx	lr
20005974:	420e0020 	.word	0x420e0020
20005978:	40007000 	.word	0x40007000

2000597c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
2000597c:	b480      	push	{r7}
2000597e:	b083      	sub	sp, #12
20005980:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
20005982:	4b06      	ldr	r3, [pc, #24]	; (2000599c <HAL_PWR_DisableBkUpAccess+0x20>)
20005984:	2200      	movs	r2, #0
20005986:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
20005988:	4b05      	ldr	r3, [pc, #20]	; (200059a0 <HAL_PWR_DisableBkUpAccess+0x24>)
2000598a:	681b      	ldr	r3, [r3, #0]
2000598c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
2000598e:	687b      	ldr	r3, [r7, #4]
}
20005990:	bf00      	nop
20005992:	370c      	adds	r7, #12
20005994:	46bd      	mov	sp, r7
20005996:	f85d 7b04 	ldr.w	r7, [sp], #4
2000599a:	4770      	bx	lr
2000599c:	420e0020 	.word	0x420e0020
200059a0:	40007000 	.word	0x40007000

200059a4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
200059a4:	b480      	push	{r7}
200059a6:	b083      	sub	sp, #12
200059a8:	af00      	add	r7, sp, #0
200059aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
200059ac:	4b2b      	ldr	r3, [pc, #172]	; (20005a5c <HAL_PWR_ConfigPVD+0xb8>)
200059ae:	681b      	ldr	r3, [r3, #0]
200059b0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
200059b4:	687b      	ldr	r3, [r7, #4]
200059b6:	681b      	ldr	r3, [r3, #0]
200059b8:	4928      	ldr	r1, [pc, #160]	; (20005a5c <HAL_PWR_ConfigPVD+0xb8>)
200059ba:	4313      	orrs	r3, r2
200059bc:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
200059be:	4b28      	ldr	r3, [pc, #160]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059c0:	685b      	ldr	r3, [r3, #4]
200059c2:	4a27      	ldr	r2, [pc, #156]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200059c8:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
200059ca:	4b25      	ldr	r3, [pc, #148]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059cc:	681b      	ldr	r3, [r3, #0]
200059ce:	4a24      	ldr	r2, [pc, #144]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200059d4:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
200059d6:	4b22      	ldr	r3, [pc, #136]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059d8:	689b      	ldr	r3, [r3, #8]
200059da:	4a21      	ldr	r2, [pc, #132]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200059e0:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
200059e2:	4b1f      	ldr	r3, [pc, #124]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059e4:	68db      	ldr	r3, [r3, #12]
200059e6:	4a1e      	ldr	r2, [pc, #120]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
200059ec:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
200059ee:	687b      	ldr	r3, [r7, #4]
200059f0:	685b      	ldr	r3, [r3, #4]
200059f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200059f6:	2b00      	cmp	r3, #0
200059f8:	d005      	beq.n	20005a06 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
200059fa:	4b19      	ldr	r3, [pc, #100]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
200059fc:	681b      	ldr	r3, [r3, #0]
200059fe:	4a18      	ldr	r2, [pc, #96]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
20005a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005a04:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
20005a06:	687b      	ldr	r3, [r7, #4]
20005a08:	685b      	ldr	r3, [r3, #4]
20005a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005a0e:	2b00      	cmp	r3, #0
20005a10:	d005      	beq.n	20005a1e <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
20005a12:	4b13      	ldr	r3, [pc, #76]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
20005a14:	685b      	ldr	r3, [r3, #4]
20005a16:	4a12      	ldr	r2, [pc, #72]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
20005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005a1c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
20005a1e:	687b      	ldr	r3, [r7, #4]
20005a20:	685b      	ldr	r3, [r3, #4]
20005a22:	f003 0301 	and.w	r3, r3, #1
20005a26:	2b00      	cmp	r3, #0
20005a28:	d005      	beq.n	20005a36 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
20005a2a:	4b0d      	ldr	r3, [pc, #52]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
20005a2c:	689b      	ldr	r3, [r3, #8]
20005a2e:	4a0c      	ldr	r2, [pc, #48]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
20005a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005a34:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
20005a36:	687b      	ldr	r3, [r7, #4]
20005a38:	685b      	ldr	r3, [r3, #4]
20005a3a:	f003 0302 	and.w	r3, r3, #2
20005a3e:	2b00      	cmp	r3, #0
20005a40:	d005      	beq.n	20005a4e <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
20005a42:	4b07      	ldr	r3, [pc, #28]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
20005a44:	68db      	ldr	r3, [r3, #12]
20005a46:	4a06      	ldr	r2, [pc, #24]	; (20005a60 <HAL_PWR_ConfigPVD+0xbc>)
20005a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005a4c:	60d3      	str	r3, [r2, #12]
  }
}
20005a4e:	bf00      	nop
20005a50:	370c      	adds	r7, #12
20005a52:	46bd      	mov	sp, r7
20005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a58:	4770      	bx	lr
20005a5a:	bf00      	nop
20005a5c:	40007000 	.word	0x40007000
20005a60:	40013c00 	.word	0x40013c00

20005a64 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
20005a64:	b480      	push	{r7}
20005a66:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
20005a68:	4b03      	ldr	r3, [pc, #12]	; (20005a78 <HAL_PWR_EnablePVD+0x14>)
20005a6a:	2201      	movs	r2, #1
20005a6c:	601a      	str	r2, [r3, #0]
}
20005a6e:	bf00      	nop
20005a70:	46bd      	mov	sp, r7
20005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a76:	4770      	bx	lr
20005a78:	420e0010 	.word	0x420e0010

20005a7c <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
20005a7c:	b480      	push	{r7}
20005a7e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
20005a80:	4b03      	ldr	r3, [pc, #12]	; (20005a90 <HAL_PWR_DisablePVD+0x14>)
20005a82:	2200      	movs	r2, #0
20005a84:	601a      	str	r2, [r3, #0]
}
20005a86:	bf00      	nop
20005a88:	46bd      	mov	sp, r7
20005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20005a8e:	4770      	bx	lr
20005a90:	420e0010 	.word	0x420e0010

20005a94 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
20005a94:	b480      	push	{r7}
20005a96:	b083      	sub	sp, #12
20005a98:	af00      	add	r7, sp, #0
20005a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
20005a9c:	4b05      	ldr	r3, [pc, #20]	; (20005ab4 <HAL_PWR_EnableWakeUpPin+0x20>)
20005a9e:	685a      	ldr	r2, [r3, #4]
20005aa0:	4904      	ldr	r1, [pc, #16]	; (20005ab4 <HAL_PWR_EnableWakeUpPin+0x20>)
20005aa2:	687b      	ldr	r3, [r7, #4]
20005aa4:	4313      	orrs	r3, r2
20005aa6:	604b      	str	r3, [r1, #4]
}
20005aa8:	bf00      	nop
20005aaa:	370c      	adds	r7, #12
20005aac:	46bd      	mov	sp, r7
20005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ab2:	4770      	bx	lr
20005ab4:	40007000 	.word	0x40007000

20005ab8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
20005ab8:	b480      	push	{r7}
20005aba:	b083      	sub	sp, #12
20005abc:	af00      	add	r7, sp, #0
20005abe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
20005ac0:	4b06      	ldr	r3, [pc, #24]	; (20005adc <HAL_PWR_DisableWakeUpPin+0x24>)
20005ac2:	685a      	ldr	r2, [r3, #4]
20005ac4:	687b      	ldr	r3, [r7, #4]
20005ac6:	43db      	mvns	r3, r3
20005ac8:	4904      	ldr	r1, [pc, #16]	; (20005adc <HAL_PWR_DisableWakeUpPin+0x24>)
20005aca:	4013      	ands	r3, r2
20005acc:	604b      	str	r3, [r1, #4]
}
20005ace:	bf00      	nop
20005ad0:	370c      	adds	r7, #12
20005ad2:	46bd      	mov	sp, r7
20005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
20005ad8:	4770      	bx	lr
20005ada:	bf00      	nop
20005adc:	40007000 	.word	0x40007000

20005ae0 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
20005ae0:	b480      	push	{r7}
20005ae2:	b083      	sub	sp, #12
20005ae4:	af00      	add	r7, sp, #0
20005ae6:	6078      	str	r0, [r7, #4]
20005ae8:	460b      	mov	r3, r1
20005aea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20005aec:	4b09      	ldr	r3, [pc, #36]	; (20005b14 <HAL_PWR_EnterSLEEPMode+0x34>)
20005aee:	691b      	ldr	r3, [r3, #16]
20005af0:	4a08      	ldr	r2, [pc, #32]	; (20005b14 <HAL_PWR_EnterSLEEPMode+0x34>)
20005af2:	f023 0304 	bic.w	r3, r3, #4
20005af6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
20005af8:	78fb      	ldrb	r3, [r7, #3]
20005afa:	2b01      	cmp	r3, #1
20005afc:	d101      	bne.n	20005b02 <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
20005afe:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
20005b00:	e002      	b.n	20005b08 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
20005b02:	bf40      	sev
    __WFE();
20005b04:	bf20      	wfe
    __WFE();
20005b06:	bf20      	wfe
}
20005b08:	bf00      	nop
20005b0a:	370c      	adds	r7, #12
20005b0c:	46bd      	mov	sp, r7
20005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b12:	4770      	bx	lr
20005b14:	e000ed00 	.word	0xe000ed00

20005b18 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
20005b18:	b480      	push	{r7}
20005b1a:	b083      	sub	sp, #12
20005b1c:	af00      	add	r7, sp, #0
20005b1e:	6078      	str	r0, [r7, #4]
20005b20:	460b      	mov	r3, r1
20005b22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
20005b24:	4b10      	ldr	r3, [pc, #64]	; (20005b68 <HAL_PWR_EnterSTOPMode+0x50>)
20005b26:	681b      	ldr	r3, [r3, #0]
20005b28:	f023 0203 	bic.w	r2, r3, #3
20005b2c:	490e      	ldr	r1, [pc, #56]	; (20005b68 <HAL_PWR_EnterSTOPMode+0x50>)
20005b2e:	687b      	ldr	r3, [r7, #4]
20005b30:	4313      	orrs	r3, r2
20005b32:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20005b34:	4b0d      	ldr	r3, [pc, #52]	; (20005b6c <HAL_PWR_EnterSTOPMode+0x54>)
20005b36:	691b      	ldr	r3, [r3, #16]
20005b38:	4a0c      	ldr	r2, [pc, #48]	; (20005b6c <HAL_PWR_EnterSTOPMode+0x54>)
20005b3a:	f043 0304 	orr.w	r3, r3, #4
20005b3e:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
20005b40:	78fb      	ldrb	r3, [r7, #3]
20005b42:	2b01      	cmp	r3, #1
20005b44:	d101      	bne.n	20005b4a <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
20005b46:	bf30      	wfi
20005b48:	e002      	b.n	20005b50 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
20005b4a:	bf40      	sev
    __WFE();
20005b4c:	bf20      	wfe
    __WFE();
20005b4e:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
20005b50:	4b06      	ldr	r3, [pc, #24]	; (20005b6c <HAL_PWR_EnterSTOPMode+0x54>)
20005b52:	691b      	ldr	r3, [r3, #16]
20005b54:	4a05      	ldr	r2, [pc, #20]	; (20005b6c <HAL_PWR_EnterSTOPMode+0x54>)
20005b56:	f023 0304 	bic.w	r3, r3, #4
20005b5a:	6113      	str	r3, [r2, #16]
}
20005b5c:	bf00      	nop
20005b5e:	370c      	adds	r7, #12
20005b60:	46bd      	mov	sp, r7
20005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b66:	4770      	bx	lr
20005b68:	40007000 	.word	0x40007000
20005b6c:	e000ed00 	.word	0xe000ed00

20005b70 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
20005b70:	b480      	push	{r7}
20005b72:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
20005b74:	4b08      	ldr	r3, [pc, #32]	; (20005b98 <HAL_PWR_EnterSTANDBYMode+0x28>)
20005b76:	681b      	ldr	r3, [r3, #0]
20005b78:	4a07      	ldr	r2, [pc, #28]	; (20005b98 <HAL_PWR_EnterSTANDBYMode+0x28>)
20005b7a:	f043 0302 	orr.w	r3, r3, #2
20005b7e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
20005b80:	4b06      	ldr	r3, [pc, #24]	; (20005b9c <HAL_PWR_EnterSTANDBYMode+0x2c>)
20005b82:	691b      	ldr	r3, [r3, #16]
20005b84:	4a05      	ldr	r2, [pc, #20]	; (20005b9c <HAL_PWR_EnterSTANDBYMode+0x2c>)
20005b86:	f043 0304 	orr.w	r3, r3, #4
20005b8a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
20005b8c:	bf30      	wfi
}
20005b8e:	bf00      	nop
20005b90:	46bd      	mov	sp, r7
20005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
20005b96:	4770      	bx	lr
20005b98:	40007000 	.word	0x40007000
20005b9c:	e000ed00 	.word	0xe000ed00

20005ba0 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
20005ba0:	b580      	push	{r7, lr}
20005ba2:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
20005ba4:	4b06      	ldr	r3, [pc, #24]	; (20005bc0 <HAL_PWR_PVD_IRQHandler+0x20>)
20005ba6:	695b      	ldr	r3, [r3, #20]
20005ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20005bac:	2b00      	cmp	r3, #0
20005bae:	d005      	beq.n	20005bbc <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
20005bb0:	f000 f808 	bl	20005bc4 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
20005bb4:	4b02      	ldr	r3, [pc, #8]	; (20005bc0 <HAL_PWR_PVD_IRQHandler+0x20>)
20005bb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
20005bba:	615a      	str	r2, [r3, #20]
  }
}
20005bbc:	bf00      	nop
20005bbe:	bd80      	pop	{r7, pc}
20005bc0:	40013c00 	.word	0x40013c00

20005bc4 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
20005bc4:	b480      	push	{r7}
20005bc6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
20005bc8:	bf00      	nop
20005bca:	46bd      	mov	sp, r7
20005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
20005bd0:	4770      	bx	lr
	...

20005bd4 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
20005bd4:	b480      	push	{r7}
20005bd6:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20005bd8:	4b05      	ldr	r3, [pc, #20]	; (20005bf0 <HAL_PWR_EnableSleepOnExit+0x1c>)
20005bda:	691b      	ldr	r3, [r3, #16]
20005bdc:	4a04      	ldr	r2, [pc, #16]	; (20005bf0 <HAL_PWR_EnableSleepOnExit+0x1c>)
20005bde:	f043 0302 	orr.w	r3, r3, #2
20005be2:	6113      	str	r3, [r2, #16]
}
20005be4:	bf00      	nop
20005be6:	46bd      	mov	sp, r7
20005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
20005bec:	4770      	bx	lr
20005bee:	bf00      	nop
20005bf0:	e000ed00 	.word	0xe000ed00

20005bf4 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
20005bf4:	b480      	push	{r7}
20005bf6:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
20005bf8:	4b05      	ldr	r3, [pc, #20]	; (20005c10 <HAL_PWR_DisableSleepOnExit+0x1c>)
20005bfa:	691b      	ldr	r3, [r3, #16]
20005bfc:	4a04      	ldr	r2, [pc, #16]	; (20005c10 <HAL_PWR_DisableSleepOnExit+0x1c>)
20005bfe:	f023 0302 	bic.w	r3, r3, #2
20005c02:	6113      	str	r3, [r2, #16]
}
20005c04:	bf00      	nop
20005c06:	46bd      	mov	sp, r7
20005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c0c:	4770      	bx	lr
20005c0e:	bf00      	nop
20005c10:	e000ed00 	.word	0xe000ed00

20005c14 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
20005c14:	b480      	push	{r7}
20005c16:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20005c18:	4b05      	ldr	r3, [pc, #20]	; (20005c30 <HAL_PWR_EnableSEVOnPend+0x1c>)
20005c1a:	691b      	ldr	r3, [r3, #16]
20005c1c:	4a04      	ldr	r2, [pc, #16]	; (20005c30 <HAL_PWR_EnableSEVOnPend+0x1c>)
20005c1e:	f043 0310 	orr.w	r3, r3, #16
20005c22:	6113      	str	r3, [r2, #16]
}
20005c24:	bf00      	nop
20005c26:	46bd      	mov	sp, r7
20005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c2c:	4770      	bx	lr
20005c2e:	bf00      	nop
20005c30:	e000ed00 	.word	0xe000ed00

20005c34 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
20005c34:	b480      	push	{r7}
20005c36:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
20005c38:	4b05      	ldr	r3, [pc, #20]	; (20005c50 <HAL_PWR_DisableSEVOnPend+0x1c>)
20005c3a:	691b      	ldr	r3, [r3, #16]
20005c3c:	4a04      	ldr	r2, [pc, #16]	; (20005c50 <HAL_PWR_DisableSEVOnPend+0x1c>)
20005c3e:	f023 0310 	bic.w	r3, r3, #16
20005c42:	6113      	str	r3, [r2, #16]
}
20005c44:	bf00      	nop
20005c46:	46bd      	mov	sp, r7
20005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
20005c4c:	4770      	bx	lr
20005c4e:	bf00      	nop
20005c50:	e000ed00 	.word	0xe000ed00

20005c54 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
20005c54:	b580      	push	{r7, lr}
20005c56:	b082      	sub	sp, #8
20005c58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20005c5a:	2300      	movs	r3, #0
20005c5c:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
20005c5e:	4b0e      	ldr	r3, [pc, #56]	; (20005c98 <HAL_PWREx_EnableBkUpReg+0x44>)
20005c60:	2201      	movs	r2, #1
20005c62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20005c64:	f7fb fe50 	bl	20001908 <HAL_GetTick>
20005c68:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
20005c6a:	e009      	b.n	20005c80 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20005c6c:	f7fb fe4c 	bl	20001908 <HAL_GetTick>
20005c70:	4602      	mov	r2, r0
20005c72:	687b      	ldr	r3, [r7, #4]
20005c74:	1ad3      	subs	r3, r2, r3
20005c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20005c7a:	d901      	bls.n	20005c80 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20005c7c:	2303      	movs	r3, #3
20005c7e:	e006      	b.n	20005c8e <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
20005c80:	4b06      	ldr	r3, [pc, #24]	; (20005c9c <HAL_PWREx_EnableBkUpReg+0x48>)
20005c82:	685b      	ldr	r3, [r3, #4]
20005c84:	f003 0308 	and.w	r3, r3, #8
20005c88:	2b08      	cmp	r3, #8
20005c8a:	d1ef      	bne.n	20005c6c <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20005c8c:	2300      	movs	r3, #0
}
20005c8e:	4618      	mov	r0, r3
20005c90:	3708      	adds	r7, #8
20005c92:	46bd      	mov	sp, r7
20005c94:	bd80      	pop	{r7, pc}
20005c96:	bf00      	nop
20005c98:	420e00a4 	.word	0x420e00a4
20005c9c:	40007000 	.word	0x40007000

20005ca0 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
20005ca0:	b580      	push	{r7, lr}
20005ca2:	b082      	sub	sp, #8
20005ca4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
20005ca6:	2300      	movs	r3, #0
20005ca8:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
20005caa:	4b0e      	ldr	r3, [pc, #56]	; (20005ce4 <HAL_PWREx_DisableBkUpReg+0x44>)
20005cac:	2200      	movs	r2, #0
20005cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
20005cb0:	f7fb fe2a 	bl	20001908 <HAL_GetTick>
20005cb4:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20005cb6:	e009      	b.n	20005ccc <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
20005cb8:	f7fb fe26 	bl	20001908 <HAL_GetTick>
20005cbc:	4602      	mov	r2, r0
20005cbe:	687b      	ldr	r3, [r7, #4]
20005cc0:	1ad3      	subs	r3, r2, r3
20005cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20005cc6:	d901      	bls.n	20005ccc <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
20005cc8:	2303      	movs	r3, #3
20005cca:	e006      	b.n	20005cda <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
20005ccc:	4b06      	ldr	r3, [pc, #24]	; (20005ce8 <HAL_PWREx_DisableBkUpReg+0x48>)
20005cce:	685b      	ldr	r3, [r3, #4]
20005cd0:	f003 0308 	and.w	r3, r3, #8
20005cd4:	2b08      	cmp	r3, #8
20005cd6:	d0ef      	beq.n	20005cb8 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
20005cd8:	2300      	movs	r3, #0
}
20005cda:	4618      	mov	r0, r3
20005cdc:	3708      	adds	r7, #8
20005cde:	46bd      	mov	sp, r7
20005ce0:	bd80      	pop	{r7, pc}
20005ce2:	bf00      	nop
20005ce4:	420e00a4 	.word	0x420e00a4
20005ce8:	40007000 	.word	0x40007000

20005cec <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
20005cec:	b480      	push	{r7}
20005cee:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
20005cf0:	4b03      	ldr	r3, [pc, #12]	; (20005d00 <HAL_PWREx_EnableFlashPowerDown+0x14>)
20005cf2:	2201      	movs	r2, #1
20005cf4:	601a      	str	r2, [r3, #0]
}
20005cf6:	bf00      	nop
20005cf8:	46bd      	mov	sp, r7
20005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
20005cfe:	4770      	bx	lr
20005d00:	420e0024 	.word	0x420e0024

20005d04 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
20005d04:	b480      	push	{r7}
20005d06:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
20005d08:	4b03      	ldr	r3, [pc, #12]	; (20005d18 <HAL_PWREx_DisableFlashPowerDown+0x14>)
20005d0a:	2200      	movs	r2, #0
20005d0c:	601a      	str	r2, [r3, #0]
}
20005d0e:	bf00      	nop
20005d10:	46bd      	mov	sp, r7
20005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d16:	4770      	bx	lr
20005d18:	420e0024 	.word	0x420e0024

20005d1c <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
20005d1c:	b480      	push	{r7}
20005d1e:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
20005d20:	4b04      	ldr	r3, [pc, #16]	; (20005d34 <HAL_PWREx_GetVoltageRange+0x18>)
20005d22:	681b      	ldr	r3, [r3, #0]
20005d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
20005d28:	4618      	mov	r0, r3
20005d2a:	46bd      	mov	sp, r7
20005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
20005d30:	4770      	bx	lr
20005d32:	bf00      	nop
20005d34:	40007000 	.word	0x40007000

20005d38 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
20005d38:	b580      	push	{r7, lr}
20005d3a:	b086      	sub	sp, #24
20005d3c:	af00      	add	r7, sp, #0
20005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20005d40:	2300      	movs	r3, #0
20005d42:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
20005d44:	2300      	movs	r3, #0
20005d46:	613b      	str	r3, [r7, #16]
20005d48:	4b1a      	ldr	r3, [pc, #104]	; (20005db4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
20005d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20005d4c:	4a19      	ldr	r2, [pc, #100]	; (20005db4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
20005d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20005d52:	6413      	str	r3, [r2, #64]	; 0x40
20005d54:	4b17      	ldr	r3, [pc, #92]	; (20005db4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
20005d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20005d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20005d5c:	613b      	str	r3, [r7, #16]
20005d5e:	693b      	ldr	r3, [r7, #16]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
20005d60:	2300      	movs	r3, #0
20005d62:	60fb      	str	r3, [r7, #12]
20005d64:	4b14      	ldr	r3, [pc, #80]	; (20005db8 <HAL_PWREx_ControlVoltageScaling+0x80>)
20005d66:	681b      	ldr	r3, [r3, #0]
20005d68:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
20005d6c:	4912      	ldr	r1, [pc, #72]	; (20005db8 <HAL_PWREx_ControlVoltageScaling+0x80>)
20005d6e:	687b      	ldr	r3, [r7, #4]
20005d70:	4313      	orrs	r3, r2
20005d72:	600b      	str	r3, [r1, #0]
20005d74:	4b10      	ldr	r3, [pc, #64]	; (20005db8 <HAL_PWREx_ControlVoltageScaling+0x80>)
20005d76:	681b      	ldr	r3, [r3, #0]
20005d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20005d7c:	60fb      	str	r3, [r7, #12]
20005d7e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
20005d80:	f7fb fdc2 	bl	20001908 <HAL_GetTick>
20005d84:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20005d86:	e009      	b.n	20005d9c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
20005d88:	f7fb fdbe 	bl	20001908 <HAL_GetTick>
20005d8c:	4602      	mov	r2, r0
20005d8e:	697b      	ldr	r3, [r7, #20]
20005d90:	1ad3      	subs	r3, r2, r3
20005d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
20005d96:	d901      	bls.n	20005d9c <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
20005d98:	2303      	movs	r3, #3
20005d9a:	e007      	b.n	20005dac <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
20005d9c:	4b06      	ldr	r3, [pc, #24]	; (20005db8 <HAL_PWREx_ControlVoltageScaling+0x80>)
20005d9e:	685b      	ldr	r3, [r3, #4]
20005da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20005da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
20005da8:	d1ee      	bne.n	20005d88 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
20005daa:	2300      	movs	r3, #0
}
20005dac:	4618      	mov	r0, r3
20005dae:	3718      	adds	r7, #24
20005db0:	46bd      	mov	sp, r7
20005db2:	bd80      	pop	{r7, pc}
20005db4:	40023800 	.word	0x40023800
20005db8:	40007000 	.word	0x40007000
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20005dbc:	b480      	push	{r7}
20005dbe:	af00      	add	r7, sp, #0
  return HAL_OK;
20005dc0:	2300      	movs	r3, #0
}
20005dc2:	4618      	mov	r0, r3
20005dc4:	46bd      	mov	sp, r7
20005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
20005dca:	4770      	bx	lr

20005dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
20005dcc:	b580      	push	{r7, lr}
20005dce:	b086      	sub	sp, #24
20005dd0:	af00      	add	r7, sp, #0
20005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
20005dd4:	687b      	ldr	r3, [r7, #4]
20005dd6:	2b00      	cmp	r3, #0
20005dd8:	d101      	bne.n	20005dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20005dda:	2301      	movs	r3, #1
20005ddc:	e264      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
20005dde:	687b      	ldr	r3, [r7, #4]
20005de0:	681b      	ldr	r3, [r3, #0]
20005de2:	f003 0301 	and.w	r3, r3, #1
20005de6:	2b00      	cmp	r3, #0
20005de8:	d075      	beq.n	20005ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20005dea:	4ba3      	ldr	r3, [pc, #652]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005dec:	689b      	ldr	r3, [r3, #8]
20005dee:	f003 030c 	and.w	r3, r3, #12
20005df2:	2b04      	cmp	r3, #4
20005df4:	d00c      	beq.n	20005e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20005df6:	4ba0      	ldr	r3, [pc, #640]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005df8:	689b      	ldr	r3, [r3, #8]
20005dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
20005dfe:	2b08      	cmp	r3, #8
20005e00:	d112      	bne.n	20005e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
20005e02:	4b9d      	ldr	r3, [pc, #628]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e04:	685b      	ldr	r3, [r3, #4]
20005e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20005e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20005e0e:	d10b      	bne.n	20005e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20005e10:	4b99      	ldr	r3, [pc, #612]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e12:	681b      	ldr	r3, [r3, #0]
20005e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005e18:	2b00      	cmp	r3, #0
20005e1a:	d05b      	beq.n	20005ed4 <HAL_RCC_OscConfig+0x108>
20005e1c:	687b      	ldr	r3, [r7, #4]
20005e1e:	685b      	ldr	r3, [r3, #4]
20005e20:	2b00      	cmp	r3, #0
20005e22:	d157      	bne.n	20005ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20005e24:	2301      	movs	r3, #1
20005e26:	e23f      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20005e28:	687b      	ldr	r3, [r7, #4]
20005e2a:	685b      	ldr	r3, [r3, #4]
20005e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
20005e30:	d106      	bne.n	20005e40 <HAL_RCC_OscConfig+0x74>
20005e32:	4b91      	ldr	r3, [pc, #580]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e34:	681b      	ldr	r3, [r3, #0]
20005e36:	4a90      	ldr	r2, [pc, #576]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005e3c:	6013      	str	r3, [r2, #0]
20005e3e:	e01d      	b.n	20005e7c <HAL_RCC_OscConfig+0xb0>
20005e40:	687b      	ldr	r3, [r7, #4]
20005e42:	685b      	ldr	r3, [r3, #4]
20005e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20005e48:	d10c      	bne.n	20005e64 <HAL_RCC_OscConfig+0x98>
20005e4a:	4b8b      	ldr	r3, [pc, #556]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e4c:	681b      	ldr	r3, [r3, #0]
20005e4e:	4a8a      	ldr	r2, [pc, #552]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20005e54:	6013      	str	r3, [r2, #0]
20005e56:	4b88      	ldr	r3, [pc, #544]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e58:	681b      	ldr	r3, [r3, #0]
20005e5a:	4a87      	ldr	r2, [pc, #540]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20005e60:	6013      	str	r3, [r2, #0]
20005e62:	e00b      	b.n	20005e7c <HAL_RCC_OscConfig+0xb0>
20005e64:	4b84      	ldr	r3, [pc, #528]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e66:	681b      	ldr	r3, [r3, #0]
20005e68:	4a83      	ldr	r2, [pc, #524]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20005e6e:	6013      	str	r3, [r2, #0]
20005e70:	4b81      	ldr	r3, [pc, #516]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e72:	681b      	ldr	r3, [r3, #0]
20005e74:	4a80      	ldr	r2, [pc, #512]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
20005e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
20005e7c:	687b      	ldr	r3, [r7, #4]
20005e7e:	685b      	ldr	r3, [r3, #4]
20005e80:	2b00      	cmp	r3, #0
20005e82:	d013      	beq.n	20005eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20005e84:	f7fb fd40 	bl	20001908 <HAL_GetTick>
20005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20005e8a:	e008      	b.n	20005e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20005e8c:	f7fb fd3c 	bl	20001908 <HAL_GetTick>
20005e90:	4602      	mov	r2, r0
20005e92:	693b      	ldr	r3, [r7, #16]
20005e94:	1ad3      	subs	r3, r2, r3
20005e96:	2b64      	cmp	r3, #100	; 0x64
20005e98:	d901      	bls.n	20005e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
20005e9a:	2303      	movs	r3, #3
20005e9c:	e204      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
20005e9e:	4b76      	ldr	r3, [pc, #472]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005ea0:	681b      	ldr	r3, [r3, #0]
20005ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005ea6:	2b00      	cmp	r3, #0
20005ea8:	d0f0      	beq.n	20005e8c <HAL_RCC_OscConfig+0xc0>
20005eaa:	e014      	b.n	20005ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
20005eac:	f7fb fd2c 	bl	20001908 <HAL_GetTick>
20005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20005eb2:	e008      	b.n	20005ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
20005eb4:	f7fb fd28 	bl	20001908 <HAL_GetTick>
20005eb8:	4602      	mov	r2, r0
20005eba:	693b      	ldr	r3, [r7, #16]
20005ebc:	1ad3      	subs	r3, r2, r3
20005ebe:	2b64      	cmp	r3, #100	; 0x64
20005ec0:	d901      	bls.n	20005ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
20005ec2:	2303      	movs	r3, #3
20005ec4:	e1f0      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
20005ec6:	4b6c      	ldr	r3, [pc, #432]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005ec8:	681b      	ldr	r3, [r3, #0]
20005eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20005ece:	2b00      	cmp	r3, #0
20005ed0:	d1f0      	bne.n	20005eb4 <HAL_RCC_OscConfig+0xe8>
20005ed2:	e000      	b.n	20005ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20005ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20005ed6:	687b      	ldr	r3, [r7, #4]
20005ed8:	681b      	ldr	r3, [r3, #0]
20005eda:	f003 0302 	and.w	r3, r3, #2
20005ede:	2b00      	cmp	r3, #0
20005ee0:	d063      	beq.n	20005faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20005ee2:	4b65      	ldr	r3, [pc, #404]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005ee4:	689b      	ldr	r3, [r3, #8]
20005ee6:	f003 030c 	and.w	r3, r3, #12
20005eea:	2b00      	cmp	r3, #0
20005eec:	d00b      	beq.n	20005f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20005eee:	4b62      	ldr	r3, [pc, #392]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005ef0:	689b      	ldr	r3, [r3, #8]
20005ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
20005ef6:	2b08      	cmp	r3, #8
20005ef8:	d11c      	bne.n	20005f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
20005efa:	4b5f      	ldr	r3, [pc, #380]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005efc:	685b      	ldr	r3, [r3, #4]
20005efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20005f02:	2b00      	cmp	r3, #0
20005f04:	d116      	bne.n	20005f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20005f06:	4b5c      	ldr	r3, [pc, #368]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005f08:	681b      	ldr	r3, [r3, #0]
20005f0a:	f003 0302 	and.w	r3, r3, #2
20005f0e:	2b00      	cmp	r3, #0
20005f10:	d005      	beq.n	20005f1e <HAL_RCC_OscConfig+0x152>
20005f12:	687b      	ldr	r3, [r7, #4]
20005f14:	68db      	ldr	r3, [r3, #12]
20005f16:	2b01      	cmp	r3, #1
20005f18:	d001      	beq.n	20005f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
20005f1a:	2301      	movs	r3, #1
20005f1c:	e1c4      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20005f1e:	4b56      	ldr	r3, [pc, #344]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005f20:	681b      	ldr	r3, [r3, #0]
20005f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20005f26:	687b      	ldr	r3, [r7, #4]
20005f28:	691b      	ldr	r3, [r3, #16]
20005f2a:	00db      	lsls	r3, r3, #3
20005f2c:	4952      	ldr	r1, [pc, #328]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005f2e:	4313      	orrs	r3, r2
20005f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
20005f32:	e03a      	b.n	20005faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
20005f34:	687b      	ldr	r3, [r7, #4]
20005f36:	68db      	ldr	r3, [r3, #12]
20005f38:	2b00      	cmp	r3, #0
20005f3a:	d020      	beq.n	20005f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
20005f3c:	4b4f      	ldr	r3, [pc, #316]	; (2000607c <HAL_RCC_OscConfig+0x2b0>)
20005f3e:	2201      	movs	r2, #1
20005f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20005f42:	f7fb fce1 	bl	20001908 <HAL_GetTick>
20005f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20005f48:	e008      	b.n	20005f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20005f4a:	f7fb fcdd 	bl	20001908 <HAL_GetTick>
20005f4e:	4602      	mov	r2, r0
20005f50:	693b      	ldr	r3, [r7, #16]
20005f52:	1ad3      	subs	r3, r2, r3
20005f54:	2b02      	cmp	r3, #2
20005f56:	d901      	bls.n	20005f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
20005f58:	2303      	movs	r3, #3
20005f5a:	e1a5      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
20005f5c:	4b46      	ldr	r3, [pc, #280]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005f5e:	681b      	ldr	r3, [r3, #0]
20005f60:	f003 0302 	and.w	r3, r3, #2
20005f64:	2b00      	cmp	r3, #0
20005f66:	d0f0      	beq.n	20005f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
20005f68:	4b43      	ldr	r3, [pc, #268]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005f6a:	681b      	ldr	r3, [r3, #0]
20005f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
20005f70:	687b      	ldr	r3, [r7, #4]
20005f72:	691b      	ldr	r3, [r3, #16]
20005f74:	00db      	lsls	r3, r3, #3
20005f76:	4940      	ldr	r1, [pc, #256]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005f78:	4313      	orrs	r3, r2
20005f7a:	600b      	str	r3, [r1, #0]
20005f7c:	e015      	b.n	20005faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
20005f7e:	4b3f      	ldr	r3, [pc, #252]	; (2000607c <HAL_RCC_OscConfig+0x2b0>)
20005f80:	2200      	movs	r2, #0
20005f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20005f84:	f7fb fcc0 	bl	20001908 <HAL_GetTick>
20005f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20005f8a:	e008      	b.n	20005f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
20005f8c:	f7fb fcbc 	bl	20001908 <HAL_GetTick>
20005f90:	4602      	mov	r2, r0
20005f92:	693b      	ldr	r3, [r7, #16]
20005f94:	1ad3      	subs	r3, r2, r3
20005f96:	2b02      	cmp	r3, #2
20005f98:	d901      	bls.n	20005f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
20005f9a:	2303      	movs	r3, #3
20005f9c:	e184      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
20005f9e:	4b36      	ldr	r3, [pc, #216]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005fa0:	681b      	ldr	r3, [r3, #0]
20005fa2:	f003 0302 	and.w	r3, r3, #2
20005fa6:	2b00      	cmp	r3, #0
20005fa8:	d1f0      	bne.n	20005f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
20005faa:	687b      	ldr	r3, [r7, #4]
20005fac:	681b      	ldr	r3, [r3, #0]
20005fae:	f003 0308 	and.w	r3, r3, #8
20005fb2:	2b00      	cmp	r3, #0
20005fb4:	d030      	beq.n	20006018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
20005fb6:	687b      	ldr	r3, [r7, #4]
20005fb8:	695b      	ldr	r3, [r3, #20]
20005fba:	2b00      	cmp	r3, #0
20005fbc:	d016      	beq.n	20005fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
20005fbe:	4b30      	ldr	r3, [pc, #192]	; (20006080 <HAL_RCC_OscConfig+0x2b4>)
20005fc0:	2201      	movs	r2, #1
20005fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20005fc4:	f7fb fca0 	bl	20001908 <HAL_GetTick>
20005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20005fca:	e008      	b.n	20005fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20005fcc:	f7fb fc9c 	bl	20001908 <HAL_GetTick>
20005fd0:	4602      	mov	r2, r0
20005fd2:	693b      	ldr	r3, [r7, #16]
20005fd4:	1ad3      	subs	r3, r2, r3
20005fd6:	2b02      	cmp	r3, #2
20005fd8:	d901      	bls.n	20005fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
20005fda:	2303      	movs	r3, #3
20005fdc:	e164      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
20005fde:	4b26      	ldr	r3, [pc, #152]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20005fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20005fe2:	f003 0302 	and.w	r3, r3, #2
20005fe6:	2b00      	cmp	r3, #0
20005fe8:	d0f0      	beq.n	20005fcc <HAL_RCC_OscConfig+0x200>
20005fea:	e015      	b.n	20006018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20005fec:	4b24      	ldr	r3, [pc, #144]	; (20006080 <HAL_RCC_OscConfig+0x2b4>)
20005fee:	2200      	movs	r2, #0
20005ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
20005ff2:	f7fb fc89 	bl	20001908 <HAL_GetTick>
20005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
20005ff8:	e008      	b.n	2000600c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
20005ffa:	f7fb fc85 	bl	20001908 <HAL_GetTick>
20005ffe:	4602      	mov	r2, r0
20006000:	693b      	ldr	r3, [r7, #16]
20006002:	1ad3      	subs	r3, r2, r3
20006004:	2b02      	cmp	r3, #2
20006006:	d901      	bls.n	2000600c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
20006008:	2303      	movs	r3, #3
2000600a:	e14d      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000600c:	4b1a      	ldr	r3, [pc, #104]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
2000600e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20006010:	f003 0302 	and.w	r3, r3, #2
20006014:	2b00      	cmp	r3, #0
20006016:	d1f0      	bne.n	20005ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
20006018:	687b      	ldr	r3, [r7, #4]
2000601a:	681b      	ldr	r3, [r3, #0]
2000601c:	f003 0304 	and.w	r3, r3, #4
20006020:	2b00      	cmp	r3, #0
20006022:	f000 80a0 	beq.w	20006166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
20006026:	2300      	movs	r3, #0
20006028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000602a:	4b13      	ldr	r3, [pc, #76]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
2000602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20006032:	2b00      	cmp	r3, #0
20006034:	d10f      	bne.n	20006056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
20006036:	2300      	movs	r3, #0
20006038:	60bb      	str	r3, [r7, #8]
2000603a:	4b0f      	ldr	r3, [pc, #60]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
2000603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000603e:	4a0e      	ldr	r2, [pc, #56]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20006040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20006044:	6413      	str	r3, [r2, #64]	; 0x40
20006046:	4b0c      	ldr	r3, [pc, #48]	; (20006078 <HAL_RCC_OscConfig+0x2ac>)
20006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000604a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000604e:	60bb      	str	r3, [r7, #8]
20006050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
20006052:	2301      	movs	r3, #1
20006054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20006056:	4b0b      	ldr	r3, [pc, #44]	; (20006084 <HAL_RCC_OscConfig+0x2b8>)
20006058:	681b      	ldr	r3, [r3, #0]
2000605a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000605e:	2b00      	cmp	r3, #0
20006060:	d121      	bne.n	200060a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
20006062:	4b08      	ldr	r3, [pc, #32]	; (20006084 <HAL_RCC_OscConfig+0x2b8>)
20006064:	681b      	ldr	r3, [r3, #0]
20006066:	4a07      	ldr	r2, [pc, #28]	; (20006084 <HAL_RCC_OscConfig+0x2b8>)
20006068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000606c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000606e:	f7fb fc4b 	bl	20001908 <HAL_GetTick>
20006072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
20006074:	e011      	b.n	2000609a <HAL_RCC_OscConfig+0x2ce>
20006076:	bf00      	nop
20006078:	40023800 	.word	0x40023800
2000607c:	42470000 	.word	0x42470000
20006080:	42470e80 	.word	0x42470e80
20006084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
20006088:	f7fb fc3e 	bl	20001908 <HAL_GetTick>
2000608c:	4602      	mov	r2, r0
2000608e:	693b      	ldr	r3, [r7, #16]
20006090:	1ad3      	subs	r3, r2, r3
20006092:	2b02      	cmp	r3, #2
20006094:	d901      	bls.n	2000609a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
20006096:	2303      	movs	r3, #3
20006098:	e106      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000609a:	4b85      	ldr	r3, [pc, #532]	; (200062b0 <HAL_RCC_OscConfig+0x4e4>)
2000609c:	681b      	ldr	r3, [r3, #0]
2000609e:	f403 7380 	and.w	r3, r3, #256	; 0x100
200060a2:	2b00      	cmp	r3, #0
200060a4:	d0f0      	beq.n	20006088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
200060a6:	687b      	ldr	r3, [r7, #4]
200060a8:	689b      	ldr	r3, [r3, #8]
200060aa:	2b01      	cmp	r3, #1
200060ac:	d106      	bne.n	200060bc <HAL_RCC_OscConfig+0x2f0>
200060ae:	4b81      	ldr	r3, [pc, #516]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200060b2:	4a80      	ldr	r2, [pc, #512]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060b4:	f043 0301 	orr.w	r3, r3, #1
200060b8:	6713      	str	r3, [r2, #112]	; 0x70
200060ba:	e01c      	b.n	200060f6 <HAL_RCC_OscConfig+0x32a>
200060bc:	687b      	ldr	r3, [r7, #4]
200060be:	689b      	ldr	r3, [r3, #8]
200060c0:	2b05      	cmp	r3, #5
200060c2:	d10c      	bne.n	200060de <HAL_RCC_OscConfig+0x312>
200060c4:	4b7b      	ldr	r3, [pc, #492]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200060c8:	4a7a      	ldr	r2, [pc, #488]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060ca:	f043 0304 	orr.w	r3, r3, #4
200060ce:	6713      	str	r3, [r2, #112]	; 0x70
200060d0:	4b78      	ldr	r3, [pc, #480]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200060d4:	4a77      	ldr	r2, [pc, #476]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060d6:	f043 0301 	orr.w	r3, r3, #1
200060da:	6713      	str	r3, [r2, #112]	; 0x70
200060dc:	e00b      	b.n	200060f6 <HAL_RCC_OscConfig+0x32a>
200060de:	4b75      	ldr	r3, [pc, #468]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200060e2:	4a74      	ldr	r2, [pc, #464]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060e4:	f023 0301 	bic.w	r3, r3, #1
200060e8:	6713      	str	r3, [r2, #112]	; 0x70
200060ea:	4b72      	ldr	r3, [pc, #456]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
200060ee:	4a71      	ldr	r2, [pc, #452]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200060f0:	f023 0304 	bic.w	r3, r3, #4
200060f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
200060f6:	687b      	ldr	r3, [r7, #4]
200060f8:	689b      	ldr	r3, [r3, #8]
200060fa:	2b00      	cmp	r3, #0
200060fc:	d015      	beq.n	2000612a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
200060fe:	f7fb fc03 	bl	20001908 <HAL_GetTick>
20006102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006104:	e00a      	b.n	2000611c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20006106:	f7fb fbff 	bl	20001908 <HAL_GetTick>
2000610a:	4602      	mov	r2, r0
2000610c:	693b      	ldr	r3, [r7, #16]
2000610e:	1ad3      	subs	r3, r2, r3
20006110:	f241 3288 	movw	r2, #5000	; 0x1388
20006114:	4293      	cmp	r3, r2
20006116:	d901      	bls.n	2000611c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
20006118:	2303      	movs	r3, #3
2000611a:	e0c5      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000611c:	4b65      	ldr	r3, [pc, #404]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
2000611e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006120:	f003 0302 	and.w	r3, r3, #2
20006124:	2b00      	cmp	r3, #0
20006126:	d0ee      	beq.n	20006106 <HAL_RCC_OscConfig+0x33a>
20006128:	e014      	b.n	20006154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000612a:	f7fb fbed 	bl	20001908 <HAL_GetTick>
2000612e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20006130:	e00a      	b.n	20006148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20006132:	f7fb fbe9 	bl	20001908 <HAL_GetTick>
20006136:	4602      	mov	r2, r0
20006138:	693b      	ldr	r3, [r7, #16]
2000613a:	1ad3      	subs	r3, r2, r3
2000613c:	f241 3288 	movw	r2, #5000	; 0x1388
20006140:	4293      	cmp	r3, r2
20006142:	d901      	bls.n	20006148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
20006144:	2303      	movs	r3, #3
20006146:	e0af      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
20006148:	4b5a      	ldr	r3, [pc, #360]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
2000614a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000614c:	f003 0302 	and.w	r3, r3, #2
20006150:	2b00      	cmp	r3, #0
20006152:	d1ee      	bne.n	20006132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
20006154:	7dfb      	ldrb	r3, [r7, #23]
20006156:	2b01      	cmp	r3, #1
20006158:	d105      	bne.n	20006166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000615a:	4b56      	ldr	r3, [pc, #344]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
2000615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000615e:	4a55      	ldr	r2, [pc, #340]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
20006160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20006164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
20006166:	687b      	ldr	r3, [r7, #4]
20006168:	699b      	ldr	r3, [r3, #24]
2000616a:	2b00      	cmp	r3, #0
2000616c:	f000 809b 	beq.w	200062a6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20006170:	4b50      	ldr	r3, [pc, #320]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
20006172:	689b      	ldr	r3, [r3, #8]
20006174:	f003 030c 	and.w	r3, r3, #12
20006178:	2b08      	cmp	r3, #8
2000617a:	d05c      	beq.n	20006236 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000617c:	687b      	ldr	r3, [r7, #4]
2000617e:	699b      	ldr	r3, [r3, #24]
20006180:	2b02      	cmp	r3, #2
20006182:	d141      	bne.n	20006208 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20006184:	4b4c      	ldr	r3, [pc, #304]	; (200062b8 <HAL_RCC_OscConfig+0x4ec>)
20006186:	2200      	movs	r2, #0
20006188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000618a:	f7fb fbbd 	bl	20001908 <HAL_GetTick>
2000618e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006190:	e008      	b.n	200061a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20006192:	f7fb fbb9 	bl	20001908 <HAL_GetTick>
20006196:	4602      	mov	r2, r0
20006198:	693b      	ldr	r3, [r7, #16]
2000619a:	1ad3      	subs	r3, r2, r3
2000619c:	2b02      	cmp	r3, #2
2000619e:	d901      	bls.n	200061a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
200061a0:	2303      	movs	r3, #3
200061a2:	e081      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
200061a4:	4b43      	ldr	r3, [pc, #268]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200061a6:	681b      	ldr	r3, [r3, #0]
200061a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
200061ac:	2b00      	cmp	r3, #0
200061ae:	d1f0      	bne.n	20006192 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
200061b0:	687b      	ldr	r3, [r7, #4]
200061b2:	69da      	ldr	r2, [r3, #28]
200061b4:	687b      	ldr	r3, [r7, #4]
200061b6:	6a1b      	ldr	r3, [r3, #32]
200061b8:	431a      	orrs	r2, r3
200061ba:	687b      	ldr	r3, [r7, #4]
200061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200061be:	019b      	lsls	r3, r3, #6
200061c0:	431a      	orrs	r2, r3
200061c2:	687b      	ldr	r3, [r7, #4]
200061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200061c6:	085b      	lsrs	r3, r3, #1
200061c8:	3b01      	subs	r3, #1
200061ca:	041b      	lsls	r3, r3, #16
200061cc:	431a      	orrs	r2, r3
200061ce:	687b      	ldr	r3, [r7, #4]
200061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
200061d2:	061b      	lsls	r3, r3, #24
200061d4:	4937      	ldr	r1, [pc, #220]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200061d6:	4313      	orrs	r3, r2
200061d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
200061da:	4b37      	ldr	r3, [pc, #220]	; (200062b8 <HAL_RCC_OscConfig+0x4ec>)
200061dc:	2201      	movs	r2, #1
200061de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
200061e0:	f7fb fb92 	bl	20001908 <HAL_GetTick>
200061e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200061e6:	e008      	b.n	200061fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
200061e8:	f7fb fb8e 	bl	20001908 <HAL_GetTick>
200061ec:	4602      	mov	r2, r0
200061ee:	693b      	ldr	r3, [r7, #16]
200061f0:	1ad3      	subs	r3, r2, r3
200061f2:	2b02      	cmp	r3, #2
200061f4:	d901      	bls.n	200061fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
200061f6:	2303      	movs	r3, #3
200061f8:	e056      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
200061fa:	4b2e      	ldr	r3, [pc, #184]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
200061fc:	681b      	ldr	r3, [r3, #0]
200061fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006202:	2b00      	cmp	r3, #0
20006204:	d0f0      	beq.n	200061e8 <HAL_RCC_OscConfig+0x41c>
20006206:	e04e      	b.n	200062a6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20006208:	4b2b      	ldr	r3, [pc, #172]	; (200062b8 <HAL_RCC_OscConfig+0x4ec>)
2000620a:	2200      	movs	r2, #0
2000620c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000620e:	f7fb fb7b 	bl	20001908 <HAL_GetTick>
20006212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006214:	e008      	b.n	20006228 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
20006216:	f7fb fb77 	bl	20001908 <HAL_GetTick>
2000621a:	4602      	mov	r2, r0
2000621c:	693b      	ldr	r3, [r7, #16]
2000621e:	1ad3      	subs	r3, r2, r3
20006220:	2b02      	cmp	r3, #2
20006222:	d901      	bls.n	20006228 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
20006224:	2303      	movs	r3, #3
20006226:	e03f      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
20006228:	4b22      	ldr	r3, [pc, #136]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
2000622a:	681b      	ldr	r3, [r3, #0]
2000622c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006230:	2b00      	cmp	r3, #0
20006232:	d1f0      	bne.n	20006216 <HAL_RCC_OscConfig+0x44a>
20006234:	e037      	b.n	200062a6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20006236:	687b      	ldr	r3, [r7, #4]
20006238:	699b      	ldr	r3, [r3, #24]
2000623a:	2b01      	cmp	r3, #1
2000623c:	d101      	bne.n	20006242 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
2000623e:	2301      	movs	r3, #1
20006240:	e032      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
20006242:	4b1c      	ldr	r3, [pc, #112]	; (200062b4 <HAL_RCC_OscConfig+0x4e8>)
20006244:	685b      	ldr	r3, [r3, #4]
20006246:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
20006248:	687b      	ldr	r3, [r7, #4]
2000624a:	699b      	ldr	r3, [r3, #24]
2000624c:	2b01      	cmp	r3, #1
2000624e:	d028      	beq.n	200062a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20006250:	68fb      	ldr	r3, [r7, #12]
20006252:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
20006256:	687b      	ldr	r3, [r7, #4]
20006258:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
2000625a:	429a      	cmp	r2, r3
2000625c:	d121      	bne.n	200062a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
2000625e:	68fb      	ldr	r3, [r7, #12]
20006260:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20006264:	687b      	ldr	r3, [r7, #4]
20006266:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20006268:	429a      	cmp	r2, r3
2000626a:	d11a      	bne.n	200062a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
2000626c:	68fa      	ldr	r2, [r7, #12]
2000626e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
20006272:	4013      	ands	r3, r2
20006274:	687a      	ldr	r2, [r7, #4]
20006276:	6a52      	ldr	r2, [r2, #36]	; 0x24
20006278:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
2000627a:	4293      	cmp	r3, r2
2000627c:	d111      	bne.n	200062a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
2000627e:	68fb      	ldr	r3, [r7, #12]
20006280:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
20006284:	687b      	ldr	r3, [r7, #4]
20006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006288:	085b      	lsrs	r3, r3, #1
2000628a:	3b01      	subs	r3, #1
2000628c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
2000628e:	429a      	cmp	r2, r3
20006290:	d107      	bne.n	200062a2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
20006292:	68fb      	ldr	r3, [r7, #12]
20006294:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
20006298:	687b      	ldr	r3, [r7, #4]
2000629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000629c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
2000629e:	429a      	cmp	r2, r3
200062a0:	d001      	beq.n	200062a6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
200062a2:	2301      	movs	r3, #1
200062a4:	e000      	b.n	200062a8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
200062a6:	2300      	movs	r3, #0
}
200062a8:	4618      	mov	r0, r3
200062aa:	3718      	adds	r7, #24
200062ac:	46bd      	mov	sp, r7
200062ae:	bd80      	pop	{r7, pc}
200062b0:	40007000 	.word	0x40007000
200062b4:	40023800 	.word	0x40023800
200062b8:	42470060 	.word	0x42470060

200062bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
200062bc:	b580      	push	{r7, lr}
200062be:	b084      	sub	sp, #16
200062c0:	af00      	add	r7, sp, #0
200062c2:	6078      	str	r0, [r7, #4]
200062c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
200062c6:	687b      	ldr	r3, [r7, #4]
200062c8:	2b00      	cmp	r3, #0
200062ca:	d101      	bne.n	200062d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
200062cc:	2301      	movs	r3, #1
200062ce:	e0cc      	b.n	2000646a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
200062d0:	4b68      	ldr	r3, [pc, #416]	; (20006474 <HAL_RCC_ClockConfig+0x1b8>)
200062d2:	681b      	ldr	r3, [r3, #0]
200062d4:	f003 0307 	and.w	r3, r3, #7
200062d8:	683a      	ldr	r2, [r7, #0]
200062da:	429a      	cmp	r2, r3
200062dc:	d90c      	bls.n	200062f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200062de:	4b65      	ldr	r3, [pc, #404]	; (20006474 <HAL_RCC_ClockConfig+0x1b8>)
200062e0:	683a      	ldr	r2, [r7, #0]
200062e2:	b2d2      	uxtb	r2, r2
200062e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200062e6:	4b63      	ldr	r3, [pc, #396]	; (20006474 <HAL_RCC_ClockConfig+0x1b8>)
200062e8:	681b      	ldr	r3, [r3, #0]
200062ea:	f003 0307 	and.w	r3, r3, #7
200062ee:	683a      	ldr	r2, [r7, #0]
200062f0:	429a      	cmp	r2, r3
200062f2:	d001      	beq.n	200062f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
200062f4:	2301      	movs	r3, #1
200062f6:	e0b8      	b.n	2000646a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
200062f8:	687b      	ldr	r3, [r7, #4]
200062fa:	681b      	ldr	r3, [r3, #0]
200062fc:	f003 0302 	and.w	r3, r3, #2
20006300:	2b00      	cmp	r3, #0
20006302:	d020      	beq.n	20006346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006304:	687b      	ldr	r3, [r7, #4]
20006306:	681b      	ldr	r3, [r3, #0]
20006308:	f003 0304 	and.w	r3, r3, #4
2000630c:	2b00      	cmp	r3, #0
2000630e:	d005      	beq.n	2000631c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20006310:	4b59      	ldr	r3, [pc, #356]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
20006312:	689b      	ldr	r3, [r3, #8]
20006314:	4a58      	ldr	r2, [pc, #352]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
20006316:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000631a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000631c:	687b      	ldr	r3, [r7, #4]
2000631e:	681b      	ldr	r3, [r3, #0]
20006320:	f003 0308 	and.w	r3, r3, #8
20006324:	2b00      	cmp	r3, #0
20006326:	d005      	beq.n	20006334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
20006328:	4b53      	ldr	r3, [pc, #332]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000632a:	689b      	ldr	r3, [r3, #8]
2000632c:	4a52      	ldr	r2, [pc, #328]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000632e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
20006332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20006334:	4b50      	ldr	r3, [pc, #320]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
20006336:	689b      	ldr	r3, [r3, #8]
20006338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000633c:	687b      	ldr	r3, [r7, #4]
2000633e:	689b      	ldr	r3, [r3, #8]
20006340:	494d      	ldr	r1, [pc, #308]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
20006342:	4313      	orrs	r3, r2
20006344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20006346:	687b      	ldr	r3, [r7, #4]
20006348:	681b      	ldr	r3, [r3, #0]
2000634a:	f003 0301 	and.w	r3, r3, #1
2000634e:	2b00      	cmp	r3, #0
20006350:	d044      	beq.n	200063dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20006352:	687b      	ldr	r3, [r7, #4]
20006354:	685b      	ldr	r3, [r3, #4]
20006356:	2b01      	cmp	r3, #1
20006358:	d107      	bne.n	2000636a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000635a:	4b47      	ldr	r3, [pc, #284]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000635c:	681b      	ldr	r3, [r3, #0]
2000635e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20006362:	2b00      	cmp	r3, #0
20006364:	d119      	bne.n	2000639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006366:	2301      	movs	r3, #1
20006368:	e07f      	b.n	2000646a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000636a:	687b      	ldr	r3, [r7, #4]
2000636c:	685b      	ldr	r3, [r3, #4]
2000636e:	2b02      	cmp	r3, #2
20006370:	d003      	beq.n	2000637a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
20006372:	687b      	ldr	r3, [r7, #4]
20006374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
20006376:	2b03      	cmp	r3, #3
20006378:	d107      	bne.n	2000638a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000637a:	4b3f      	ldr	r3, [pc, #252]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000637c:	681b      	ldr	r3, [r3, #0]
2000637e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006382:	2b00      	cmp	r3, #0
20006384:	d109      	bne.n	2000639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006386:	2301      	movs	r3, #1
20006388:	e06f      	b.n	2000646a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000638a:	4b3b      	ldr	r3, [pc, #236]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000638c:	681b      	ldr	r3, [r3, #0]
2000638e:	f003 0302 	and.w	r3, r3, #2
20006392:	2b00      	cmp	r3, #0
20006394:	d101      	bne.n	2000639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
20006396:	2301      	movs	r3, #1
20006398:	e067      	b.n	2000646a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000639a:	4b37      	ldr	r3, [pc, #220]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000639c:	689b      	ldr	r3, [r3, #8]
2000639e:	f023 0203 	bic.w	r2, r3, #3
200063a2:	687b      	ldr	r3, [r7, #4]
200063a4:	685b      	ldr	r3, [r3, #4]
200063a6:	4934      	ldr	r1, [pc, #208]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
200063a8:	4313      	orrs	r3, r2
200063aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
200063ac:	f7fb faac 	bl	20001908 <HAL_GetTick>
200063b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200063b2:	e00a      	b.n	200063ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
200063b4:	f7fb faa8 	bl	20001908 <HAL_GetTick>
200063b8:	4602      	mov	r2, r0
200063ba:	68fb      	ldr	r3, [r7, #12]
200063bc:	1ad3      	subs	r3, r2, r3
200063be:	f241 3288 	movw	r2, #5000	; 0x1388
200063c2:	4293      	cmp	r3, r2
200063c4:	d901      	bls.n	200063ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
200063c6:	2303      	movs	r3, #3
200063c8:	e04f      	b.n	2000646a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
200063ca:	4b2b      	ldr	r3, [pc, #172]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
200063cc:	689b      	ldr	r3, [r3, #8]
200063ce:	f003 020c 	and.w	r2, r3, #12
200063d2:	687b      	ldr	r3, [r7, #4]
200063d4:	685b      	ldr	r3, [r3, #4]
200063d6:	009b      	lsls	r3, r3, #2
200063d8:	429a      	cmp	r2, r3
200063da:	d1eb      	bne.n	200063b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
200063dc:	4b25      	ldr	r3, [pc, #148]	; (20006474 <HAL_RCC_ClockConfig+0x1b8>)
200063de:	681b      	ldr	r3, [r3, #0]
200063e0:	f003 0307 	and.w	r3, r3, #7
200063e4:	683a      	ldr	r2, [r7, #0]
200063e6:	429a      	cmp	r2, r3
200063e8:	d20c      	bcs.n	20006404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
200063ea:	4b22      	ldr	r3, [pc, #136]	; (20006474 <HAL_RCC_ClockConfig+0x1b8>)
200063ec:	683a      	ldr	r2, [r7, #0]
200063ee:	b2d2      	uxtb	r2, r2
200063f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
200063f2:	4b20      	ldr	r3, [pc, #128]	; (20006474 <HAL_RCC_ClockConfig+0x1b8>)
200063f4:	681b      	ldr	r3, [r3, #0]
200063f6:	f003 0307 	and.w	r3, r3, #7
200063fa:	683a      	ldr	r2, [r7, #0]
200063fc:	429a      	cmp	r2, r3
200063fe:	d001      	beq.n	20006404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
20006400:	2301      	movs	r3, #1
20006402:	e032      	b.n	2000646a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20006404:	687b      	ldr	r3, [r7, #4]
20006406:	681b      	ldr	r3, [r3, #0]
20006408:	f003 0304 	and.w	r3, r3, #4
2000640c:	2b00      	cmp	r3, #0
2000640e:	d008      	beq.n	20006422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20006410:	4b19      	ldr	r3, [pc, #100]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
20006412:	689b      	ldr	r3, [r3, #8]
20006414:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
20006418:	687b      	ldr	r3, [r7, #4]
2000641a:	68db      	ldr	r3, [r3, #12]
2000641c:	4916      	ldr	r1, [pc, #88]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000641e:	4313      	orrs	r3, r2
20006420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20006422:	687b      	ldr	r3, [r7, #4]
20006424:	681b      	ldr	r3, [r3, #0]
20006426:	f003 0308 	and.w	r3, r3, #8
2000642a:	2b00      	cmp	r3, #0
2000642c:	d009      	beq.n	20006442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000642e:	4b12      	ldr	r3, [pc, #72]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
20006430:	689b      	ldr	r3, [r3, #8]
20006432:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
20006436:	687b      	ldr	r3, [r7, #4]
20006438:	691b      	ldr	r3, [r3, #16]
2000643a:	00db      	lsls	r3, r3, #3
2000643c:	490e      	ldr	r1, [pc, #56]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000643e:	4313      	orrs	r3, r2
20006440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
20006442:	f000 f8a1 	bl	20006588 <HAL_RCC_GetSysClockFreq>
20006446:	4602      	mov	r2, r0
20006448:	4b0b      	ldr	r3, [pc, #44]	; (20006478 <HAL_RCC_ClockConfig+0x1bc>)
2000644a:	689b      	ldr	r3, [r3, #8]
2000644c:	091b      	lsrs	r3, r3, #4
2000644e:	f003 030f 	and.w	r3, r3, #15
20006452:	490a      	ldr	r1, [pc, #40]	; (2000647c <HAL_RCC_ClockConfig+0x1c0>)
20006454:	5ccb      	ldrb	r3, [r1, r3]
20006456:	fa22 f303 	lsr.w	r3, r2, r3
2000645a:	4a09      	ldr	r2, [pc, #36]	; (20006480 <HAL_RCC_ClockConfig+0x1c4>)
2000645c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000645e:	4b09      	ldr	r3, [pc, #36]	; (20006484 <HAL_RCC_ClockConfig+0x1c8>)
20006460:	681b      	ldr	r3, [r3, #0]
20006462:	4618      	mov	r0, r3
20006464:	f7fb fa0c 	bl	20001880 <HAL_InitTick>

  return HAL_OK;
20006468:	2300      	movs	r3, #0
}
2000646a:	4618      	mov	r0, r3
2000646c:	3710      	adds	r7, #16
2000646e:	46bd      	mov	sp, r7
20006470:	bd80      	pop	{r7, pc}
20006472:	bf00      	nop
20006474:	40023c00 	.word	0x40023c00
20006478:	40023800 	.word	0x40023800
2000647c:	200095d4 	.word	0x200095d4
20006480:	200003a0 	.word	0x200003a0
20006484:	200003a4 	.word	0x200003a4

20006488 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
20006488:	b580      	push	{r7, lr}
2000648a:	b08c      	sub	sp, #48	; 0x30
2000648c:	af00      	add	r7, sp, #0
2000648e:	60f8      	str	r0, [r7, #12]
20006490:	60b9      	str	r1, [r7, #8]
20006492:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
20006494:	68fb      	ldr	r3, [r7, #12]
20006496:	2b00      	cmp	r3, #0
20006498:	d129      	bne.n	200064ee <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
2000649a:	2300      	movs	r3, #0
2000649c:	61bb      	str	r3, [r7, #24]
2000649e:	4b2b      	ldr	r3, [pc, #172]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
200064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200064a2:	4a2a      	ldr	r2, [pc, #168]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
200064a4:	f043 0301 	orr.w	r3, r3, #1
200064a8:	6313      	str	r3, [r2, #48]	; 0x30
200064aa:	4b28      	ldr	r3, [pc, #160]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
200064ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200064ae:	f003 0301 	and.w	r3, r3, #1
200064b2:	61bb      	str	r3, [r7, #24]
200064b4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
200064b6:	f44f 7380 	mov.w	r3, #256	; 0x100
200064ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
200064bc:	2302      	movs	r3, #2
200064be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200064c0:	2303      	movs	r3, #3
200064c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
200064c4:	2300      	movs	r3, #0
200064c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
200064c8:	2300      	movs	r3, #0
200064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
200064cc:	f107 031c 	add.w	r3, r7, #28
200064d0:	4619      	mov	r1, r3
200064d2:	481f      	ldr	r0, [pc, #124]	; (20006550 <HAL_RCC_MCOConfig+0xc8>)
200064d4:	f7fe fef8 	bl	200052c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
200064d8:	4b1c      	ldr	r3, [pc, #112]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
200064da:	689b      	ldr	r3, [r3, #8]
200064dc:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
200064e0:	68b9      	ldr	r1, [r7, #8]
200064e2:	687b      	ldr	r3, [r7, #4]
200064e4:	430b      	orrs	r3, r1
200064e6:	4919      	ldr	r1, [pc, #100]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
200064e8:	4313      	orrs	r3, r2
200064ea:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
200064ec:	e029      	b.n	20006542 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
200064ee:	2300      	movs	r3, #0
200064f0:	617b      	str	r3, [r7, #20]
200064f2:	4b16      	ldr	r3, [pc, #88]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
200064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200064f6:	4a15      	ldr	r2, [pc, #84]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
200064f8:	f043 0304 	orr.w	r3, r3, #4
200064fc:	6313      	str	r3, [r2, #48]	; 0x30
200064fe:	4b13      	ldr	r3, [pc, #76]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
20006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20006502:	f003 0304 	and.w	r3, r3, #4
20006506:	617b      	str	r3, [r7, #20]
20006508:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
2000650a:	f44f 7300 	mov.w	r3, #512	; 0x200
2000650e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20006510:	2302      	movs	r3, #2
20006512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20006514:	2303      	movs	r3, #3
20006516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
20006518:	2300      	movs	r3, #0
2000651a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
2000651c:	2300      	movs	r3, #0
2000651e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
20006520:	f107 031c 	add.w	r3, r7, #28
20006524:	4619      	mov	r1, r3
20006526:	480b      	ldr	r0, [pc, #44]	; (20006554 <HAL_RCC_MCOConfig+0xcc>)
20006528:	f7fe fece 	bl	200052c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
2000652c:	4b07      	ldr	r3, [pc, #28]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
2000652e:	689b      	ldr	r3, [r3, #8]
20006530:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
20006534:	687b      	ldr	r3, [r7, #4]
20006536:	00d9      	lsls	r1, r3, #3
20006538:	68bb      	ldr	r3, [r7, #8]
2000653a:	430b      	orrs	r3, r1
2000653c:	4903      	ldr	r1, [pc, #12]	; (2000654c <HAL_RCC_MCOConfig+0xc4>)
2000653e:	4313      	orrs	r3, r2
20006540:	608b      	str	r3, [r1, #8]
}
20006542:	bf00      	nop
20006544:	3730      	adds	r7, #48	; 0x30
20006546:	46bd      	mov	sp, r7
20006548:	bd80      	pop	{r7, pc}
2000654a:	bf00      	nop
2000654c:	40023800 	.word	0x40023800
20006550:	40020000 	.word	0x40020000
20006554:	40020800 	.word	0x40020800

20006558 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
20006558:	b480      	push	{r7}
2000655a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
2000655c:	4b03      	ldr	r3, [pc, #12]	; (2000656c <HAL_RCC_EnableCSS+0x14>)
2000655e:	2201      	movs	r2, #1
20006560:	601a      	str	r2, [r3, #0]
}
20006562:	bf00      	nop
20006564:	46bd      	mov	sp, r7
20006566:	f85d 7b04 	ldr.w	r7, [sp], #4
2000656a:	4770      	bx	lr
2000656c:	4247004c 	.word	0x4247004c

20006570 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
20006570:	b480      	push	{r7}
20006572:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
20006574:	4b03      	ldr	r3, [pc, #12]	; (20006584 <HAL_RCC_DisableCSS+0x14>)
20006576:	2200      	movs	r2, #0
20006578:	601a      	str	r2, [r3, #0]
}
2000657a:	bf00      	nop
2000657c:	46bd      	mov	sp, r7
2000657e:	f85d 7b04 	ldr.w	r7, [sp], #4
20006582:	4770      	bx	lr
20006584:	4247004c 	.word	0x4247004c

20006588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
20006588:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
2000658c:	b084      	sub	sp, #16
2000658e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
20006590:	2300      	movs	r3, #0
20006592:	607b      	str	r3, [r7, #4]
20006594:	2300      	movs	r3, #0
20006596:	60fb      	str	r3, [r7, #12]
20006598:	2300      	movs	r3, #0
2000659a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
2000659c:	2300      	movs	r3, #0
2000659e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
200065a0:	4b67      	ldr	r3, [pc, #412]	; (20006740 <HAL_RCC_GetSysClockFreq+0x1b8>)
200065a2:	689b      	ldr	r3, [r3, #8]
200065a4:	f003 030c 	and.w	r3, r3, #12
200065a8:	2b08      	cmp	r3, #8
200065aa:	d00d      	beq.n	200065c8 <HAL_RCC_GetSysClockFreq+0x40>
200065ac:	2b08      	cmp	r3, #8
200065ae:	f200 80bd 	bhi.w	2000672c <HAL_RCC_GetSysClockFreq+0x1a4>
200065b2:	2b00      	cmp	r3, #0
200065b4:	d002      	beq.n	200065bc <HAL_RCC_GetSysClockFreq+0x34>
200065b6:	2b04      	cmp	r3, #4
200065b8:	d003      	beq.n	200065c2 <HAL_RCC_GetSysClockFreq+0x3a>
200065ba:	e0b7      	b.n	2000672c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
200065bc:	4b61      	ldr	r3, [pc, #388]	; (20006744 <HAL_RCC_GetSysClockFreq+0x1bc>)
200065be:	60bb      	str	r3, [r7, #8]
       break;
200065c0:	e0b7      	b.n	20006732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
200065c2:	4b61      	ldr	r3, [pc, #388]	; (20006748 <HAL_RCC_GetSysClockFreq+0x1c0>)
200065c4:	60bb      	str	r3, [r7, #8]
      break;
200065c6:	e0b4      	b.n	20006732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
200065c8:	4b5d      	ldr	r3, [pc, #372]	; (20006740 <HAL_RCC_GetSysClockFreq+0x1b8>)
200065ca:	685b      	ldr	r3, [r3, #4]
200065cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
200065d0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
200065d2:	4b5b      	ldr	r3, [pc, #364]	; (20006740 <HAL_RCC_GetSysClockFreq+0x1b8>)
200065d4:	685b      	ldr	r3, [r3, #4]
200065d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
200065da:	2b00      	cmp	r3, #0
200065dc:	d04d      	beq.n	2000667a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
200065de:	4b58      	ldr	r3, [pc, #352]	; (20006740 <HAL_RCC_GetSysClockFreq+0x1b8>)
200065e0:	685b      	ldr	r3, [r3, #4]
200065e2:	099b      	lsrs	r3, r3, #6
200065e4:	461a      	mov	r2, r3
200065e6:	f04f 0300 	mov.w	r3, #0
200065ea:	f240 10ff 	movw	r0, #511	; 0x1ff
200065ee:	f04f 0100 	mov.w	r1, #0
200065f2:	ea02 0800 	and.w	r8, r2, r0
200065f6:	ea03 0901 	and.w	r9, r3, r1
200065fa:	4640      	mov	r0, r8
200065fc:	4649      	mov	r1, r9
200065fe:	f04f 0200 	mov.w	r2, #0
20006602:	f04f 0300 	mov.w	r3, #0
20006606:	014b      	lsls	r3, r1, #5
20006608:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
2000660c:	0142      	lsls	r2, r0, #5
2000660e:	4610      	mov	r0, r2
20006610:	4619      	mov	r1, r3
20006612:	ebb0 0008 	subs.w	r0, r0, r8
20006616:	eb61 0109 	sbc.w	r1, r1, r9
2000661a:	f04f 0200 	mov.w	r2, #0
2000661e:	f04f 0300 	mov.w	r3, #0
20006622:	018b      	lsls	r3, r1, #6
20006624:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
20006628:	0182      	lsls	r2, r0, #6
2000662a:	1a12      	subs	r2, r2, r0
2000662c:	eb63 0301 	sbc.w	r3, r3, r1
20006630:	f04f 0000 	mov.w	r0, #0
20006634:	f04f 0100 	mov.w	r1, #0
20006638:	00d9      	lsls	r1, r3, #3
2000663a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
2000663e:	00d0      	lsls	r0, r2, #3
20006640:	4602      	mov	r2, r0
20006642:	460b      	mov	r3, r1
20006644:	eb12 0208 	adds.w	r2, r2, r8
20006648:	eb43 0309 	adc.w	r3, r3, r9
2000664c:	f04f 0000 	mov.w	r0, #0
20006650:	f04f 0100 	mov.w	r1, #0
20006654:	0259      	lsls	r1, r3, #9
20006656:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
2000665a:	0250      	lsls	r0, r2, #9
2000665c:	4602      	mov	r2, r0
2000665e:	460b      	mov	r3, r1
20006660:	4610      	mov	r0, r2
20006662:	4619      	mov	r1, r3
20006664:	687b      	ldr	r3, [r7, #4]
20006666:	461a      	mov	r2, r3
20006668:	f04f 0300 	mov.w	r3, #0
2000666c:	f7f9 ff88 	bl	20000580 <__aeabi_uldivmod>
20006670:	4602      	mov	r2, r0
20006672:	460b      	mov	r3, r1
20006674:	4613      	mov	r3, r2
20006676:	60fb      	str	r3, [r7, #12]
20006678:	e04a      	b.n	20006710 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000667a:	4b31      	ldr	r3, [pc, #196]	; (20006740 <HAL_RCC_GetSysClockFreq+0x1b8>)
2000667c:	685b      	ldr	r3, [r3, #4]
2000667e:	099b      	lsrs	r3, r3, #6
20006680:	461a      	mov	r2, r3
20006682:	f04f 0300 	mov.w	r3, #0
20006686:	f240 10ff 	movw	r0, #511	; 0x1ff
2000668a:	f04f 0100 	mov.w	r1, #0
2000668e:	ea02 0400 	and.w	r4, r2, r0
20006692:	ea03 0501 	and.w	r5, r3, r1
20006696:	4620      	mov	r0, r4
20006698:	4629      	mov	r1, r5
2000669a:	f04f 0200 	mov.w	r2, #0
2000669e:	f04f 0300 	mov.w	r3, #0
200066a2:	014b      	lsls	r3, r1, #5
200066a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
200066a8:	0142      	lsls	r2, r0, #5
200066aa:	4610      	mov	r0, r2
200066ac:	4619      	mov	r1, r3
200066ae:	1b00      	subs	r0, r0, r4
200066b0:	eb61 0105 	sbc.w	r1, r1, r5
200066b4:	f04f 0200 	mov.w	r2, #0
200066b8:	f04f 0300 	mov.w	r3, #0
200066bc:	018b      	lsls	r3, r1, #6
200066be:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
200066c2:	0182      	lsls	r2, r0, #6
200066c4:	1a12      	subs	r2, r2, r0
200066c6:	eb63 0301 	sbc.w	r3, r3, r1
200066ca:	f04f 0000 	mov.w	r0, #0
200066ce:	f04f 0100 	mov.w	r1, #0
200066d2:	00d9      	lsls	r1, r3, #3
200066d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
200066d8:	00d0      	lsls	r0, r2, #3
200066da:	4602      	mov	r2, r0
200066dc:	460b      	mov	r3, r1
200066de:	1912      	adds	r2, r2, r4
200066e0:	eb45 0303 	adc.w	r3, r5, r3
200066e4:	f04f 0000 	mov.w	r0, #0
200066e8:	f04f 0100 	mov.w	r1, #0
200066ec:	0299      	lsls	r1, r3, #10
200066ee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
200066f2:	0290      	lsls	r0, r2, #10
200066f4:	4602      	mov	r2, r0
200066f6:	460b      	mov	r3, r1
200066f8:	4610      	mov	r0, r2
200066fa:	4619      	mov	r1, r3
200066fc:	687b      	ldr	r3, [r7, #4]
200066fe:	461a      	mov	r2, r3
20006700:	f04f 0300 	mov.w	r3, #0
20006704:	f7f9 ff3c 	bl	20000580 <__aeabi_uldivmod>
20006708:	4602      	mov	r2, r0
2000670a:	460b      	mov	r3, r1
2000670c:	4613      	mov	r3, r2
2000670e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
20006710:	4b0b      	ldr	r3, [pc, #44]	; (20006740 <HAL_RCC_GetSysClockFreq+0x1b8>)
20006712:	685b      	ldr	r3, [r3, #4]
20006714:	0c1b      	lsrs	r3, r3, #16
20006716:	f003 0303 	and.w	r3, r3, #3
2000671a:	3301      	adds	r3, #1
2000671c:	005b      	lsls	r3, r3, #1
2000671e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
20006720:	68fa      	ldr	r2, [r7, #12]
20006722:	683b      	ldr	r3, [r7, #0]
20006724:	fbb2 f3f3 	udiv	r3, r2, r3
20006728:	60bb      	str	r3, [r7, #8]
      break;
2000672a:	e002      	b.n	20006732 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000672c:	4b05      	ldr	r3, [pc, #20]	; (20006744 <HAL_RCC_GetSysClockFreq+0x1bc>)
2000672e:	60bb      	str	r3, [r7, #8]
      break;
20006730:	bf00      	nop
    }
  }
  return sysclockfreq;
20006732:	68bb      	ldr	r3, [r7, #8]
}
20006734:	4618      	mov	r0, r3
20006736:	3710      	adds	r7, #16
20006738:	46bd      	mov	sp, r7
2000673a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
2000673e:	bf00      	nop
20006740:	40023800 	.word	0x40023800
20006744:	00f42400 	.word	0x00f42400
20006748:	007a1200 	.word	0x007a1200

2000674c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000674c:	b480      	push	{r7}
2000674e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
20006750:	4b03      	ldr	r3, [pc, #12]	; (20006760 <HAL_RCC_GetHCLKFreq+0x14>)
20006752:	681b      	ldr	r3, [r3, #0]
}
20006754:	4618      	mov	r0, r3
20006756:	46bd      	mov	sp, r7
20006758:	f85d 7b04 	ldr.w	r7, [sp], #4
2000675c:	4770      	bx	lr
2000675e:	bf00      	nop
20006760:	200003a0 	.word	0x200003a0

20006764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
20006764:	b580      	push	{r7, lr}
20006766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
20006768:	f7ff fff0 	bl	2000674c <HAL_RCC_GetHCLKFreq>
2000676c:	4602      	mov	r2, r0
2000676e:	4b05      	ldr	r3, [pc, #20]	; (20006784 <HAL_RCC_GetPCLK1Freq+0x20>)
20006770:	689b      	ldr	r3, [r3, #8]
20006772:	0a9b      	lsrs	r3, r3, #10
20006774:	f003 0307 	and.w	r3, r3, #7
20006778:	4903      	ldr	r1, [pc, #12]	; (20006788 <HAL_RCC_GetPCLK1Freq+0x24>)
2000677a:	5ccb      	ldrb	r3, [r1, r3]
2000677c:	fa22 f303 	lsr.w	r3, r2, r3
}
20006780:	4618      	mov	r0, r3
20006782:	bd80      	pop	{r7, pc}
20006784:	40023800 	.word	0x40023800
20006788:	200095e4 	.word	0x200095e4

2000678c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
2000678c:	b580      	push	{r7, lr}
2000678e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
20006790:	f7ff ffdc 	bl	2000674c <HAL_RCC_GetHCLKFreq>
20006794:	4602      	mov	r2, r0
20006796:	4b05      	ldr	r3, [pc, #20]	; (200067ac <HAL_RCC_GetPCLK2Freq+0x20>)
20006798:	689b      	ldr	r3, [r3, #8]
2000679a:	0b5b      	lsrs	r3, r3, #13
2000679c:	f003 0307 	and.w	r3, r3, #7
200067a0:	4903      	ldr	r1, [pc, #12]	; (200067b0 <HAL_RCC_GetPCLK2Freq+0x24>)
200067a2:	5ccb      	ldrb	r3, [r1, r3]
200067a4:	fa22 f303 	lsr.w	r3, r2, r3
}
200067a8:	4618      	mov	r0, r3
200067aa:	bd80      	pop	{r7, pc}
200067ac:	40023800 	.word	0x40023800
200067b0:	200095e4 	.word	0x200095e4

200067b4 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200067b4:	b480      	push	{r7}
200067b6:	b083      	sub	sp, #12
200067b8:	af00      	add	r7, sp, #0
200067ba:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
200067bc:	687b      	ldr	r3, [r7, #4]
200067be:	220f      	movs	r2, #15
200067c0:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
200067c2:	4b45      	ldr	r3, [pc, #276]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
200067c4:	681b      	ldr	r3, [r3, #0]
200067c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
200067ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
200067ce:	d104      	bne.n	200067da <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
200067d0:	687b      	ldr	r3, [r7, #4]
200067d2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
200067d6:	605a      	str	r2, [r3, #4]
200067d8:	e00e      	b.n	200067f8 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
200067da:	4b3f      	ldr	r3, [pc, #252]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
200067dc:	681b      	ldr	r3, [r3, #0]
200067de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200067e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200067e6:	d104      	bne.n	200067f2 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
200067e8:	687b      	ldr	r3, [r7, #4]
200067ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
200067ee:	605a      	str	r2, [r3, #4]
200067f0:	e002      	b.n	200067f8 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
200067f2:	687b      	ldr	r3, [r7, #4]
200067f4:	2200      	movs	r2, #0
200067f6:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
200067f8:	4b37      	ldr	r3, [pc, #220]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
200067fa:	681b      	ldr	r3, [r3, #0]
200067fc:	f003 0301 	and.w	r3, r3, #1
20006800:	2b01      	cmp	r3, #1
20006802:	d103      	bne.n	2000680c <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
20006804:	687b      	ldr	r3, [r7, #4]
20006806:	2201      	movs	r2, #1
20006808:	60da      	str	r2, [r3, #12]
2000680a:	e002      	b.n	20006812 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
2000680c:	687b      	ldr	r3, [r7, #4]
2000680e:	2200      	movs	r2, #0
20006810:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
20006812:	4b31      	ldr	r3, [pc, #196]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
20006814:	681b      	ldr	r3, [r3, #0]
20006816:	08db      	lsrs	r3, r3, #3
20006818:	f003 021f 	and.w	r2, r3, #31
2000681c:	687b      	ldr	r3, [r7, #4]
2000681e:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
20006820:	4b2d      	ldr	r3, [pc, #180]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
20006822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006824:	f003 0304 	and.w	r3, r3, #4
20006828:	2b04      	cmp	r3, #4
2000682a:	d103      	bne.n	20006834 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
2000682c:	687b      	ldr	r3, [r7, #4]
2000682e:	2205      	movs	r2, #5
20006830:	609a      	str	r2, [r3, #8]
20006832:	e00c      	b.n	2000684e <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
20006834:	4b28      	ldr	r3, [pc, #160]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
20006836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006838:	f003 0301 	and.w	r3, r3, #1
2000683c:	2b01      	cmp	r3, #1
2000683e:	d103      	bne.n	20006848 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
20006840:	687b      	ldr	r3, [r7, #4]
20006842:	2201      	movs	r2, #1
20006844:	609a      	str	r2, [r3, #8]
20006846:	e002      	b.n	2000684e <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
20006848:	687b      	ldr	r3, [r7, #4]
2000684a:	2200      	movs	r2, #0
2000684c:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
2000684e:	4b22      	ldr	r3, [pc, #136]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
20006850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20006852:	f003 0301 	and.w	r3, r3, #1
20006856:	2b01      	cmp	r3, #1
20006858:	d103      	bne.n	20006862 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
2000685a:	687b      	ldr	r3, [r7, #4]
2000685c:	2201      	movs	r2, #1
2000685e:	615a      	str	r2, [r3, #20]
20006860:	e002      	b.n	20006868 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
20006862:	687b      	ldr	r3, [r7, #4]
20006864:	2200      	movs	r2, #0
20006866:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
20006868:	4b1b      	ldr	r3, [pc, #108]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
2000686a:	681b      	ldr	r3, [r3, #0]
2000686c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20006870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
20006874:	d103      	bne.n	2000687e <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
20006876:	687b      	ldr	r3, [r7, #4]
20006878:	2202      	movs	r2, #2
2000687a:	619a      	str	r2, [r3, #24]
2000687c:	e002      	b.n	20006884 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
2000687e:	687b      	ldr	r3, [r7, #4]
20006880:	2201      	movs	r2, #1
20006882:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
20006884:	4b14      	ldr	r3, [pc, #80]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
20006886:	685b      	ldr	r3, [r3, #4]
20006888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000688c:	687b      	ldr	r3, [r7, #4]
2000688e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
20006890:	4b11      	ldr	r3, [pc, #68]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
20006892:	685b      	ldr	r3, [r3, #4]
20006894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
20006898:	687b      	ldr	r3, [r7, #4]
2000689a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
2000689c:	4b0e      	ldr	r3, [pc, #56]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
2000689e:	685b      	ldr	r3, [r3, #4]
200068a0:	099b      	lsrs	r3, r3, #6
200068a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
200068a6:	687b      	ldr	r3, [r7, #4]
200068a8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
200068aa:	4b0b      	ldr	r3, [pc, #44]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
200068ac:	685b      	ldr	r3, [r3, #4]
200068ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
200068b2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
200068b6:	005b      	lsls	r3, r3, #1
200068b8:	0c1a      	lsrs	r2, r3, #16
200068ba:	687b      	ldr	r3, [r7, #4]
200068bc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
200068be:	4b06      	ldr	r3, [pc, #24]	; (200068d8 <HAL_RCC_GetOscConfig+0x124>)
200068c0:	685b      	ldr	r3, [r3, #4]
200068c2:	0e1b      	lsrs	r3, r3, #24
200068c4:	f003 020f 	and.w	r2, r3, #15
200068c8:	687b      	ldr	r3, [r7, #4]
200068ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
200068cc:	bf00      	nop
200068ce:	370c      	adds	r7, #12
200068d0:	46bd      	mov	sp, r7
200068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200068d6:	4770      	bx	lr
200068d8:	40023800 	.word	0x40023800

200068dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
200068dc:	b480      	push	{r7}
200068de:	b083      	sub	sp, #12
200068e0:	af00      	add	r7, sp, #0
200068e2:	6078      	str	r0, [r7, #4]
200068e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
200068e6:	687b      	ldr	r3, [r7, #4]
200068e8:	220f      	movs	r2, #15
200068ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
200068ec:	4b12      	ldr	r3, [pc, #72]	; (20006938 <HAL_RCC_GetClockConfig+0x5c>)
200068ee:	689b      	ldr	r3, [r3, #8]
200068f0:	f003 0203 	and.w	r2, r3, #3
200068f4:	687b      	ldr	r3, [r7, #4]
200068f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
200068f8:	4b0f      	ldr	r3, [pc, #60]	; (20006938 <HAL_RCC_GetClockConfig+0x5c>)
200068fa:	689b      	ldr	r3, [r3, #8]
200068fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
20006900:	687b      	ldr	r3, [r7, #4]
20006902:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
20006904:	4b0c      	ldr	r3, [pc, #48]	; (20006938 <HAL_RCC_GetClockConfig+0x5c>)
20006906:	689b      	ldr	r3, [r3, #8]
20006908:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
2000690c:	687b      	ldr	r3, [r7, #4]
2000690e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
20006910:	4b09      	ldr	r3, [pc, #36]	; (20006938 <HAL_RCC_GetClockConfig+0x5c>)
20006912:	689b      	ldr	r3, [r3, #8]
20006914:	08db      	lsrs	r3, r3, #3
20006916:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
2000691a:	687b      	ldr	r3, [r7, #4]
2000691c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
2000691e:	4b07      	ldr	r3, [pc, #28]	; (2000693c <HAL_RCC_GetClockConfig+0x60>)
20006920:	681b      	ldr	r3, [r3, #0]
20006922:	f003 0207 	and.w	r2, r3, #7
20006926:	683b      	ldr	r3, [r7, #0]
20006928:	601a      	str	r2, [r3, #0]
}
2000692a:	bf00      	nop
2000692c:	370c      	adds	r7, #12
2000692e:	46bd      	mov	sp, r7
20006930:	f85d 7b04 	ldr.w	r7, [sp], #4
20006934:	4770      	bx	lr
20006936:	bf00      	nop
20006938:	40023800 	.word	0x40023800
2000693c:	40023c00 	.word	0x40023c00

20006940 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
20006940:	b580      	push	{r7, lr}
20006942:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
20006944:	4b06      	ldr	r3, [pc, #24]	; (20006960 <HAL_RCC_NMI_IRQHandler+0x20>)
20006946:	68db      	ldr	r3, [r3, #12]
20006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000694c:	2b80      	cmp	r3, #128	; 0x80
2000694e:	d104      	bne.n	2000695a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
20006950:	f000 f80a 	bl	20006968 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
20006954:	4b03      	ldr	r3, [pc, #12]	; (20006964 <HAL_RCC_NMI_IRQHandler+0x24>)
20006956:	2280      	movs	r2, #128	; 0x80
20006958:	701a      	strb	r2, [r3, #0]
  }
}
2000695a:	bf00      	nop
2000695c:	bd80      	pop	{r7, pc}
2000695e:	bf00      	nop
20006960:	40023800 	.word	0x40023800
20006964:	4002380e 	.word	0x4002380e

20006968 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
20006968:	b480      	push	{r7}
2000696a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
2000696c:	bf00      	nop
2000696e:	46bd      	mov	sp, r7
20006970:	f85d 7b04 	ldr.w	r7, [sp], #4
20006974:	4770      	bx	lr
	...

20006978 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20006978:	b580      	push	{r7, lr}
2000697a:	b086      	sub	sp, #24
2000697c:	af00      	add	r7, sp, #0
2000697e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
20006980:	2300      	movs	r3, #0
20006982:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
20006984:	2300      	movs	r3, #0
20006986:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
20006988:	687b      	ldr	r3, [r7, #4]
2000698a:	681b      	ldr	r3, [r3, #0]
2000698c:	f003 0301 	and.w	r3, r3, #1
20006990:	2b00      	cmp	r3, #0
20006992:	d105      	bne.n	200069a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
20006994:	687b      	ldr	r3, [r7, #4]
20006996:	681b      	ldr	r3, [r3, #0]
20006998:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
2000699c:	2b00      	cmp	r3, #0
2000699e:	d035      	beq.n	20006a0c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
200069a0:	4b62      	ldr	r3, [pc, #392]	; (20006b2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
200069a2:	2200      	movs	r2, #0
200069a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
200069a6:	f7fa ffaf 	bl	20001908 <HAL_GetTick>
200069aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200069ac:	e008      	b.n	200069c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
200069ae:	f7fa ffab 	bl	20001908 <HAL_GetTick>
200069b2:	4602      	mov	r2, r0
200069b4:	697b      	ldr	r3, [r7, #20]
200069b6:	1ad3      	subs	r3, r2, r3
200069b8:	2b02      	cmp	r3, #2
200069ba:	d901      	bls.n	200069c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200069bc:	2303      	movs	r3, #3
200069be:	e0b0      	b.n	20006b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
200069c0:	4b5b      	ldr	r3, [pc, #364]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
200069c2:	681b      	ldr	r3, [r3, #0]
200069c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
200069c8:	2b00      	cmp	r3, #0
200069ca:	d1f0      	bne.n	200069ae <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
200069cc:	687b      	ldr	r3, [r7, #4]
200069ce:	685b      	ldr	r3, [r3, #4]
200069d0:	019a      	lsls	r2, r3, #6
200069d2:	687b      	ldr	r3, [r7, #4]
200069d4:	689b      	ldr	r3, [r3, #8]
200069d6:	071b      	lsls	r3, r3, #28
200069d8:	4955      	ldr	r1, [pc, #340]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
200069da:	4313      	orrs	r3, r2
200069dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
200069e0:	4b52      	ldr	r3, [pc, #328]	; (20006b2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
200069e2:	2201      	movs	r2, #1
200069e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
200069e6:	f7fa ff8f 	bl	20001908 <HAL_GetTick>
200069ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
200069ec:	e008      	b.n	20006a00 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
200069ee:	f7fa ff8b 	bl	20001908 <HAL_GetTick>
200069f2:	4602      	mov	r2, r0
200069f4:	697b      	ldr	r3, [r7, #20]
200069f6:	1ad3      	subs	r3, r2, r3
200069f8:	2b02      	cmp	r3, #2
200069fa:	d901      	bls.n	20006a00 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
200069fc:	2303      	movs	r3, #3
200069fe:	e090      	b.n	20006b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
20006a00:	4b4b      	ldr	r3, [pc, #300]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006a02:	681b      	ldr	r3, [r3, #0]
20006a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20006a08:	2b00      	cmp	r3, #0
20006a0a:	d0f0      	beq.n	200069ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
20006a0c:	687b      	ldr	r3, [r7, #4]
20006a0e:	681b      	ldr	r3, [r3, #0]
20006a10:	f003 0302 	and.w	r3, r3, #2
20006a14:	2b00      	cmp	r3, #0
20006a16:	f000 8083 	beq.w	20006b20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
20006a1a:	2300      	movs	r3, #0
20006a1c:	60fb      	str	r3, [r7, #12]
20006a1e:	4b44      	ldr	r3, [pc, #272]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006a22:	4a43      	ldr	r2, [pc, #268]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20006a28:	6413      	str	r3, [r2, #64]	; 0x40
20006a2a:	4b41      	ldr	r3, [pc, #260]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20006a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20006a32:	60fb      	str	r3, [r7, #12]
20006a34:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
20006a36:	4b3f      	ldr	r3, [pc, #252]	; (20006b34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
20006a38:	681b      	ldr	r3, [r3, #0]
20006a3a:	4a3e      	ldr	r2, [pc, #248]	; (20006b34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
20006a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20006a40:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
20006a42:	f7fa ff61 	bl	20001908 <HAL_GetTick>
20006a46:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
20006a48:	e008      	b.n	20006a5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
20006a4a:	f7fa ff5d 	bl	20001908 <HAL_GetTick>
20006a4e:	4602      	mov	r2, r0
20006a50:	697b      	ldr	r3, [r7, #20]
20006a52:	1ad3      	subs	r3, r2, r3
20006a54:	2b02      	cmp	r3, #2
20006a56:	d901      	bls.n	20006a5c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
20006a58:	2303      	movs	r3, #3
20006a5a:	e062      	b.n	20006b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
20006a5c:	4b35      	ldr	r3, [pc, #212]	; (20006b34 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
20006a5e:	681b      	ldr	r3, [r3, #0]
20006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
20006a64:	2b00      	cmp	r3, #0
20006a66:	d0f0      	beq.n	20006a4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
20006a68:	4b31      	ldr	r3, [pc, #196]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
20006a70:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
20006a72:	693b      	ldr	r3, [r7, #16]
20006a74:	2b00      	cmp	r3, #0
20006a76:	d02f      	beq.n	20006ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>
20006a78:	687b      	ldr	r3, [r7, #4]
20006a7a:	68db      	ldr	r3, [r3, #12]
20006a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
20006a80:	693a      	ldr	r2, [r7, #16]
20006a82:	429a      	cmp	r2, r3
20006a84:	d028      	beq.n	20006ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
20006a86:	4b2a      	ldr	r3, [pc, #168]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20006a8e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
20006a90:	4b29      	ldr	r3, [pc, #164]	; (20006b38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
20006a92:	2201      	movs	r2, #1
20006a94:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
20006a96:	4b28      	ldr	r3, [pc, #160]	; (20006b38 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
20006a98:	2200      	movs	r2, #0
20006a9a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
20006a9c:	4a24      	ldr	r2, [pc, #144]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006a9e:	693b      	ldr	r3, [r7, #16]
20006aa0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
20006aa2:	4b23      	ldr	r3, [pc, #140]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006aa6:	f003 0301 	and.w	r3, r3, #1
20006aaa:	2b01      	cmp	r3, #1
20006aac:	d114      	bne.n	20006ad8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
20006aae:	f7fa ff2b 	bl	20001908 <HAL_GetTick>
20006ab2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006ab4:	e00a      	b.n	20006acc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
20006ab6:	f7fa ff27 	bl	20001908 <HAL_GetTick>
20006aba:	4602      	mov	r2, r0
20006abc:	697b      	ldr	r3, [r7, #20]
20006abe:	1ad3      	subs	r3, r2, r3
20006ac0:	f241 3288 	movw	r2, #5000	; 0x1388
20006ac4:	4293      	cmp	r3, r2
20006ac6:	d901      	bls.n	20006acc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
20006ac8:	2303      	movs	r3, #3
20006aca:	e02a      	b.n	20006b22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
20006acc:	4b18      	ldr	r3, [pc, #96]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006ad0:	f003 0302 	and.w	r3, r3, #2
20006ad4:	2b00      	cmp	r3, #0
20006ad6:	d0ee      	beq.n	20006ab6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
20006ad8:	687b      	ldr	r3, [r7, #4]
20006ada:	68db      	ldr	r3, [r3, #12]
20006adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
20006ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
20006ae4:	d10d      	bne.n	20006b02 <HAL_RCCEx_PeriphCLKConfig+0x18a>
20006ae6:	4b12      	ldr	r3, [pc, #72]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006ae8:	689b      	ldr	r3, [r3, #8]
20006aea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
20006aee:	687b      	ldr	r3, [r7, #4]
20006af0:	68db      	ldr	r3, [r3, #12]
20006af2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
20006af6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
20006afa:	490d      	ldr	r1, [pc, #52]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006afc:	4313      	orrs	r3, r2
20006afe:	608b      	str	r3, [r1, #8]
20006b00:	e005      	b.n	20006b0e <HAL_RCCEx_PeriphCLKConfig+0x196>
20006b02:	4b0b      	ldr	r3, [pc, #44]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006b04:	689b      	ldr	r3, [r3, #8]
20006b06:	4a0a      	ldr	r2, [pc, #40]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006b08:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
20006b0c:	6093      	str	r3, [r2, #8]
20006b0e:	4b08      	ldr	r3, [pc, #32]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006b10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
20006b12:	687b      	ldr	r3, [r7, #4]
20006b14:	68db      	ldr	r3, [r3, #12]
20006b16:	f3c3 030b 	ubfx	r3, r3, #0, #12
20006b1a:	4905      	ldr	r1, [pc, #20]	; (20006b30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
20006b1c:	4313      	orrs	r3, r2
20006b1e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
20006b20:	2300      	movs	r3, #0
}
20006b22:	4618      	mov	r0, r3
20006b24:	3718      	adds	r7, #24
20006b26:	46bd      	mov	sp, r7
20006b28:	bd80      	pop	{r7, pc}
20006b2a:	bf00      	nop
20006b2c:	42470068 	.word	0x42470068
20006b30:	40023800 	.word	0x40023800
20006b34:	40007000 	.word	0x40007000
20006b38:	42470e40 	.word	0x42470e40

20006b3c <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
20006b3c:	b480      	push	{r7}
20006b3e:	b085      	sub	sp, #20
20006b40:	af00      	add	r7, sp, #0
20006b42:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
20006b44:	687b      	ldr	r3, [r7, #4]
20006b46:	2203      	movs	r2, #3
20006b48:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
20006b4a:	4b11      	ldr	r3, [pc, #68]	; (20006b90 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
20006b4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20006b50:	099b      	lsrs	r3, r3, #6
20006b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
20006b56:	687b      	ldr	r3, [r7, #4]
20006b58:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
20006b5a:	4b0d      	ldr	r3, [pc, #52]	; (20006b90 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
20006b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20006b60:	0f1b      	lsrs	r3, r3, #28
20006b62:	f003 0207 	and.w	r2, r3, #7
20006b66:	687b      	ldr	r3, [r7, #4]
20006b68:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
20006b6a:	4b09      	ldr	r3, [pc, #36]	; (20006b90 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
20006b6c:	689b      	ldr	r3, [r3, #8]
20006b6e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
20006b72:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
20006b74:	4b06      	ldr	r3, [pc, #24]	; (20006b90 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
20006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
20006b78:	f403 7240 	and.w	r2, r3, #768	; 0x300
20006b7c:	68fb      	ldr	r3, [r7, #12]
20006b7e:	431a      	orrs	r2, r3
20006b80:	687b      	ldr	r3, [r7, #4]
20006b82:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
20006b84:	bf00      	nop
20006b86:	3714      	adds	r7, #20
20006b88:	46bd      	mov	sp, r7
20006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
20006b8e:	4770      	bx	lr
20006b90:	40023800 	.word	0x40023800

20006b94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
20006b94:	b480      	push	{r7}
20006b96:	b087      	sub	sp, #28
20006b98:	af00      	add	r7, sp, #0
20006b9a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
20006b9c:	2300      	movs	r3, #0
20006b9e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
20006ba0:	2300      	movs	r3, #0
20006ba2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
20006ba4:	2300      	movs	r3, #0
20006ba6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
20006ba8:	2300      	movs	r3, #0
20006baa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
20006bac:	687b      	ldr	r3, [r7, #4]
20006bae:	2b01      	cmp	r3, #1
20006bb0:	d13e      	bne.n	20006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
20006bb2:	4b23      	ldr	r3, [pc, #140]	; (20006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
20006bb4:	689b      	ldr	r3, [r3, #8]
20006bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
20006bba:	60fb      	str	r3, [r7, #12]
20006bbc:	68fb      	ldr	r3, [r7, #12]
20006bbe:	2b00      	cmp	r3, #0
20006bc0:	d005      	beq.n	20006bce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
20006bc2:	68fb      	ldr	r3, [r7, #12]
20006bc4:	2b01      	cmp	r3, #1
20006bc6:	d12f      	bne.n	20006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
20006bc8:	4b1e      	ldr	r3, [pc, #120]	; (20006c44 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
20006bca:	617b      	str	r3, [r7, #20]
          break;
20006bcc:	e02f      	b.n	20006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
20006bce:	4b1c      	ldr	r3, [pc, #112]	; (20006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
20006bd0:	685b      	ldr	r3, [r3, #4]
20006bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
20006bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
20006bda:	d108      	bne.n	20006bee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20006bdc:	4b18      	ldr	r3, [pc, #96]	; (20006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
20006bde:	685b      	ldr	r3, [r3, #4]
20006be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20006be4:	4a18      	ldr	r2, [pc, #96]	; (20006c48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
20006be6:	fbb2 f3f3 	udiv	r3, r2, r3
20006bea:	613b      	str	r3, [r7, #16]
20006bec:	e007      	b.n	20006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
20006bee:	4b14      	ldr	r3, [pc, #80]	; (20006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
20006bf0:	685b      	ldr	r3, [r3, #4]
20006bf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
20006bf6:	4a15      	ldr	r2, [pc, #84]	; (20006c4c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
20006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
20006bfc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
20006bfe:	4b10      	ldr	r3, [pc, #64]	; (20006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
20006c00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20006c04:	099b      	lsrs	r3, r3, #6
20006c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
20006c0a:	693b      	ldr	r3, [r7, #16]
20006c0c:	fb02 f303 	mul.w	r3, r2, r3
20006c10:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
20006c12:	4b0b      	ldr	r3, [pc, #44]	; (20006c40 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
20006c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
20006c18:	0f1b      	lsrs	r3, r3, #28
20006c1a:	f003 0307 	and.w	r3, r3, #7
20006c1e:	68ba      	ldr	r2, [r7, #8]
20006c20:	fbb2 f3f3 	udiv	r3, r2, r3
20006c24:	617b      	str	r3, [r7, #20]
          break;
20006c26:	e002      	b.n	20006c2e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
20006c28:	2300      	movs	r3, #0
20006c2a:	617b      	str	r3, [r7, #20]
          break;
20006c2c:	bf00      	nop
        }
      }
      break;
20006c2e:	bf00      	nop
    }
  }
  return frequency;
20006c30:	697b      	ldr	r3, [r7, #20]
}
20006c32:	4618      	mov	r0, r3
20006c34:	371c      	adds	r7, #28
20006c36:	46bd      	mov	sp, r7
20006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
20006c3c:	4770      	bx	lr
20006c3e:	bf00      	nop
20006c40:	40023800 	.word	0x40023800
20006c44:	00bb8000 	.word	0x00bb8000
20006c48:	007a1200 	.word	0x007a1200
20006c4c:	00f42400 	.word	0x00f42400

20006c50 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
20006c50:	b580      	push	{r7, lr}
20006c52:	b084      	sub	sp, #16
20006c54:	af00      	add	r7, sp, #0
20006c56:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20006c58:	4b1d      	ldr	r3, [pc, #116]	; (20006cd0 <HAL_RCCEx_EnablePLLI2S+0x80>)
20006c5a:	2200      	movs	r2, #0
20006c5c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20006c5e:	f7fa fe53 	bl	20001908 <HAL_GetTick>
20006c62:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20006c64:	e008      	b.n	20006c78 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20006c66:	f7fa fe4f 	bl	20001908 <HAL_GetTick>
20006c6a:	4602      	mov	r2, r0
20006c6c:	68fb      	ldr	r3, [r7, #12]
20006c6e:	1ad3      	subs	r3, r2, r3
20006c70:	2b02      	cmp	r3, #2
20006c72:	d901      	bls.n	20006c78 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20006c74:	2303      	movs	r3, #3
20006c76:	e026      	b.n	20006cc6 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
20006c78:	4b16      	ldr	r3, [pc, #88]	; (20006cd4 <HAL_RCCEx_EnablePLLI2S+0x84>)
20006c7a:	681b      	ldr	r3, [r3, #0]
20006c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20006c80:	2b00      	cmp	r3, #0
20006c82:	d1f0      	bne.n	20006c66 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
20006c84:	687b      	ldr	r3, [r7, #4]
20006c86:	681b      	ldr	r3, [r3, #0]
20006c88:	019a      	lsls	r2, r3, #6
20006c8a:	687b      	ldr	r3, [r7, #4]
20006c8c:	685b      	ldr	r3, [r3, #4]
20006c8e:	071b      	lsls	r3, r3, #28
20006c90:	4910      	ldr	r1, [pc, #64]	; (20006cd4 <HAL_RCCEx_EnablePLLI2S+0x84>)
20006c92:	4313      	orrs	r3, r2
20006c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
20006c98:	4b0d      	ldr	r3, [pc, #52]	; (20006cd0 <HAL_RCCEx_EnablePLLI2S+0x80>)
20006c9a:	2201      	movs	r2, #1
20006c9c:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
20006c9e:	f7fa fe33 	bl	20001908 <HAL_GetTick>
20006ca2:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
20006ca4:	e008      	b.n	20006cb8 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
20006ca6:	f7fa fe2f 	bl	20001908 <HAL_GetTick>
20006caa:	4602      	mov	r2, r0
20006cac:	68fb      	ldr	r3, [r7, #12]
20006cae:	1ad3      	subs	r3, r2, r3
20006cb0:	2b02      	cmp	r3, #2
20006cb2:	d901      	bls.n	20006cb8 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20006cb4:	2303      	movs	r3, #3
20006cb6:	e006      	b.n	20006cc6 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
20006cb8:	4b06      	ldr	r3, [pc, #24]	; (20006cd4 <HAL_RCCEx_EnablePLLI2S+0x84>)
20006cba:	681b      	ldr	r3, [r3, #0]
20006cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20006cc0:	2b00      	cmp	r3, #0
20006cc2:	d0f0      	beq.n	20006ca6 <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
20006cc4:	2300      	movs	r3, #0
}
20006cc6:	4618      	mov	r0, r3
20006cc8:	3710      	adds	r7, #16
20006cca:	46bd      	mov	sp, r7
20006ccc:	bd80      	pop	{r7, pc}
20006cce:	bf00      	nop
20006cd0:	42470068 	.word	0x42470068
20006cd4:	40023800 	.word	0x40023800

20006cd8 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
20006cd8:	b580      	push	{r7, lr}
20006cda:	b082      	sub	sp, #8
20006cdc:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
20006cde:	4b0d      	ldr	r3, [pc, #52]	; (20006d14 <HAL_RCCEx_DisablePLLI2S+0x3c>)
20006ce0:	2200      	movs	r2, #0
20006ce2:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
20006ce4:	f7fa fe10 	bl	20001908 <HAL_GetTick>
20006ce8:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20006cea:	e008      	b.n	20006cfe <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20006cec:	f7fa fe0c 	bl	20001908 <HAL_GetTick>
20006cf0:	4602      	mov	r2, r0
20006cf2:	687b      	ldr	r3, [r7, #4]
20006cf4:	1ad3      	subs	r3, r2, r3
20006cf6:	2b02      	cmp	r3, #2
20006cf8:	d901      	bls.n	20006cfe <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
20006cfa:	2303      	movs	r3, #3
20006cfc:	e006      	b.n	20006d0c <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20006cfe:	4b06      	ldr	r3, [pc, #24]	; (20006d18 <HAL_RCCEx_DisablePLLI2S+0x40>)
20006d00:	681b      	ldr	r3, [r3, #0]
20006d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20006d06:	2b00      	cmp	r3, #0
20006d08:	d1f0      	bne.n	20006cec <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
20006d0a:	2300      	movs	r3, #0
}
20006d0c:	4618      	mov	r0, r3
20006d0e:	3708      	adds	r7, #8
20006d10:	46bd      	mov	sp, r7
20006d12:	bd80      	pop	{r7, pc}
20006d14:	42470068 	.word	0x42470068
20006d18:	40023800 	.word	0x40023800

20006d1c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
20006d1c:	b580      	push	{r7, lr}
20006d1e:	b082      	sub	sp, #8
20006d20:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20006d22:	f7fa fdf1 	bl	20001908 <HAL_GetTick>
20006d26:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
20006d28:	4b5d      	ldr	r3, [pc, #372]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d2a:	681b      	ldr	r3, [r3, #0]
20006d2c:	4a5c      	ldr	r2, [pc, #368]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d2e:	f043 0301 	orr.w	r3, r3, #1
20006d32:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20006d34:	e008      	b.n	20006d48 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20006d36:	f7fa fde7 	bl	20001908 <HAL_GetTick>
20006d3a:	4602      	mov	r2, r0
20006d3c:	687b      	ldr	r3, [r7, #4]
20006d3e:	1ad3      	subs	r3, r2, r3
20006d40:	2b02      	cmp	r3, #2
20006d42:	d901      	bls.n	20006d48 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
20006d44:	2303      	movs	r3, #3
20006d46:	e0a7      	b.n	20006e98 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
20006d48:	4b55      	ldr	r3, [pc, #340]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d4a:	681b      	ldr	r3, [r3, #0]
20006d4c:	f003 0302 	and.w	r3, r3, #2
20006d50:	2b00      	cmp	r3, #0
20006d52:	d0f0      	beq.n	20006d36 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
20006d54:	4b52      	ldr	r3, [pc, #328]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d56:	681b      	ldr	r3, [r3, #0]
20006d58:	4a51      	ldr	r2, [pc, #324]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20006d5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20006d60:	f7fa fdd2 	bl	20001908 <HAL_GetTick>
20006d64:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
20006d66:	4b4e      	ldr	r3, [pc, #312]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d68:	2200      	movs	r2, #0
20006d6a:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20006d6c:	e00a      	b.n	20006d84 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20006d6e:	f7fa fdcb 	bl	20001908 <HAL_GetTick>
20006d72:	4602      	mov	r2, r0
20006d74:	687b      	ldr	r3, [r7, #4]
20006d76:	1ad3      	subs	r3, r2, r3
20006d78:	f241 3288 	movw	r2, #5000	; 0x1388
20006d7c:	4293      	cmp	r3, r2
20006d7e:	d901      	bls.n	20006d84 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
20006d80:	2303      	movs	r3, #3
20006d82:	e089      	b.n	20006e98 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
20006d84:	4b46      	ldr	r3, [pc, #280]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d86:	689b      	ldr	r3, [r3, #8]
20006d88:	f003 030c 	and.w	r3, r3, #12
20006d8c:	2b00      	cmp	r3, #0
20006d8e:	d1ee      	bne.n	20006d6e <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20006d90:	f7fa fdba 	bl	20001908 <HAL_GetTick>
20006d94:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
20006d96:	4b42      	ldr	r3, [pc, #264]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d98:	681b      	ldr	r3, [r3, #0]
20006d9a:	4a41      	ldr	r2, [pc, #260]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006d9c:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
20006da0:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
20006da2:	e008      	b.n	20006db6 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
20006da4:	f7fa fdb0 	bl	20001908 <HAL_GetTick>
20006da8:	4602      	mov	r2, r0
20006daa:	687b      	ldr	r3, [r7, #4]
20006dac:	1ad3      	subs	r3, r2, r3
20006dae:	2b64      	cmp	r3, #100	; 0x64
20006db0:	d901      	bls.n	20006db6 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
20006db2:	2303      	movs	r3, #3
20006db4:	e070      	b.n	20006e98 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
20006db6:	4b3a      	ldr	r3, [pc, #232]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006db8:	681b      	ldr	r3, [r3, #0]
20006dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20006dbe:	2b00      	cmp	r3, #0
20006dc0:	d1f0      	bne.n	20006da4 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
20006dc2:	f7fa fda1 	bl	20001908 <HAL_GetTick>
20006dc6:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
20006dc8:	4b35      	ldr	r3, [pc, #212]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006dca:	681b      	ldr	r3, [r3, #0]
20006dcc:	4a34      	ldr	r2, [pc, #208]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20006dd2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20006dd4:	e008      	b.n	20006de8 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20006dd6:	f7fa fd97 	bl	20001908 <HAL_GetTick>
20006dda:	4602      	mov	r2, r0
20006ddc:	687b      	ldr	r3, [r7, #4]
20006dde:	1ad3      	subs	r3, r2, r3
20006de0:	2b02      	cmp	r3, #2
20006de2:	d901      	bls.n	20006de8 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
20006de4:	2303      	movs	r3, #3
20006de6:	e057      	b.n	20006e98 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
20006de8:	4b2d      	ldr	r3, [pc, #180]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006dea:	681b      	ldr	r3, [r3, #0]
20006dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20006df0:	2b00      	cmp	r3, #0
20006df2:	d1f0      	bne.n	20006dd6 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
20006df4:	f7fa fd88 	bl	20001908 <HAL_GetTick>
20006df8:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
20006dfa:	4b29      	ldr	r3, [pc, #164]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006dfc:	681b      	ldr	r3, [r3, #0]
20006dfe:	4a28      	ldr	r2, [pc, #160]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
20006e04:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20006e06:	e008      	b.n	20006e1a <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
20006e08:	f7fa fd7e 	bl	20001908 <HAL_GetTick>
20006e0c:	4602      	mov	r2, r0
20006e0e:	687b      	ldr	r3, [r7, #4]
20006e10:	1ad3      	subs	r3, r2, r3
20006e12:	2b02      	cmp	r3, #2
20006e14:	d901      	bls.n	20006e1a <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
20006e16:	2303      	movs	r3, #3
20006e18:	e03e      	b.n	20006e98 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
20006e1a:	4b21      	ldr	r3, [pc, #132]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e1c:	681b      	ldr	r3, [r3, #0]
20006e1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
20006e22:	2b00      	cmp	r3, #0
20006e24:	d1f0      	bne.n	20006e08 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
20006e26:	4b1e      	ldr	r3, [pc, #120]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e28:	4a1e      	ldr	r2, [pc, #120]	; (20006ea4 <HAL_RCC_DeInit+0x188>)
20006e2a:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
20006e2c:	4b1c      	ldr	r3, [pc, #112]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e2e:	4a1e      	ldr	r2, [pc, #120]	; (20006ea8 <HAL_RCC_DeInit+0x18c>)
20006e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
20006e34:	4b1a      	ldr	r3, [pc, #104]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e36:	68db      	ldr	r3, [r3, #12]
20006e38:	4a19      	ldr	r2, [pc, #100]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e3a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
20006e3e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
20006e40:	4b17      	ldr	r3, [pc, #92]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e42:	68db      	ldr	r3, [r3, #12]
20006e44:	4a16      	ldr	r2, [pc, #88]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
20006e4a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
20006e4c:	4b14      	ldr	r3, [pc, #80]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e4e:	68db      	ldr	r3, [r3, #12]
20006e50:	4a13      	ldr	r2, [pc, #76]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e52:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
20006e56:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
20006e58:	4b11      	ldr	r3, [pc, #68]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e5a:	68db      	ldr	r3, [r3, #12]
20006e5c:	4a10      	ldr	r2, [pc, #64]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
20006e62:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
20006e64:	4b0e      	ldr	r3, [pc, #56]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20006e68:	4a0d      	ldr	r2, [pc, #52]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e6a:	f023 0301 	bic.w	r3, r3, #1
20006e6e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
20006e70:	4b0b      	ldr	r3, [pc, #44]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
20006e74:	4a0a      	ldr	r2, [pc, #40]	; (20006ea0 <HAL_RCC_DeInit+0x184>)
20006e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20006e7a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
20006e7c:	4b0b      	ldr	r3, [pc, #44]	; (20006eac <HAL_RCC_DeInit+0x190>)
20006e7e:	4a0c      	ldr	r2, [pc, #48]	; (20006eb0 <HAL_RCC_DeInit+0x194>)
20006e80:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
20006e82:	4b0c      	ldr	r3, [pc, #48]	; (20006eb4 <HAL_RCC_DeInit+0x198>)
20006e84:	681b      	ldr	r3, [r3, #0]
20006e86:	4618      	mov	r0, r3
20006e88:	f7fa fcfa 	bl	20001880 <HAL_InitTick>
20006e8c:	4603      	mov	r3, r0
20006e8e:	2b00      	cmp	r3, #0
20006e90:	d001      	beq.n	20006e96 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
20006e92:	2301      	movs	r3, #1
20006e94:	e000      	b.n	20006e98 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
20006e96:	2300      	movs	r3, #0
  }
}
20006e98:	4618      	mov	r0, r3
20006e9a:	3708      	adds	r7, #8
20006e9c:	46bd      	mov	sp, r7
20006e9e:	bd80      	pop	{r7, pc}
20006ea0:	40023800 	.word	0x40023800
20006ea4:	04003010 	.word	0x04003010
20006ea8:	20003000 	.word	0x20003000
20006eac:	200003a0 	.word	0x200003a0
20006eb0:	00f42400 	.word	0x00f42400
20006eb4:	200003a4 	.word	0x200003a4

20006eb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
20006eb8:	b580      	push	{r7, lr}
20006eba:	b082      	sub	sp, #8
20006ebc:	af00      	add	r7, sp, #0
20006ebe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20006ec0:	687b      	ldr	r3, [r7, #4]
20006ec2:	2b00      	cmp	r3, #0
20006ec4:	d101      	bne.n	20006eca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
20006ec6:	2301      	movs	r3, #1
20006ec8:	e07b      	b.n	20006fc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20006eca:	687b      	ldr	r3, [r7, #4]
20006ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006ece:	2b00      	cmp	r3, #0
20006ed0:	d108      	bne.n	20006ee4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
20006ed2:	687b      	ldr	r3, [r7, #4]
20006ed4:	685b      	ldr	r3, [r3, #4]
20006ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20006eda:	d009      	beq.n	20006ef0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20006edc:	687b      	ldr	r3, [r7, #4]
20006ede:	2200      	movs	r2, #0
20006ee0:	61da      	str	r2, [r3, #28]
20006ee2:	e005      	b.n	20006ef0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
20006ee4:	687b      	ldr	r3, [r7, #4]
20006ee6:	2200      	movs	r2, #0
20006ee8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20006eea:	687b      	ldr	r3, [r7, #4]
20006eec:	2200      	movs	r2, #0
20006eee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20006ef0:	687b      	ldr	r3, [r7, #4]
20006ef2:	2200      	movs	r2, #0
20006ef4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
20006ef6:	687b      	ldr	r3, [r7, #4]
20006ef8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20006efc:	b2db      	uxtb	r3, r3
20006efe:	2b00      	cmp	r3, #0
20006f00:	d106      	bne.n	20006f10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
20006f02:	687b      	ldr	r3, [r7, #4]
20006f04:	2200      	movs	r2, #0
20006f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20006f0a:	6878      	ldr	r0, [r7, #4]
20006f0c:	f7f9 ffa0 	bl	20000e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20006f10:	687b      	ldr	r3, [r7, #4]
20006f12:	2202      	movs	r2, #2
20006f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20006f18:	687b      	ldr	r3, [r7, #4]
20006f1a:	681b      	ldr	r3, [r3, #0]
20006f1c:	681a      	ldr	r2, [r3, #0]
20006f1e:	687b      	ldr	r3, [r7, #4]
20006f20:	681b      	ldr	r3, [r3, #0]
20006f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20006f26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20006f28:	687b      	ldr	r3, [r7, #4]
20006f2a:	685b      	ldr	r3, [r3, #4]
20006f2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
20006f30:	687b      	ldr	r3, [r7, #4]
20006f32:	689b      	ldr	r3, [r3, #8]
20006f34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
20006f38:	431a      	orrs	r2, r3
20006f3a:	687b      	ldr	r3, [r7, #4]
20006f3c:	68db      	ldr	r3, [r3, #12]
20006f3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
20006f42:	431a      	orrs	r2, r3
20006f44:	687b      	ldr	r3, [r7, #4]
20006f46:	691b      	ldr	r3, [r3, #16]
20006f48:	f003 0302 	and.w	r3, r3, #2
20006f4c:	431a      	orrs	r2, r3
20006f4e:	687b      	ldr	r3, [r7, #4]
20006f50:	695b      	ldr	r3, [r3, #20]
20006f52:	f003 0301 	and.w	r3, r3, #1
20006f56:	431a      	orrs	r2, r3
20006f58:	687b      	ldr	r3, [r7, #4]
20006f5a:	699b      	ldr	r3, [r3, #24]
20006f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
20006f60:	431a      	orrs	r2, r3
20006f62:	687b      	ldr	r3, [r7, #4]
20006f64:	69db      	ldr	r3, [r3, #28]
20006f66:	f003 0338 	and.w	r3, r3, #56	; 0x38
20006f6a:	431a      	orrs	r2, r3
20006f6c:	687b      	ldr	r3, [r7, #4]
20006f6e:	6a1b      	ldr	r3, [r3, #32]
20006f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
20006f74:	ea42 0103 	orr.w	r1, r2, r3
20006f78:	687b      	ldr	r3, [r7, #4]
20006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20006f7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
20006f80:	687b      	ldr	r3, [r7, #4]
20006f82:	681b      	ldr	r3, [r3, #0]
20006f84:	430a      	orrs	r2, r1
20006f86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
20006f88:	687b      	ldr	r3, [r7, #4]
20006f8a:	699b      	ldr	r3, [r3, #24]
20006f8c:	0c1b      	lsrs	r3, r3, #16
20006f8e:	f003 0104 	and.w	r1, r3, #4
20006f92:	687b      	ldr	r3, [r7, #4]
20006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20006f96:	f003 0210 	and.w	r2, r3, #16
20006f9a:	687b      	ldr	r3, [r7, #4]
20006f9c:	681b      	ldr	r3, [r3, #0]
20006f9e:	430a      	orrs	r2, r1
20006fa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
20006fa2:	687b      	ldr	r3, [r7, #4]
20006fa4:	681b      	ldr	r3, [r3, #0]
20006fa6:	69da      	ldr	r2, [r3, #28]
20006fa8:	687b      	ldr	r3, [r7, #4]
20006faa:	681b      	ldr	r3, [r3, #0]
20006fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
20006fb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20006fb2:	687b      	ldr	r3, [r7, #4]
20006fb4:	2200      	movs	r2, #0
20006fb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
20006fb8:	687b      	ldr	r3, [r7, #4]
20006fba:	2201      	movs	r2, #1
20006fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
20006fc0:	2300      	movs	r3, #0
}
20006fc2:	4618      	mov	r0, r3
20006fc4:	3708      	adds	r7, #8
20006fc6:	46bd      	mov	sp, r7
20006fc8:	bd80      	pop	{r7, pc}

20006fca <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
20006fca:	b580      	push	{r7, lr}
20006fcc:	b082      	sub	sp, #8
20006fce:	af00      	add	r7, sp, #0
20006fd0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
20006fd2:	687b      	ldr	r3, [r7, #4]
20006fd4:	2b00      	cmp	r3, #0
20006fd6:	d101      	bne.n	20006fdc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
20006fd8:	2301      	movs	r3, #1
20006fda:	e01a      	b.n	20007012 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
20006fdc:	687b      	ldr	r3, [r7, #4]
20006fde:	2202      	movs	r2, #2
20006fe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
20006fe4:	687b      	ldr	r3, [r7, #4]
20006fe6:	681b      	ldr	r3, [r3, #0]
20006fe8:	681a      	ldr	r2, [r3, #0]
20006fea:	687b      	ldr	r3, [r7, #4]
20006fec:	681b      	ldr	r3, [r3, #0]
20006fee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20006ff2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
20006ff4:	6878      	ldr	r0, [r7, #4]
20006ff6:	f7f9 ff93 	bl	20000f20 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20006ffa:	687b      	ldr	r3, [r7, #4]
20006ffc:	2200      	movs	r2, #0
20006ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
20007000:	687b      	ldr	r3, [r7, #4]
20007002:	2200      	movs	r2, #0
20007004:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
20007008:	687b      	ldr	r3, [r7, #4]
2000700a:	2200      	movs	r2, #0
2000700c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
20007010:	2300      	movs	r3, #0
}
20007012:	4618      	mov	r0, r3
20007014:	3708      	adds	r7, #8
20007016:	46bd      	mov	sp, r7
20007018:	bd80      	pop	{r7, pc}
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
2000701a:	b480      	push	{r7}
2000701c:	b083      	sub	sp, #12
2000701e:	af00      	add	r7, sp, #0
20007020:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
20007022:	bf00      	nop
20007024:	370c      	adds	r7, #12
20007026:	46bd      	mov	sp, r7
20007028:	f85d 7b04 	ldr.w	r7, [sp], #4
2000702c:	4770      	bx	lr
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
2000702e:	b480      	push	{r7}
20007030:	b083      	sub	sp, #12
20007032:	af00      	add	r7, sp, #0
20007034:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
20007036:	bf00      	nop
20007038:	370c      	adds	r7, #12
2000703a:	46bd      	mov	sp, r7
2000703c:	f85d 7b04 	ldr.w	r7, [sp], #4
20007040:	4770      	bx	lr

20007042 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20007042:	b580      	push	{r7, lr}
20007044:	b088      	sub	sp, #32
20007046:	af00      	add	r7, sp, #0
20007048:	60f8      	str	r0, [r7, #12]
2000704a:	60b9      	str	r1, [r7, #8]
2000704c:	603b      	str	r3, [r7, #0]
2000704e:	4613      	mov	r3, r2
20007050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20007052:	2300      	movs	r3, #0
20007054:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20007056:	68fb      	ldr	r3, [r7, #12]
20007058:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
2000705c:	2b01      	cmp	r3, #1
2000705e:	d101      	bne.n	20007064 <HAL_SPI_Transmit+0x22>
20007060:	2302      	movs	r3, #2
20007062:	e126      	b.n	200072b2 <HAL_SPI_Transmit+0x270>
20007064:	68fb      	ldr	r3, [r7, #12]
20007066:	2201      	movs	r2, #1
20007068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000706c:	f7fa fc4c 	bl	20001908 <HAL_GetTick>
20007070:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20007072:	88fb      	ldrh	r3, [r7, #6]
20007074:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
20007076:	68fb      	ldr	r3, [r7, #12]
20007078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000707c:	b2db      	uxtb	r3, r3
2000707e:	2b01      	cmp	r3, #1
20007080:	d002      	beq.n	20007088 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20007082:	2302      	movs	r3, #2
20007084:	77fb      	strb	r3, [r7, #31]
    goto error;
20007086:	e10b      	b.n	200072a0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
20007088:	68bb      	ldr	r3, [r7, #8]
2000708a:	2b00      	cmp	r3, #0
2000708c:	d002      	beq.n	20007094 <HAL_SPI_Transmit+0x52>
2000708e:	88fb      	ldrh	r3, [r7, #6]
20007090:	2b00      	cmp	r3, #0
20007092:	d102      	bne.n	2000709a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20007094:	2301      	movs	r3, #1
20007096:	77fb      	strb	r3, [r7, #31]
    goto error;
20007098:	e102      	b.n	200072a0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
2000709a:	68fb      	ldr	r3, [r7, #12]
2000709c:	2203      	movs	r2, #3
2000709e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200070a2:	68fb      	ldr	r3, [r7, #12]
200070a4:	2200      	movs	r2, #0
200070a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
200070a8:	68fb      	ldr	r3, [r7, #12]
200070aa:	68ba      	ldr	r2, [r7, #8]
200070ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
200070ae:	68fb      	ldr	r3, [r7, #12]
200070b0:	88fa      	ldrh	r2, [r7, #6]
200070b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
200070b4:	68fb      	ldr	r3, [r7, #12]
200070b6:	88fa      	ldrh	r2, [r7, #6]
200070b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
200070ba:	68fb      	ldr	r3, [r7, #12]
200070bc:	2200      	movs	r2, #0
200070be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
200070c0:	68fb      	ldr	r3, [r7, #12]
200070c2:	2200      	movs	r2, #0
200070c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
200070c6:	68fb      	ldr	r3, [r7, #12]
200070c8:	2200      	movs	r2, #0
200070ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
200070cc:	68fb      	ldr	r3, [r7, #12]
200070ce:	2200      	movs	r2, #0
200070d0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
200070d2:	68fb      	ldr	r3, [r7, #12]
200070d4:	2200      	movs	r2, #0
200070d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200070d8:	68fb      	ldr	r3, [r7, #12]
200070da:	689b      	ldr	r3, [r3, #8]
200070dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200070e0:	d10f      	bne.n	20007102 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200070e2:	68fb      	ldr	r3, [r7, #12]
200070e4:	681b      	ldr	r3, [r3, #0]
200070e6:	681a      	ldr	r2, [r3, #0]
200070e8:	68fb      	ldr	r3, [r7, #12]
200070ea:	681b      	ldr	r3, [r3, #0]
200070ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200070f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
200070f2:	68fb      	ldr	r3, [r7, #12]
200070f4:	681b      	ldr	r3, [r3, #0]
200070f6:	681a      	ldr	r2, [r3, #0]
200070f8:	68fb      	ldr	r3, [r7, #12]
200070fa:	681b      	ldr	r3, [r3, #0]
200070fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20007100:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007102:	68fb      	ldr	r3, [r7, #12]
20007104:	681b      	ldr	r3, [r3, #0]
20007106:	681b      	ldr	r3, [r3, #0]
20007108:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000710c:	2b40      	cmp	r3, #64	; 0x40
2000710e:	d007      	beq.n	20007120 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007110:	68fb      	ldr	r3, [r7, #12]
20007112:	681b      	ldr	r3, [r3, #0]
20007114:	681a      	ldr	r2, [r3, #0]
20007116:	68fb      	ldr	r3, [r7, #12]
20007118:	681b      	ldr	r3, [r3, #0]
2000711a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000711e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
20007120:	68fb      	ldr	r3, [r7, #12]
20007122:	68db      	ldr	r3, [r3, #12]
20007124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
20007128:	d14b      	bne.n	200071c2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
2000712a:	68fb      	ldr	r3, [r7, #12]
2000712c:	685b      	ldr	r3, [r3, #4]
2000712e:	2b00      	cmp	r3, #0
20007130:	d002      	beq.n	20007138 <HAL_SPI_Transmit+0xf6>
20007132:	8afb      	ldrh	r3, [r7, #22]
20007134:	2b01      	cmp	r3, #1
20007136:	d13e      	bne.n	200071b6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20007138:	68fb      	ldr	r3, [r7, #12]
2000713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000713c:	881a      	ldrh	r2, [r3, #0]
2000713e:	68fb      	ldr	r3, [r7, #12]
20007140:	681b      	ldr	r3, [r3, #0]
20007142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
20007144:	68fb      	ldr	r3, [r7, #12]
20007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007148:	1c9a      	adds	r2, r3, #2
2000714a:	68fb      	ldr	r3, [r7, #12]
2000714c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
2000714e:	68fb      	ldr	r3, [r7, #12]
20007150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007152:	b29b      	uxth	r3, r3
20007154:	3b01      	subs	r3, #1
20007156:	b29a      	uxth	r2, r3
20007158:	68fb      	ldr	r3, [r7, #12]
2000715a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
2000715c:	e02b      	b.n	200071b6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
2000715e:	68fb      	ldr	r3, [r7, #12]
20007160:	681b      	ldr	r3, [r3, #0]
20007162:	689b      	ldr	r3, [r3, #8]
20007164:	f003 0302 	and.w	r3, r3, #2
20007168:	2b02      	cmp	r3, #2
2000716a:	d112      	bne.n	20007192 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
2000716c:	68fb      	ldr	r3, [r7, #12]
2000716e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007170:	881a      	ldrh	r2, [r3, #0]
20007172:	68fb      	ldr	r3, [r7, #12]
20007174:	681b      	ldr	r3, [r3, #0]
20007176:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20007178:	68fb      	ldr	r3, [r7, #12]
2000717a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000717c:	1c9a      	adds	r2, r3, #2
2000717e:	68fb      	ldr	r3, [r7, #12]
20007180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20007182:	68fb      	ldr	r3, [r7, #12]
20007184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007186:	b29b      	uxth	r3, r3
20007188:	3b01      	subs	r3, #1
2000718a:	b29a      	uxth	r2, r3
2000718c:	68fb      	ldr	r3, [r7, #12]
2000718e:	86da      	strh	r2, [r3, #54]	; 0x36
20007190:	e011      	b.n	200071b6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007192:	f7fa fbb9 	bl	20001908 <HAL_GetTick>
20007196:	4602      	mov	r2, r0
20007198:	69bb      	ldr	r3, [r7, #24]
2000719a:	1ad3      	subs	r3, r2, r3
2000719c:	683a      	ldr	r2, [r7, #0]
2000719e:	429a      	cmp	r2, r3
200071a0:	d803      	bhi.n	200071aa <HAL_SPI_Transmit+0x168>
200071a2:	683b      	ldr	r3, [r7, #0]
200071a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
200071a8:	d102      	bne.n	200071b0 <HAL_SPI_Transmit+0x16e>
200071aa:	683b      	ldr	r3, [r7, #0]
200071ac:	2b00      	cmp	r3, #0
200071ae:	d102      	bne.n	200071b6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
200071b0:	2303      	movs	r3, #3
200071b2:	77fb      	strb	r3, [r7, #31]
          goto error;
200071b4:	e074      	b.n	200072a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
200071b6:	68fb      	ldr	r3, [r7, #12]
200071b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200071ba:	b29b      	uxth	r3, r3
200071bc:	2b00      	cmp	r3, #0
200071be:	d1ce      	bne.n	2000715e <HAL_SPI_Transmit+0x11c>
200071c0:	e04c      	b.n	2000725c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200071c2:	68fb      	ldr	r3, [r7, #12]
200071c4:	685b      	ldr	r3, [r3, #4]
200071c6:	2b00      	cmp	r3, #0
200071c8:	d002      	beq.n	200071d0 <HAL_SPI_Transmit+0x18e>
200071ca:	8afb      	ldrh	r3, [r7, #22]
200071cc:	2b01      	cmp	r3, #1
200071ce:	d140      	bne.n	20007252 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200071d0:	68fb      	ldr	r3, [r7, #12]
200071d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200071d4:	68fb      	ldr	r3, [r7, #12]
200071d6:	681b      	ldr	r3, [r3, #0]
200071d8:	330c      	adds	r3, #12
200071da:	7812      	ldrb	r2, [r2, #0]
200071dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
200071de:	68fb      	ldr	r3, [r7, #12]
200071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200071e2:	1c5a      	adds	r2, r3, #1
200071e4:	68fb      	ldr	r3, [r7, #12]
200071e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200071e8:	68fb      	ldr	r3, [r7, #12]
200071ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200071ec:	b29b      	uxth	r3, r3
200071ee:	3b01      	subs	r3, #1
200071f0:	b29a      	uxth	r2, r3
200071f2:	68fb      	ldr	r3, [r7, #12]
200071f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
200071f6:	e02c      	b.n	20007252 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
200071f8:	68fb      	ldr	r3, [r7, #12]
200071fa:	681b      	ldr	r3, [r3, #0]
200071fc:	689b      	ldr	r3, [r3, #8]
200071fe:	f003 0302 	and.w	r3, r3, #2
20007202:	2b02      	cmp	r3, #2
20007204:	d113      	bne.n	2000722e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20007206:	68fb      	ldr	r3, [r7, #12]
20007208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2000720a:	68fb      	ldr	r3, [r7, #12]
2000720c:	681b      	ldr	r3, [r3, #0]
2000720e:	330c      	adds	r3, #12
20007210:	7812      	ldrb	r2, [r2, #0]
20007212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
20007214:	68fb      	ldr	r3, [r7, #12]
20007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007218:	1c5a      	adds	r2, r3, #1
2000721a:	68fb      	ldr	r3, [r7, #12]
2000721c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
2000721e:	68fb      	ldr	r3, [r7, #12]
20007220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007222:	b29b      	uxth	r3, r3
20007224:	3b01      	subs	r3, #1
20007226:	b29a      	uxth	r2, r3
20007228:	68fb      	ldr	r3, [r7, #12]
2000722a:	86da      	strh	r2, [r3, #54]	; 0x36
2000722c:	e011      	b.n	20007252 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000722e:	f7fa fb6b 	bl	20001908 <HAL_GetTick>
20007232:	4602      	mov	r2, r0
20007234:	69bb      	ldr	r3, [r7, #24]
20007236:	1ad3      	subs	r3, r2, r3
20007238:	683a      	ldr	r2, [r7, #0]
2000723a:	429a      	cmp	r2, r3
2000723c:	d803      	bhi.n	20007246 <HAL_SPI_Transmit+0x204>
2000723e:	683b      	ldr	r3, [r7, #0]
20007240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20007244:	d102      	bne.n	2000724c <HAL_SPI_Transmit+0x20a>
20007246:	683b      	ldr	r3, [r7, #0]
20007248:	2b00      	cmp	r3, #0
2000724a:	d102      	bne.n	20007252 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
2000724c:	2303      	movs	r3, #3
2000724e:	77fb      	strb	r3, [r7, #31]
          goto error;
20007250:	e026      	b.n	200072a0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
20007252:	68fb      	ldr	r3, [r7, #12]
20007254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007256:	b29b      	uxth	r3, r3
20007258:	2b00      	cmp	r3, #0
2000725a:	d1cd      	bne.n	200071f8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
2000725c:	69ba      	ldr	r2, [r7, #24]
2000725e:	6839      	ldr	r1, [r7, #0]
20007260:	68f8      	ldr	r0, [r7, #12]
20007262:	f001 ff41 	bl	200090e8 <SPI_EndRxTxTransaction>
20007266:	4603      	mov	r3, r0
20007268:	2b00      	cmp	r3, #0
2000726a:	d002      	beq.n	20007272 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
2000726c:	68fb      	ldr	r3, [r7, #12]
2000726e:	2220      	movs	r2, #32
20007270:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
20007272:	68fb      	ldr	r3, [r7, #12]
20007274:	689b      	ldr	r3, [r3, #8]
20007276:	2b00      	cmp	r3, #0
20007278:	d10a      	bne.n	20007290 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000727a:	2300      	movs	r3, #0
2000727c:	613b      	str	r3, [r7, #16]
2000727e:	68fb      	ldr	r3, [r7, #12]
20007280:	681b      	ldr	r3, [r3, #0]
20007282:	68db      	ldr	r3, [r3, #12]
20007284:	613b      	str	r3, [r7, #16]
20007286:	68fb      	ldr	r3, [r7, #12]
20007288:	681b      	ldr	r3, [r3, #0]
2000728a:	689b      	ldr	r3, [r3, #8]
2000728c:	613b      	str	r3, [r7, #16]
2000728e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20007290:	68fb      	ldr	r3, [r7, #12]
20007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007294:	2b00      	cmp	r3, #0
20007296:	d002      	beq.n	2000729e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
20007298:	2301      	movs	r3, #1
2000729a:	77fb      	strb	r3, [r7, #31]
2000729c:	e000      	b.n	200072a0 <HAL_SPI_Transmit+0x25e>
  }

error:
2000729e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200072a0:	68fb      	ldr	r3, [r7, #12]
200072a2:	2201      	movs	r2, #1
200072a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200072a8:	68fb      	ldr	r3, [r7, #12]
200072aa:	2200      	movs	r2, #0
200072ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200072b0:	7ffb      	ldrb	r3, [r7, #31]
}
200072b2:	4618      	mov	r0, r3
200072b4:	3720      	adds	r7, #32
200072b6:	46bd      	mov	sp, r7
200072b8:	bd80      	pop	{r7, pc}

200072ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
200072ba:	b580      	push	{r7, lr}
200072bc:	b088      	sub	sp, #32
200072be:	af02      	add	r7, sp, #8
200072c0:	60f8      	str	r0, [r7, #12]
200072c2:	60b9      	str	r1, [r7, #8]
200072c4:	603b      	str	r3, [r7, #0]
200072c6:	4613      	mov	r3, r2
200072c8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
200072ca:	2300      	movs	r3, #0
200072cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
200072ce:	68fb      	ldr	r3, [r7, #12]
200072d0:	685b      	ldr	r3, [r3, #4]
200072d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200072d6:	d112      	bne.n	200072fe <HAL_SPI_Receive+0x44>
200072d8:	68fb      	ldr	r3, [r7, #12]
200072da:	689b      	ldr	r3, [r3, #8]
200072dc:	2b00      	cmp	r3, #0
200072de:	d10e      	bne.n	200072fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
200072e0:	68fb      	ldr	r3, [r7, #12]
200072e2:	2204      	movs	r2, #4
200072e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
200072e8:	88fa      	ldrh	r2, [r7, #6]
200072ea:	683b      	ldr	r3, [r7, #0]
200072ec:	9300      	str	r3, [sp, #0]
200072ee:	4613      	mov	r3, r2
200072f0:	68ba      	ldr	r2, [r7, #8]
200072f2:	68b9      	ldr	r1, [r7, #8]
200072f4:	68f8      	ldr	r0, [r7, #12]
200072f6:	f000 f8f1 	bl	200074dc <HAL_SPI_TransmitReceive>
200072fa:	4603      	mov	r3, r0
200072fc:	e0ea      	b.n	200074d4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
200072fe:	68fb      	ldr	r3, [r7, #12]
20007300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007304:	2b01      	cmp	r3, #1
20007306:	d101      	bne.n	2000730c <HAL_SPI_Receive+0x52>
20007308:	2302      	movs	r3, #2
2000730a:	e0e3      	b.n	200074d4 <HAL_SPI_Receive+0x21a>
2000730c:	68fb      	ldr	r3, [r7, #12]
2000730e:	2201      	movs	r2, #1
20007310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20007314:	f7fa faf8 	bl	20001908 <HAL_GetTick>
20007318:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
2000731a:	68fb      	ldr	r3, [r7, #12]
2000731c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007320:	b2db      	uxtb	r3, r3
20007322:	2b01      	cmp	r3, #1
20007324:	d002      	beq.n	2000732c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
20007326:	2302      	movs	r3, #2
20007328:	75fb      	strb	r3, [r7, #23]
    goto error;
2000732a:	e0ca      	b.n	200074c2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
2000732c:	68bb      	ldr	r3, [r7, #8]
2000732e:	2b00      	cmp	r3, #0
20007330:	d002      	beq.n	20007338 <HAL_SPI_Receive+0x7e>
20007332:	88fb      	ldrh	r3, [r7, #6]
20007334:	2b00      	cmp	r3, #0
20007336:	d102      	bne.n	2000733e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
20007338:	2301      	movs	r3, #1
2000733a:	75fb      	strb	r3, [r7, #23]
    goto error;
2000733c:	e0c1      	b.n	200074c2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
2000733e:	68fb      	ldr	r3, [r7, #12]
20007340:	2204      	movs	r2, #4
20007342:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007346:	68fb      	ldr	r3, [r7, #12]
20007348:	2200      	movs	r2, #0
2000734a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
2000734c:	68fb      	ldr	r3, [r7, #12]
2000734e:	68ba      	ldr	r2, [r7, #8]
20007350:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20007352:	68fb      	ldr	r3, [r7, #12]
20007354:	88fa      	ldrh	r2, [r7, #6]
20007356:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20007358:	68fb      	ldr	r3, [r7, #12]
2000735a:	88fa      	ldrh	r2, [r7, #6]
2000735c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
2000735e:	68fb      	ldr	r3, [r7, #12]
20007360:	2200      	movs	r2, #0
20007362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
20007364:	68fb      	ldr	r3, [r7, #12]
20007366:	2200      	movs	r2, #0
20007368:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
2000736a:	68fb      	ldr	r3, [r7, #12]
2000736c:	2200      	movs	r2, #0
2000736e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
20007370:	68fb      	ldr	r3, [r7, #12]
20007372:	2200      	movs	r2, #0
20007374:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20007376:	68fb      	ldr	r3, [r7, #12]
20007378:	2200      	movs	r2, #0
2000737a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
2000737c:	68fb      	ldr	r3, [r7, #12]
2000737e:	689b      	ldr	r3, [r3, #8]
20007380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007384:	d10f      	bne.n	200073a6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007386:	68fb      	ldr	r3, [r7, #12]
20007388:	681b      	ldr	r3, [r3, #0]
2000738a:	681a      	ldr	r2, [r3, #0]
2000738c:	68fb      	ldr	r3, [r7, #12]
2000738e:	681b      	ldr	r3, [r3, #0]
20007390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20007394:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
20007396:	68fb      	ldr	r3, [r7, #12]
20007398:	681b      	ldr	r3, [r3, #0]
2000739a:	681a      	ldr	r2, [r3, #0]
2000739c:	68fb      	ldr	r3, [r7, #12]
2000739e:	681b      	ldr	r3, [r3, #0]
200073a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
200073a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200073a6:	68fb      	ldr	r3, [r7, #12]
200073a8:	681b      	ldr	r3, [r3, #0]
200073aa:	681b      	ldr	r3, [r3, #0]
200073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
200073b0:	2b40      	cmp	r3, #64	; 0x40
200073b2:	d007      	beq.n	200073c4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200073b4:	68fb      	ldr	r3, [r7, #12]
200073b6:	681b      	ldr	r3, [r3, #0]
200073b8:	681a      	ldr	r2, [r3, #0]
200073ba:	68fb      	ldr	r3, [r7, #12]
200073bc:	681b      	ldr	r3, [r3, #0]
200073be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200073c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
200073c4:	68fb      	ldr	r3, [r7, #12]
200073c6:	68db      	ldr	r3, [r3, #12]
200073c8:	2b00      	cmp	r3, #0
200073ca:	d162      	bne.n	20007492 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
200073cc:	e02e      	b.n	2000742c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
200073ce:	68fb      	ldr	r3, [r7, #12]
200073d0:	681b      	ldr	r3, [r3, #0]
200073d2:	689b      	ldr	r3, [r3, #8]
200073d4:	f003 0301 	and.w	r3, r3, #1
200073d8:	2b01      	cmp	r3, #1
200073da:	d115      	bne.n	20007408 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
200073dc:	68fb      	ldr	r3, [r7, #12]
200073de:	681b      	ldr	r3, [r3, #0]
200073e0:	f103 020c 	add.w	r2, r3, #12
200073e4:	68fb      	ldr	r3, [r7, #12]
200073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200073e8:	7812      	ldrb	r2, [r2, #0]
200073ea:	b2d2      	uxtb	r2, r2
200073ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
200073ee:	68fb      	ldr	r3, [r7, #12]
200073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200073f2:	1c5a      	adds	r2, r3, #1
200073f4:	68fb      	ldr	r3, [r7, #12]
200073f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
200073f8:	68fb      	ldr	r3, [r7, #12]
200073fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200073fc:	b29b      	uxth	r3, r3
200073fe:	3b01      	subs	r3, #1
20007400:	b29a      	uxth	r2, r3
20007402:	68fb      	ldr	r3, [r7, #12]
20007404:	87da      	strh	r2, [r3, #62]	; 0x3e
20007406:	e011      	b.n	2000742c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20007408:	f7fa fa7e 	bl	20001908 <HAL_GetTick>
2000740c:	4602      	mov	r2, r0
2000740e:	693b      	ldr	r3, [r7, #16]
20007410:	1ad3      	subs	r3, r2, r3
20007412:	683a      	ldr	r2, [r7, #0]
20007414:	429a      	cmp	r2, r3
20007416:	d803      	bhi.n	20007420 <HAL_SPI_Receive+0x166>
20007418:	683b      	ldr	r3, [r7, #0]
2000741a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
2000741e:	d102      	bne.n	20007426 <HAL_SPI_Receive+0x16c>
20007420:	683b      	ldr	r3, [r7, #0]
20007422:	2b00      	cmp	r3, #0
20007424:	d102      	bne.n	2000742c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
20007426:	2303      	movs	r3, #3
20007428:	75fb      	strb	r3, [r7, #23]
          goto error;
2000742a:	e04a      	b.n	200074c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
2000742c:	68fb      	ldr	r3, [r7, #12]
2000742e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007430:	b29b      	uxth	r3, r3
20007432:	2b00      	cmp	r3, #0
20007434:	d1cb      	bne.n	200073ce <HAL_SPI_Receive+0x114>
20007436:	e031      	b.n	2000749c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20007438:	68fb      	ldr	r3, [r7, #12]
2000743a:	681b      	ldr	r3, [r3, #0]
2000743c:	689b      	ldr	r3, [r3, #8]
2000743e:	f003 0301 	and.w	r3, r3, #1
20007442:	2b01      	cmp	r3, #1
20007444:	d113      	bne.n	2000746e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20007446:	68fb      	ldr	r3, [r7, #12]
20007448:	681b      	ldr	r3, [r3, #0]
2000744a:	68da      	ldr	r2, [r3, #12]
2000744c:	68fb      	ldr	r3, [r7, #12]
2000744e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007450:	b292      	uxth	r2, r2
20007452:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20007454:	68fb      	ldr	r3, [r7, #12]
20007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007458:	1c9a      	adds	r2, r3, #2
2000745a:	68fb      	ldr	r3, [r7, #12]
2000745c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
2000745e:	68fb      	ldr	r3, [r7, #12]
20007460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007462:	b29b      	uxth	r3, r3
20007464:	3b01      	subs	r3, #1
20007466:	b29a      	uxth	r2, r3
20007468:	68fb      	ldr	r3, [r7, #12]
2000746a:	87da      	strh	r2, [r3, #62]	; 0x3e
2000746c:	e011      	b.n	20007492 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000746e:	f7fa fa4b 	bl	20001908 <HAL_GetTick>
20007472:	4602      	mov	r2, r0
20007474:	693b      	ldr	r3, [r7, #16]
20007476:	1ad3      	subs	r3, r2, r3
20007478:	683a      	ldr	r2, [r7, #0]
2000747a:	429a      	cmp	r2, r3
2000747c:	d803      	bhi.n	20007486 <HAL_SPI_Receive+0x1cc>
2000747e:	683b      	ldr	r3, [r7, #0]
20007480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20007484:	d102      	bne.n	2000748c <HAL_SPI_Receive+0x1d2>
20007486:	683b      	ldr	r3, [r7, #0]
20007488:	2b00      	cmp	r3, #0
2000748a:	d102      	bne.n	20007492 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
2000748c:	2303      	movs	r3, #3
2000748e:	75fb      	strb	r3, [r7, #23]
          goto error;
20007490:	e017      	b.n	200074c2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
20007492:	68fb      	ldr	r3, [r7, #12]
20007494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007496:	b29b      	uxth	r3, r3
20007498:	2b00      	cmp	r3, #0
2000749a:	d1cd      	bne.n	20007438 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
2000749c:	693a      	ldr	r2, [r7, #16]
2000749e:	6839      	ldr	r1, [r7, #0]
200074a0:	68f8      	ldr	r0, [r7, #12]
200074a2:	f001 fdbb 	bl	2000901c <SPI_EndRxTransaction>
200074a6:	4603      	mov	r3, r0
200074a8:	2b00      	cmp	r3, #0
200074aa:	d002      	beq.n	200074b2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
200074ac:	68fb      	ldr	r3, [r7, #12]
200074ae:	2220      	movs	r2, #32
200074b0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200074b2:	68fb      	ldr	r3, [r7, #12]
200074b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200074b6:	2b00      	cmp	r3, #0
200074b8:	d002      	beq.n	200074c0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
200074ba:	2301      	movs	r3, #1
200074bc:	75fb      	strb	r3, [r7, #23]
200074be:	e000      	b.n	200074c2 <HAL_SPI_Receive+0x208>
  }

error :
200074c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
200074c2:	68fb      	ldr	r3, [r7, #12]
200074c4:	2201      	movs	r2, #1
200074c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
200074ca:	68fb      	ldr	r3, [r7, #12]
200074cc:	2200      	movs	r2, #0
200074ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
200074d2:	7dfb      	ldrb	r3, [r7, #23]
}
200074d4:	4618      	mov	r0, r3
200074d6:	3718      	adds	r7, #24
200074d8:	46bd      	mov	sp, r7
200074da:	bd80      	pop	{r7, pc}

200074dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
200074dc:	b580      	push	{r7, lr}
200074de:	b08c      	sub	sp, #48	; 0x30
200074e0:	af00      	add	r7, sp, #0
200074e2:	60f8      	str	r0, [r7, #12]
200074e4:	60b9      	str	r1, [r7, #8]
200074e6:	607a      	str	r2, [r7, #4]
200074e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
200074ea:	2301      	movs	r3, #1
200074ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
200074ee:	2300      	movs	r3, #0
200074f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
200074f4:	68fb      	ldr	r3, [r7, #12]
200074f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200074fa:	2b01      	cmp	r3, #1
200074fc:	d101      	bne.n	20007502 <HAL_SPI_TransmitReceive+0x26>
200074fe:	2302      	movs	r3, #2
20007500:	e18a      	b.n	20007818 <HAL_SPI_TransmitReceive+0x33c>
20007502:	68fb      	ldr	r3, [r7, #12]
20007504:	2201      	movs	r2, #1
20007506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000750a:	f7fa f9fd 	bl	20001908 <HAL_GetTick>
2000750e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
20007510:	68fb      	ldr	r3, [r7, #12]
20007512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
2000751a:	68fb      	ldr	r3, [r7, #12]
2000751c:	685b      	ldr	r3, [r3, #4]
2000751e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
20007520:	887b      	ldrh	r3, [r7, #2]
20007522:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20007524:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20007528:	2b01      	cmp	r3, #1
2000752a:	d00f      	beq.n	2000754c <HAL_SPI_TransmitReceive+0x70>
2000752c:	69fb      	ldr	r3, [r7, #28]
2000752e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20007532:	d107      	bne.n	20007544 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20007534:	68fb      	ldr	r3, [r7, #12]
20007536:	689b      	ldr	r3, [r3, #8]
20007538:	2b00      	cmp	r3, #0
2000753a:	d103      	bne.n	20007544 <HAL_SPI_TransmitReceive+0x68>
2000753c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
20007540:	2b04      	cmp	r3, #4
20007542:	d003      	beq.n	2000754c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
20007544:	2302      	movs	r3, #2
20007546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
2000754a:	e15b      	b.n	20007804 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
2000754c:	68bb      	ldr	r3, [r7, #8]
2000754e:	2b00      	cmp	r3, #0
20007550:	d005      	beq.n	2000755e <HAL_SPI_TransmitReceive+0x82>
20007552:	687b      	ldr	r3, [r7, #4]
20007554:	2b00      	cmp	r3, #0
20007556:	d002      	beq.n	2000755e <HAL_SPI_TransmitReceive+0x82>
20007558:	887b      	ldrh	r3, [r7, #2]
2000755a:	2b00      	cmp	r3, #0
2000755c:	d103      	bne.n	20007566 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
2000755e:	2301      	movs	r3, #1
20007560:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
20007564:	e14e      	b.n	20007804 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20007566:	68fb      	ldr	r3, [r7, #12]
20007568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000756c:	b2db      	uxtb	r3, r3
2000756e:	2b04      	cmp	r3, #4
20007570:	d003      	beq.n	2000757a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20007572:	68fb      	ldr	r3, [r7, #12]
20007574:	2205      	movs	r2, #5
20007576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2000757a:	68fb      	ldr	r3, [r7, #12]
2000757c:	2200      	movs	r2, #0
2000757e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20007580:	68fb      	ldr	r3, [r7, #12]
20007582:	687a      	ldr	r2, [r7, #4]
20007584:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
20007586:	68fb      	ldr	r3, [r7, #12]
20007588:	887a      	ldrh	r2, [r7, #2]
2000758a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
2000758c:	68fb      	ldr	r3, [r7, #12]
2000758e:	887a      	ldrh	r2, [r7, #2]
20007590:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20007592:	68fb      	ldr	r3, [r7, #12]
20007594:	68ba      	ldr	r2, [r7, #8]
20007596:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
20007598:	68fb      	ldr	r3, [r7, #12]
2000759a:	887a      	ldrh	r2, [r7, #2]
2000759c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
2000759e:	68fb      	ldr	r3, [r7, #12]
200075a0:	887a      	ldrh	r2, [r7, #2]
200075a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
200075a4:	68fb      	ldr	r3, [r7, #12]
200075a6:	2200      	movs	r2, #0
200075a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
200075aa:	68fb      	ldr	r3, [r7, #12]
200075ac:	2200      	movs	r2, #0
200075ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200075b0:	68fb      	ldr	r3, [r7, #12]
200075b2:	681b      	ldr	r3, [r3, #0]
200075b4:	681b      	ldr	r3, [r3, #0]
200075b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
200075ba:	2b40      	cmp	r3, #64	; 0x40
200075bc:	d007      	beq.n	200075ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
200075be:	68fb      	ldr	r3, [r7, #12]
200075c0:	681b      	ldr	r3, [r3, #0]
200075c2:	681a      	ldr	r2, [r3, #0]
200075c4:	68fb      	ldr	r3, [r7, #12]
200075c6:	681b      	ldr	r3, [r3, #0]
200075c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200075cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
200075ce:	68fb      	ldr	r3, [r7, #12]
200075d0:	68db      	ldr	r3, [r3, #12]
200075d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
200075d6:	d178      	bne.n	200076ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200075d8:	68fb      	ldr	r3, [r7, #12]
200075da:	685b      	ldr	r3, [r3, #4]
200075dc:	2b00      	cmp	r3, #0
200075de:	d002      	beq.n	200075e6 <HAL_SPI_TransmitReceive+0x10a>
200075e0:	8b7b      	ldrh	r3, [r7, #26]
200075e2:	2b01      	cmp	r3, #1
200075e4:	d166      	bne.n	200076b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200075e6:	68fb      	ldr	r3, [r7, #12]
200075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200075ea:	881a      	ldrh	r2, [r3, #0]
200075ec:	68fb      	ldr	r3, [r7, #12]
200075ee:	681b      	ldr	r3, [r3, #0]
200075f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
200075f2:	68fb      	ldr	r3, [r7, #12]
200075f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200075f6:	1c9a      	adds	r2, r3, #2
200075f8:	68fb      	ldr	r3, [r7, #12]
200075fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200075fc:	68fb      	ldr	r3, [r7, #12]
200075fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007600:	b29b      	uxth	r3, r3
20007602:	3b01      	subs	r3, #1
20007604:	b29a      	uxth	r2, r3
20007606:	68fb      	ldr	r3, [r7, #12]
20007608:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
2000760a:	e053      	b.n	200076b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
2000760c:	68fb      	ldr	r3, [r7, #12]
2000760e:	681b      	ldr	r3, [r3, #0]
20007610:	689b      	ldr	r3, [r3, #8]
20007612:	f003 0302 	and.w	r3, r3, #2
20007616:	2b02      	cmp	r3, #2
20007618:	d11b      	bne.n	20007652 <HAL_SPI_TransmitReceive+0x176>
2000761a:	68fb      	ldr	r3, [r7, #12]
2000761c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000761e:	b29b      	uxth	r3, r3
20007620:	2b00      	cmp	r3, #0
20007622:	d016      	beq.n	20007652 <HAL_SPI_TransmitReceive+0x176>
20007624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
20007626:	2b01      	cmp	r3, #1
20007628:	d113      	bne.n	20007652 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
2000762a:	68fb      	ldr	r3, [r7, #12]
2000762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000762e:	881a      	ldrh	r2, [r3, #0]
20007630:	68fb      	ldr	r3, [r7, #12]
20007632:	681b      	ldr	r3, [r3, #0]
20007634:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20007636:	68fb      	ldr	r3, [r7, #12]
20007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000763a:	1c9a      	adds	r2, r3, #2
2000763c:	68fb      	ldr	r3, [r7, #12]
2000763e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20007640:	68fb      	ldr	r3, [r7, #12]
20007642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007644:	b29b      	uxth	r3, r3
20007646:	3b01      	subs	r3, #1
20007648:	b29a      	uxth	r2, r3
2000764a:	68fb      	ldr	r3, [r7, #12]
2000764c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
2000764e:	2300      	movs	r3, #0
20007650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20007652:	68fb      	ldr	r3, [r7, #12]
20007654:	681b      	ldr	r3, [r3, #0]
20007656:	689b      	ldr	r3, [r3, #8]
20007658:	f003 0301 	and.w	r3, r3, #1
2000765c:	2b01      	cmp	r3, #1
2000765e:	d119      	bne.n	20007694 <HAL_SPI_TransmitReceive+0x1b8>
20007660:	68fb      	ldr	r3, [r7, #12]
20007662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007664:	b29b      	uxth	r3, r3
20007666:	2b00      	cmp	r3, #0
20007668:	d014      	beq.n	20007694 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
2000766a:	68fb      	ldr	r3, [r7, #12]
2000766c:	681b      	ldr	r3, [r3, #0]
2000766e:	68da      	ldr	r2, [r3, #12]
20007670:	68fb      	ldr	r3, [r7, #12]
20007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007674:	b292      	uxth	r2, r2
20007676:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20007678:	68fb      	ldr	r3, [r7, #12]
2000767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000767c:	1c9a      	adds	r2, r3, #2
2000767e:	68fb      	ldr	r3, [r7, #12]
20007680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20007682:	68fb      	ldr	r3, [r7, #12]
20007684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007686:	b29b      	uxth	r3, r3
20007688:	3b01      	subs	r3, #1
2000768a:	b29a      	uxth	r2, r3
2000768c:	68fb      	ldr	r3, [r7, #12]
2000768e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20007690:	2301      	movs	r3, #1
20007692:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
20007694:	f7fa f938 	bl	20001908 <HAL_GetTick>
20007698:	4602      	mov	r2, r0
2000769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2000769c:	1ad3      	subs	r3, r2, r3
2000769e:	6bba      	ldr	r2, [r7, #56]	; 0x38
200076a0:	429a      	cmp	r2, r3
200076a2:	d807      	bhi.n	200076b4 <HAL_SPI_TransmitReceive+0x1d8>
200076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200076a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
200076aa:	d003      	beq.n	200076b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
200076ac:	2303      	movs	r3, #3
200076ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
200076b2:	e0a7      	b.n	20007804 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200076b4:	68fb      	ldr	r3, [r7, #12]
200076b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200076b8:	b29b      	uxth	r3, r3
200076ba:	2b00      	cmp	r3, #0
200076bc:	d1a6      	bne.n	2000760c <HAL_SPI_TransmitReceive+0x130>
200076be:	68fb      	ldr	r3, [r7, #12]
200076c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200076c2:	b29b      	uxth	r3, r3
200076c4:	2b00      	cmp	r3, #0
200076c6:	d1a1      	bne.n	2000760c <HAL_SPI_TransmitReceive+0x130>
200076c8:	e07c      	b.n	200077c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200076ca:	68fb      	ldr	r3, [r7, #12]
200076cc:	685b      	ldr	r3, [r3, #4]
200076ce:	2b00      	cmp	r3, #0
200076d0:	d002      	beq.n	200076d8 <HAL_SPI_TransmitReceive+0x1fc>
200076d2:	8b7b      	ldrh	r3, [r7, #26]
200076d4:	2b01      	cmp	r3, #1
200076d6:	d16b      	bne.n	200077b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
200076d8:	68fb      	ldr	r3, [r7, #12]
200076da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
200076dc:	68fb      	ldr	r3, [r7, #12]
200076de:	681b      	ldr	r3, [r3, #0]
200076e0:	330c      	adds	r3, #12
200076e2:	7812      	ldrb	r2, [r2, #0]
200076e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
200076e6:	68fb      	ldr	r3, [r7, #12]
200076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
200076ea:	1c5a      	adds	r2, r3, #1
200076ec:	68fb      	ldr	r3, [r7, #12]
200076ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
200076f0:	68fb      	ldr	r3, [r7, #12]
200076f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200076f4:	b29b      	uxth	r3, r3
200076f6:	3b01      	subs	r3, #1
200076f8:	b29a      	uxth	r2, r3
200076fa:	68fb      	ldr	r3, [r7, #12]
200076fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200076fe:	e057      	b.n	200077b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
20007700:	68fb      	ldr	r3, [r7, #12]
20007702:	681b      	ldr	r3, [r3, #0]
20007704:	689b      	ldr	r3, [r3, #8]
20007706:	f003 0302 	and.w	r3, r3, #2
2000770a:	2b02      	cmp	r3, #2
2000770c:	d11c      	bne.n	20007748 <HAL_SPI_TransmitReceive+0x26c>
2000770e:	68fb      	ldr	r3, [r7, #12]
20007710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007712:	b29b      	uxth	r3, r3
20007714:	2b00      	cmp	r3, #0
20007716:	d017      	beq.n	20007748 <HAL_SPI_TransmitReceive+0x26c>
20007718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000771a:	2b01      	cmp	r3, #1
2000771c:	d114      	bne.n	20007748 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
2000771e:	68fb      	ldr	r3, [r7, #12]
20007720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20007722:	68fb      	ldr	r3, [r7, #12]
20007724:	681b      	ldr	r3, [r3, #0]
20007726:	330c      	adds	r3, #12
20007728:	7812      	ldrb	r2, [r2, #0]
2000772a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
2000772c:	68fb      	ldr	r3, [r7, #12]
2000772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007730:	1c5a      	adds	r2, r3, #1
20007732:	68fb      	ldr	r3, [r7, #12]
20007734:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
20007736:	68fb      	ldr	r3, [r7, #12]
20007738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000773a:	b29b      	uxth	r3, r3
2000773c:	3b01      	subs	r3, #1
2000773e:	b29a      	uxth	r2, r3
20007740:	68fb      	ldr	r3, [r7, #12]
20007742:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20007744:	2300      	movs	r3, #0
20007746:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20007748:	68fb      	ldr	r3, [r7, #12]
2000774a:	681b      	ldr	r3, [r3, #0]
2000774c:	689b      	ldr	r3, [r3, #8]
2000774e:	f003 0301 	and.w	r3, r3, #1
20007752:	2b01      	cmp	r3, #1
20007754:	d119      	bne.n	2000778a <HAL_SPI_TransmitReceive+0x2ae>
20007756:	68fb      	ldr	r3, [r7, #12]
20007758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000775a:	b29b      	uxth	r3, r3
2000775c:	2b00      	cmp	r3, #0
2000775e:	d014      	beq.n	2000778a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
20007760:	68fb      	ldr	r3, [r7, #12]
20007762:	681b      	ldr	r3, [r3, #0]
20007764:	68da      	ldr	r2, [r3, #12]
20007766:	68fb      	ldr	r3, [r7, #12]
20007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000776a:	b2d2      	uxtb	r2, r2
2000776c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
2000776e:	68fb      	ldr	r3, [r7, #12]
20007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007772:	1c5a      	adds	r2, r3, #1
20007774:	68fb      	ldr	r3, [r7, #12]
20007776:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
20007778:	68fb      	ldr	r3, [r7, #12]
2000777a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000777c:	b29b      	uxth	r3, r3
2000777e:	3b01      	subs	r3, #1
20007780:	b29a      	uxth	r2, r3
20007782:	68fb      	ldr	r3, [r7, #12]
20007784:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20007786:	2301      	movs	r3, #1
20007788:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
2000778a:	f7fa f8bd 	bl	20001908 <HAL_GetTick>
2000778e:	4602      	mov	r2, r0
20007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20007792:	1ad3      	subs	r3, r2, r3
20007794:	6bba      	ldr	r2, [r7, #56]	; 0x38
20007796:	429a      	cmp	r2, r3
20007798:	d803      	bhi.n	200077a2 <HAL_SPI_TransmitReceive+0x2c6>
2000779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
2000779c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
200077a0:	d102      	bne.n	200077a8 <HAL_SPI_TransmitReceive+0x2cc>
200077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
200077a4:	2b00      	cmp	r3, #0
200077a6:	d103      	bne.n	200077b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
200077a8:	2303      	movs	r3, #3
200077aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
200077ae:	e029      	b.n	20007804 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200077b0:	68fb      	ldr	r3, [r7, #12]
200077b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
200077b4:	b29b      	uxth	r3, r3
200077b6:	2b00      	cmp	r3, #0
200077b8:	d1a2      	bne.n	20007700 <HAL_SPI_TransmitReceive+0x224>
200077ba:	68fb      	ldr	r3, [r7, #12]
200077bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200077be:	b29b      	uxth	r3, r3
200077c0:	2b00      	cmp	r3, #0
200077c2:	d19d      	bne.n	20007700 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
200077c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
200077c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
200077c8:	68f8      	ldr	r0, [r7, #12]
200077ca:	f001 fc8d 	bl	200090e8 <SPI_EndRxTxTransaction>
200077ce:	4603      	mov	r3, r0
200077d0:	2b00      	cmp	r3, #0
200077d2:	d006      	beq.n	200077e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
200077d4:	2301      	movs	r3, #1
200077d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
200077da:	68fb      	ldr	r3, [r7, #12]
200077dc:	2220      	movs	r2, #32
200077de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
200077e0:	e010      	b.n	20007804 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200077e2:	68fb      	ldr	r3, [r7, #12]
200077e4:	689b      	ldr	r3, [r3, #8]
200077e6:	2b00      	cmp	r3, #0
200077e8:	d10b      	bne.n	20007802 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200077ea:	2300      	movs	r3, #0
200077ec:	617b      	str	r3, [r7, #20]
200077ee:	68fb      	ldr	r3, [r7, #12]
200077f0:	681b      	ldr	r3, [r3, #0]
200077f2:	68db      	ldr	r3, [r3, #12]
200077f4:	617b      	str	r3, [r7, #20]
200077f6:	68fb      	ldr	r3, [r7, #12]
200077f8:	681b      	ldr	r3, [r3, #0]
200077fa:	689b      	ldr	r3, [r3, #8]
200077fc:	617b      	str	r3, [r7, #20]
200077fe:	697b      	ldr	r3, [r7, #20]
20007800:	e000      	b.n	20007804 <HAL_SPI_TransmitReceive+0x328>
  }

error :
20007802:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20007804:	68fb      	ldr	r3, [r7, #12]
20007806:	2201      	movs	r2, #1
20007808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
2000780c:	68fb      	ldr	r3, [r7, #12]
2000780e:	2200      	movs	r2, #0
20007810:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007814:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
20007818:	4618      	mov	r0, r3
2000781a:	3730      	adds	r7, #48	; 0x30
2000781c:	46bd      	mov	sp, r7
2000781e:	bd80      	pop	{r7, pc}

20007820 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20007820:	b480      	push	{r7}
20007822:	b087      	sub	sp, #28
20007824:	af00      	add	r7, sp, #0
20007826:	60f8      	str	r0, [r7, #12]
20007828:	60b9      	str	r1, [r7, #8]
2000782a:	4613      	mov	r3, r2
2000782c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
2000782e:	2300      	movs	r3, #0
20007830:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20007832:	68fb      	ldr	r3, [r7, #12]
20007834:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007838:	2b01      	cmp	r3, #1
2000783a:	d101      	bne.n	20007840 <HAL_SPI_Transmit_IT+0x20>
2000783c:	2302      	movs	r3, #2
2000783e:	e06f      	b.n	20007920 <HAL_SPI_Transmit_IT+0x100>
20007840:	68fb      	ldr	r3, [r7, #12]
20007842:	2201      	movs	r2, #1
20007844:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
20007848:	68bb      	ldr	r3, [r7, #8]
2000784a:	2b00      	cmp	r3, #0
2000784c:	d002      	beq.n	20007854 <HAL_SPI_Transmit_IT+0x34>
2000784e:	88fb      	ldrh	r3, [r7, #6]
20007850:	2b00      	cmp	r3, #0
20007852:	d102      	bne.n	2000785a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
20007854:	2301      	movs	r3, #1
20007856:	75fb      	strb	r3, [r7, #23]
    goto error;
20007858:	e05d      	b.n	20007916 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
2000785a:	68fb      	ldr	r3, [r7, #12]
2000785c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007860:	b2db      	uxtb	r3, r3
20007862:	2b01      	cmp	r3, #1
20007864:	d002      	beq.n	2000786c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
20007866:	2302      	movs	r3, #2
20007868:	75fb      	strb	r3, [r7, #23]
    goto error;
2000786a:	e054      	b.n	20007916 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
2000786c:	68fb      	ldr	r3, [r7, #12]
2000786e:	2203      	movs	r2, #3
20007870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007874:	68fb      	ldr	r3, [r7, #12]
20007876:	2200      	movs	r2, #0
20007878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
2000787a:	68fb      	ldr	r3, [r7, #12]
2000787c:	68ba      	ldr	r2, [r7, #8]
2000787e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20007880:	68fb      	ldr	r3, [r7, #12]
20007882:	88fa      	ldrh	r2, [r7, #6]
20007884:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20007886:	68fb      	ldr	r3, [r7, #12]
20007888:	88fa      	ldrh	r2, [r7, #6]
2000788a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
2000788c:	68fb      	ldr	r3, [r7, #12]
2000788e:	2200      	movs	r2, #0
20007890:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
20007892:	68fb      	ldr	r3, [r7, #12]
20007894:	2200      	movs	r2, #0
20007896:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20007898:	68fb      	ldr	r3, [r7, #12]
2000789a:	2200      	movs	r2, #0
2000789c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
2000789e:	68fb      	ldr	r3, [r7, #12]
200078a0:	2200      	movs	r2, #0
200078a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
200078a4:	68fb      	ldr	r3, [r7, #12]
200078a6:	68db      	ldr	r3, [r3, #12]
200078a8:	2b00      	cmp	r3, #0
200078aa:	d003      	beq.n	200078b4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
200078ac:	68fb      	ldr	r3, [r7, #12]
200078ae:	4a1f      	ldr	r2, [pc, #124]	; (2000792c <HAL_SPI_Transmit_IT+0x10c>)
200078b0:	645a      	str	r2, [r3, #68]	; 0x44
200078b2:	e002      	b.n	200078ba <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
200078b4:	68fb      	ldr	r3, [r7, #12]
200078b6:	4a1e      	ldr	r2, [pc, #120]	; (20007930 <HAL_SPI_Transmit_IT+0x110>)
200078b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200078ba:	68fb      	ldr	r3, [r7, #12]
200078bc:	689b      	ldr	r3, [r3, #8]
200078be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200078c2:	d10f      	bne.n	200078e4 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200078c4:	68fb      	ldr	r3, [r7, #12]
200078c6:	681b      	ldr	r3, [r3, #0]
200078c8:	681a      	ldr	r2, [r3, #0]
200078ca:	68fb      	ldr	r3, [r7, #12]
200078cc:	681b      	ldr	r3, [r3, #0]
200078ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200078d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
200078d4:	68fb      	ldr	r3, [r7, #12]
200078d6:	681b      	ldr	r3, [r3, #0]
200078d8:	681a      	ldr	r2, [r3, #0]
200078da:	68fb      	ldr	r3, [r7, #12]
200078dc:	681b      	ldr	r3, [r3, #0]
200078de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
200078e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
200078e4:	68fb      	ldr	r3, [r7, #12]
200078e6:	681b      	ldr	r3, [r3, #0]
200078e8:	685a      	ldr	r2, [r3, #4]
200078ea:	68fb      	ldr	r3, [r7, #12]
200078ec:	681b      	ldr	r3, [r3, #0]
200078ee:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
200078f2:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
200078f4:	68fb      	ldr	r3, [r7, #12]
200078f6:	681b      	ldr	r3, [r3, #0]
200078f8:	681b      	ldr	r3, [r3, #0]
200078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
200078fe:	2b40      	cmp	r3, #64	; 0x40
20007900:	d008      	beq.n	20007914 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007902:	68fb      	ldr	r3, [r7, #12]
20007904:	681b      	ldr	r3, [r3, #0]
20007906:	681a      	ldr	r2, [r3, #0]
20007908:	68fb      	ldr	r3, [r7, #12]
2000790a:	681b      	ldr	r3, [r3, #0]
2000790c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007910:	601a      	str	r2, [r3, #0]
20007912:	e000      	b.n	20007916 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
20007914:	bf00      	nop
  __HAL_UNLOCK(hspi);
20007916:	68fb      	ldr	r3, [r7, #12]
20007918:	2200      	movs	r2, #0
2000791a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2000791e:	7dfb      	ldrb	r3, [r7, #23]
}
20007920:	4618      	mov	r0, r3
20007922:	371c      	adds	r7, #28
20007924:	46bd      	mov	sp, r7
20007926:	f85d 7b04 	ldr.w	r7, [sp], #4
2000792a:	4770      	bx	lr
2000792c:	20008ec9 	.word	0x20008ec9
20007930:	20008e83 	.word	0x20008e83

20007934 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20007934:	b580      	push	{r7, lr}
20007936:	b086      	sub	sp, #24
20007938:	af00      	add	r7, sp, #0
2000793a:	60f8      	str	r0, [r7, #12]
2000793c:	60b9      	str	r1, [r7, #8]
2000793e:	4613      	mov	r3, r2
20007940:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20007942:	2300      	movs	r3, #0
20007944:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20007946:	68fb      	ldr	r3, [r7, #12]
20007948:	689b      	ldr	r3, [r3, #8]
2000794a:	2b00      	cmp	r3, #0
2000794c:	d110      	bne.n	20007970 <HAL_SPI_Receive_IT+0x3c>
2000794e:	68fb      	ldr	r3, [r7, #12]
20007950:	685b      	ldr	r3, [r3, #4]
20007952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20007956:	d10b      	bne.n	20007970 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20007958:	68fb      	ldr	r3, [r7, #12]
2000795a:	2204      	movs	r2, #4
2000795c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
20007960:	88fb      	ldrh	r3, [r7, #6]
20007962:	68ba      	ldr	r2, [r7, #8]
20007964:	68b9      	ldr	r1, [r7, #8]
20007966:	68f8      	ldr	r0, [r7, #12]
20007968:	f000 f882 	bl	20007a70 <HAL_SPI_TransmitReceive_IT>
2000796c:	4603      	mov	r3, r0
2000796e:	e076      	b.n	20007a5e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20007970:	68fb      	ldr	r3, [r7, #12]
20007972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007976:	2b01      	cmp	r3, #1
20007978:	d101      	bne.n	2000797e <HAL_SPI_Receive_IT+0x4a>
2000797a:	2302      	movs	r3, #2
2000797c:	e06f      	b.n	20007a5e <HAL_SPI_Receive_IT+0x12a>
2000797e:	68fb      	ldr	r3, [r7, #12]
20007980:	2201      	movs	r2, #1
20007982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
20007986:	68fb      	ldr	r3, [r7, #12]
20007988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000798c:	b2db      	uxtb	r3, r3
2000798e:	2b01      	cmp	r3, #1
20007990:	d002      	beq.n	20007998 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
20007992:	2302      	movs	r3, #2
20007994:	75fb      	strb	r3, [r7, #23]
    goto error;
20007996:	e05d      	b.n	20007a54 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
20007998:	68bb      	ldr	r3, [r7, #8]
2000799a:	2b00      	cmp	r3, #0
2000799c:	d002      	beq.n	200079a4 <HAL_SPI_Receive_IT+0x70>
2000799e:	88fb      	ldrh	r3, [r7, #6]
200079a0:	2b00      	cmp	r3, #0
200079a2:	d102      	bne.n	200079aa <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
200079a4:	2301      	movs	r3, #1
200079a6:	75fb      	strb	r3, [r7, #23]
    goto error;
200079a8:	e054      	b.n	20007a54 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
200079aa:	68fb      	ldr	r3, [r7, #12]
200079ac:	2204      	movs	r2, #4
200079ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200079b2:	68fb      	ldr	r3, [r7, #12]
200079b4:	2200      	movs	r2, #0
200079b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
200079b8:	68fb      	ldr	r3, [r7, #12]
200079ba:	68ba      	ldr	r2, [r7, #8]
200079bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
200079be:	68fb      	ldr	r3, [r7, #12]
200079c0:	88fa      	ldrh	r2, [r7, #6]
200079c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
200079c4:	68fb      	ldr	r3, [r7, #12]
200079c6:	88fa      	ldrh	r2, [r7, #6]
200079c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
200079ca:	68fb      	ldr	r3, [r7, #12]
200079cc:	2200      	movs	r2, #0
200079ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
200079d0:	68fb      	ldr	r3, [r7, #12]
200079d2:	2200      	movs	r2, #0
200079d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
200079d6:	68fb      	ldr	r3, [r7, #12]
200079d8:	2200      	movs	r2, #0
200079da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
200079dc:	68fb      	ldr	r3, [r7, #12]
200079de:	2200      	movs	r2, #0
200079e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
200079e2:	68fb      	ldr	r3, [r7, #12]
200079e4:	68db      	ldr	r3, [r3, #12]
200079e6:	2b00      	cmp	r3, #0
200079e8:	d003      	beq.n	200079f2 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
200079ea:	68fb      	ldr	r3, [r7, #12]
200079ec:	4a1e      	ldr	r2, [pc, #120]	; (20007a68 <HAL_SPI_Receive_IT+0x134>)
200079ee:	641a      	str	r2, [r3, #64]	; 0x40
200079f0:	e002      	b.n	200079f8 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
200079f2:	68fb      	ldr	r3, [r7, #12]
200079f4:	4a1d      	ldr	r2, [pc, #116]	; (20007a6c <HAL_SPI_Receive_IT+0x138>)
200079f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200079f8:	68fb      	ldr	r3, [r7, #12]
200079fa:	689b      	ldr	r3, [r3, #8]
200079fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007a00:	d10f      	bne.n	20007a22 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007a02:	68fb      	ldr	r3, [r7, #12]
20007a04:	681b      	ldr	r3, [r3, #0]
20007a06:	681a      	ldr	r2, [r3, #0]
20007a08:	68fb      	ldr	r3, [r7, #12]
20007a0a:	681b      	ldr	r3, [r3, #0]
20007a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20007a10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
20007a12:	68fb      	ldr	r3, [r7, #12]
20007a14:	681b      	ldr	r3, [r3, #0]
20007a16:	681a      	ldr	r2, [r3, #0]
20007a18:	68fb      	ldr	r3, [r7, #12]
20007a1a:	681b      	ldr	r3, [r3, #0]
20007a1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20007a20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20007a22:	68fb      	ldr	r3, [r7, #12]
20007a24:	681b      	ldr	r3, [r3, #0]
20007a26:	685a      	ldr	r2, [r3, #4]
20007a28:	68fb      	ldr	r3, [r7, #12]
20007a2a:	681b      	ldr	r3, [r3, #0]
20007a2c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
20007a30:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007a32:	68fb      	ldr	r3, [r7, #12]
20007a34:	681b      	ldr	r3, [r3, #0]
20007a36:	681b      	ldr	r3, [r3, #0]
20007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
20007a3c:	2b40      	cmp	r3, #64	; 0x40
20007a3e:	d008      	beq.n	20007a52 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007a40:	68fb      	ldr	r3, [r7, #12]
20007a42:	681b      	ldr	r3, [r3, #0]
20007a44:	681a      	ldr	r2, [r3, #0]
20007a46:	68fb      	ldr	r3, [r7, #12]
20007a48:	681b      	ldr	r3, [r3, #0]
20007a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007a4e:	601a      	str	r2, [r3, #0]
20007a50:	e000      	b.n	20007a54 <HAL_SPI_Receive_IT+0x120>
  }

error :
20007a52:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20007a54:	68fb      	ldr	r3, [r7, #12]
20007a56:	2200      	movs	r2, #0
20007a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007a5c:	7dfb      	ldrb	r3, [r7, #23]
}
20007a5e:	4618      	mov	r0, r3
20007a60:	3718      	adds	r7, #24
20007a62:	46bd      	mov	sp, r7
20007a64:	bd80      	pop	{r7, pc}
20007a66:	bf00      	nop
20007a68:	20008e3d 	.word	0x20008e3d
20007a6c:	20008df3 	.word	0x20008df3

20007a70 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
20007a70:	b480      	push	{r7}
20007a72:	b087      	sub	sp, #28
20007a74:	af00      	add	r7, sp, #0
20007a76:	60f8      	str	r0, [r7, #12]
20007a78:	60b9      	str	r1, [r7, #8]
20007a7a:	607a      	str	r2, [r7, #4]
20007a7c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
20007a7e:	2300      	movs	r3, #0
20007a80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
20007a82:	68fb      	ldr	r3, [r7, #12]
20007a84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007a88:	2b01      	cmp	r3, #1
20007a8a:	d101      	bne.n	20007a90 <HAL_SPI_TransmitReceive_IT+0x20>
20007a8c:	2302      	movs	r3, #2
20007a8e:	e075      	b.n	20007b7c <HAL_SPI_TransmitReceive_IT+0x10c>
20007a90:	68fb      	ldr	r3, [r7, #12]
20007a92:	2201      	movs	r2, #1
20007a94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
20007a98:	68fb      	ldr	r3, [r7, #12]
20007a9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007a9e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
20007aa0:	68fb      	ldr	r3, [r7, #12]
20007aa2:	685b      	ldr	r3, [r3, #4]
20007aa4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
20007aa6:	7dbb      	ldrb	r3, [r7, #22]
20007aa8:	2b01      	cmp	r3, #1
20007aaa:	d00d      	beq.n	20007ac8 <HAL_SPI_TransmitReceive_IT+0x58>
20007aac:	693b      	ldr	r3, [r7, #16]
20007aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20007ab2:	d106      	bne.n	20007ac2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20007ab4:	68fb      	ldr	r3, [r7, #12]
20007ab6:	689b      	ldr	r3, [r3, #8]
20007ab8:	2b00      	cmp	r3, #0
20007aba:	d102      	bne.n	20007ac2 <HAL_SPI_TransmitReceive_IT+0x52>
20007abc:	7dbb      	ldrb	r3, [r7, #22]
20007abe:	2b04      	cmp	r3, #4
20007ac0:	d002      	beq.n	20007ac8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
20007ac2:	2302      	movs	r3, #2
20007ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
20007ac6:	e054      	b.n	20007b72 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20007ac8:	68bb      	ldr	r3, [r7, #8]
20007aca:	2b00      	cmp	r3, #0
20007acc:	d005      	beq.n	20007ada <HAL_SPI_TransmitReceive_IT+0x6a>
20007ace:	687b      	ldr	r3, [r7, #4]
20007ad0:	2b00      	cmp	r3, #0
20007ad2:	d002      	beq.n	20007ada <HAL_SPI_TransmitReceive_IT+0x6a>
20007ad4:	887b      	ldrh	r3, [r7, #2]
20007ad6:	2b00      	cmp	r3, #0
20007ad8:	d102      	bne.n	20007ae0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
20007ada:	2301      	movs	r3, #1
20007adc:	75fb      	strb	r3, [r7, #23]
    goto error;
20007ade:	e048      	b.n	20007b72 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20007ae0:	68fb      	ldr	r3, [r7, #12]
20007ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007ae6:	b2db      	uxtb	r3, r3
20007ae8:	2b04      	cmp	r3, #4
20007aea:	d003      	beq.n	20007af4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20007aec:	68fb      	ldr	r3, [r7, #12]
20007aee:	2205      	movs	r2, #5
20007af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007af4:	68fb      	ldr	r3, [r7, #12]
20007af6:	2200      	movs	r2, #0
20007af8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20007afa:	68fb      	ldr	r3, [r7, #12]
20007afc:	68ba      	ldr	r2, [r7, #8]
20007afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20007b00:	68fb      	ldr	r3, [r7, #12]
20007b02:	887a      	ldrh	r2, [r7, #2]
20007b04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20007b06:	68fb      	ldr	r3, [r7, #12]
20007b08:	887a      	ldrh	r2, [r7, #2]
20007b0a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20007b0c:	68fb      	ldr	r3, [r7, #12]
20007b0e:	687a      	ldr	r2, [r7, #4]
20007b10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20007b12:	68fb      	ldr	r3, [r7, #12]
20007b14:	887a      	ldrh	r2, [r7, #2]
20007b16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20007b18:	68fb      	ldr	r3, [r7, #12]
20007b1a:	887a      	ldrh	r2, [r7, #2]
20007b1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20007b1e:	68fb      	ldr	r3, [r7, #12]
20007b20:	68db      	ldr	r3, [r3, #12]
20007b22:	2b00      	cmp	r3, #0
20007b24:	d006      	beq.n	20007b34 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
20007b26:	68fb      	ldr	r3, [r7, #12]
20007b28:	4a17      	ldr	r2, [pc, #92]	; (20007b88 <HAL_SPI_TransmitReceive_IT+0x118>)
20007b2a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
20007b2c:	68fb      	ldr	r3, [r7, #12]
20007b2e:	4a17      	ldr	r2, [pc, #92]	; (20007b8c <HAL_SPI_TransmitReceive_IT+0x11c>)
20007b30:	645a      	str	r2, [r3, #68]	; 0x44
20007b32:	e005      	b.n	20007b40 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
20007b34:	68fb      	ldr	r3, [r7, #12]
20007b36:	4a16      	ldr	r2, [pc, #88]	; (20007b90 <HAL_SPI_TransmitReceive_IT+0x120>)
20007b38:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
20007b3a:	68fb      	ldr	r3, [r7, #12]
20007b3c:	4a15      	ldr	r2, [pc, #84]	; (20007b94 <HAL_SPI_TransmitReceive_IT+0x124>)
20007b3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20007b40:	68fb      	ldr	r3, [r7, #12]
20007b42:	681b      	ldr	r3, [r3, #0]
20007b44:	685a      	ldr	r2, [r3, #4]
20007b46:	68fb      	ldr	r3, [r7, #12]
20007b48:	681b      	ldr	r3, [r3, #0]
20007b4a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
20007b4e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007b50:	68fb      	ldr	r3, [r7, #12]
20007b52:	681b      	ldr	r3, [r3, #0]
20007b54:	681b      	ldr	r3, [r3, #0]
20007b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
20007b5a:	2b40      	cmp	r3, #64	; 0x40
20007b5c:	d008      	beq.n	20007b70 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007b5e:	68fb      	ldr	r3, [r7, #12]
20007b60:	681b      	ldr	r3, [r3, #0]
20007b62:	681a      	ldr	r2, [r3, #0]
20007b64:	68fb      	ldr	r3, [r7, #12]
20007b66:	681b      	ldr	r3, [r3, #0]
20007b68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007b6c:	601a      	str	r2, [r3, #0]
20007b6e:	e000      	b.n	20007b72 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
20007b70:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20007b72:	68fb      	ldr	r3, [r7, #12]
20007b74:	2200      	movs	r2, #0
20007b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007b7a:	7dfb      	ldrb	r3, [r7, #23]
}
20007b7c:	4618      	mov	r0, r3
20007b7e:	371c      	adds	r7, #28
20007b80:	46bd      	mov	sp, r7
20007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
20007b86:	4770      	bx	lr
20007b88:	20008d35 	.word	0x20008d35
20007b8c:	20008d95 	.word	0x20008d95
20007b90:	20008c71 	.word	0x20008c71
20007b94:	20008cd5 	.word	0x20008cd5

20007b98 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20007b98:	b580      	push	{r7, lr}
20007b9a:	b086      	sub	sp, #24
20007b9c:	af00      	add	r7, sp, #0
20007b9e:	60f8      	str	r0, [r7, #12]
20007ba0:	60b9      	str	r1, [r7, #8]
20007ba2:	4613      	mov	r3, r2
20007ba4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20007ba6:	2300      	movs	r3, #0
20007ba8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
20007baa:	68fb      	ldr	r3, [r7, #12]
20007bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007bb0:	2b01      	cmp	r3, #1
20007bb2:	d101      	bne.n	20007bb8 <HAL_SPI_Transmit_DMA+0x20>
20007bb4:	2302      	movs	r3, #2
20007bb6:	e09b      	b.n	20007cf0 <HAL_SPI_Transmit_DMA+0x158>
20007bb8:	68fb      	ldr	r3, [r7, #12]
20007bba:	2201      	movs	r2, #1
20007bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
20007bc0:	68fb      	ldr	r3, [r7, #12]
20007bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007bc6:	b2db      	uxtb	r3, r3
20007bc8:	2b01      	cmp	r3, #1
20007bca:	d002      	beq.n	20007bd2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
20007bcc:	2302      	movs	r3, #2
20007bce:	75fb      	strb	r3, [r7, #23]
    goto error;
20007bd0:	e089      	b.n	20007ce6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
20007bd2:	68bb      	ldr	r3, [r7, #8]
20007bd4:	2b00      	cmp	r3, #0
20007bd6:	d002      	beq.n	20007bde <HAL_SPI_Transmit_DMA+0x46>
20007bd8:	88fb      	ldrh	r3, [r7, #6]
20007bda:	2b00      	cmp	r3, #0
20007bdc:	d102      	bne.n	20007be4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
20007bde:	2301      	movs	r3, #1
20007be0:	75fb      	strb	r3, [r7, #23]
    goto error;
20007be2:	e080      	b.n	20007ce6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
20007be4:	68fb      	ldr	r3, [r7, #12]
20007be6:	2203      	movs	r2, #3
20007be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007bec:	68fb      	ldr	r3, [r7, #12]
20007bee:	2200      	movs	r2, #0
20007bf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
20007bf2:	68fb      	ldr	r3, [r7, #12]
20007bf4:	68ba      	ldr	r2, [r7, #8]
20007bf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20007bf8:	68fb      	ldr	r3, [r7, #12]
20007bfa:	88fa      	ldrh	r2, [r7, #6]
20007bfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20007bfe:	68fb      	ldr	r3, [r7, #12]
20007c00:	88fa      	ldrh	r2, [r7, #6]
20007c02:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
20007c04:	68fb      	ldr	r3, [r7, #12]
20007c06:	2200      	movs	r2, #0
20007c08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
20007c0a:	68fb      	ldr	r3, [r7, #12]
20007c0c:	2200      	movs	r2, #0
20007c0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
20007c10:	68fb      	ldr	r3, [r7, #12]
20007c12:	2200      	movs	r2, #0
20007c14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
20007c16:	68fb      	ldr	r3, [r7, #12]
20007c18:	2200      	movs	r2, #0
20007c1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
20007c1c:	68fb      	ldr	r3, [r7, #12]
20007c1e:	2200      	movs	r2, #0
20007c20:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20007c22:	68fb      	ldr	r3, [r7, #12]
20007c24:	689b      	ldr	r3, [r3, #8]
20007c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007c2a:	d10f      	bne.n	20007c4c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007c2c:	68fb      	ldr	r3, [r7, #12]
20007c2e:	681b      	ldr	r3, [r3, #0]
20007c30:	681a      	ldr	r2, [r3, #0]
20007c32:	68fb      	ldr	r3, [r7, #12]
20007c34:	681b      	ldr	r3, [r3, #0]
20007c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20007c3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
20007c3c:	68fb      	ldr	r3, [r7, #12]
20007c3e:	681b      	ldr	r3, [r3, #0]
20007c40:	681a      	ldr	r2, [r3, #0]
20007c42:	68fb      	ldr	r3, [r7, #12]
20007c44:	681b      	ldr	r3, [r3, #0]
20007c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20007c4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
20007c4c:	68fb      	ldr	r3, [r7, #12]
20007c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007c50:	4a29      	ldr	r2, [pc, #164]	; (20007cf8 <HAL_SPI_Transmit_DMA+0x160>)
20007c52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
20007c54:	68fb      	ldr	r3, [r7, #12]
20007c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007c58:	4a28      	ldr	r2, [pc, #160]	; (20007cfc <HAL_SPI_Transmit_DMA+0x164>)
20007c5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
20007c5c:	68fb      	ldr	r3, [r7, #12]
20007c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007c60:	4a27      	ldr	r2, [pc, #156]	; (20007d00 <HAL_SPI_Transmit_DMA+0x168>)
20007c62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
20007c64:	68fb      	ldr	r3, [r7, #12]
20007c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007c68:	2200      	movs	r2, #0
20007c6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20007c6c:	68fb      	ldr	r3, [r7, #12]
20007c6e:	6c98      	ldr	r0, [r3, #72]	; 0x48
20007c70:	68fb      	ldr	r3, [r7, #12]
20007c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20007c74:	4619      	mov	r1, r3
20007c76:	68fb      	ldr	r3, [r7, #12]
20007c78:	681b      	ldr	r3, [r3, #0]
20007c7a:	330c      	adds	r3, #12
20007c7c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
20007c7e:	68fb      	ldr	r3, [r7, #12]
20007c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20007c82:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20007c84:	f7fa fc11 	bl	200024aa <HAL_DMA_Start_IT>
20007c88:	4603      	mov	r3, r0
20007c8a:	2b00      	cmp	r3, #0
20007c8c:	d00c      	beq.n	20007ca8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20007c8e:	68fb      	ldr	r3, [r7, #12]
20007c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007c92:	f043 0210 	orr.w	r2, r3, #16
20007c96:	68fb      	ldr	r3, [r7, #12]
20007c98:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20007c9a:	2301      	movs	r3, #1
20007c9c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
20007c9e:	68fb      	ldr	r3, [r7, #12]
20007ca0:	2201      	movs	r2, #1
20007ca2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20007ca6:	e01e      	b.n	20007ce6 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007ca8:	68fb      	ldr	r3, [r7, #12]
20007caa:	681b      	ldr	r3, [r3, #0]
20007cac:	681b      	ldr	r3, [r3, #0]
20007cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
20007cb2:	2b40      	cmp	r3, #64	; 0x40
20007cb4:	d007      	beq.n	20007cc6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007cb6:	68fb      	ldr	r3, [r7, #12]
20007cb8:	681b      	ldr	r3, [r3, #0]
20007cba:	681a      	ldr	r2, [r3, #0]
20007cbc:	68fb      	ldr	r3, [r7, #12]
20007cbe:	681b      	ldr	r3, [r3, #0]
20007cc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007cc4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20007cc6:	68fb      	ldr	r3, [r7, #12]
20007cc8:	681b      	ldr	r3, [r3, #0]
20007cca:	685a      	ldr	r2, [r3, #4]
20007ccc:	68fb      	ldr	r3, [r7, #12]
20007cce:	681b      	ldr	r3, [r3, #0]
20007cd0:	f042 0220 	orr.w	r2, r2, #32
20007cd4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20007cd6:	68fb      	ldr	r3, [r7, #12]
20007cd8:	681b      	ldr	r3, [r3, #0]
20007cda:	685a      	ldr	r2, [r3, #4]
20007cdc:	68fb      	ldr	r3, [r7, #12]
20007cde:	681b      	ldr	r3, [r3, #0]
20007ce0:	f042 0202 	orr.w	r2, r2, #2
20007ce4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20007ce6:	68fb      	ldr	r3, [r7, #12]
20007ce8:	2200      	movs	r2, #0
20007cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007cee:	7dfb      	ldrb	r3, [r7, #23]
}
20007cf0:	4618      	mov	r0, r3
20007cf2:	3718      	adds	r7, #24
20007cf4:	46bd      	mov	sp, r7
20007cf6:	bd80      	pop	{r7, pc}
20007cf8:	20008a21 	.word	0x20008a21
20007cfc:	20008841 	.word	0x20008841
20007d00:	20008a75 	.word	0x20008a75

20007d04 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
20007d04:	b580      	push	{r7, lr}
20007d06:	b086      	sub	sp, #24
20007d08:	af00      	add	r7, sp, #0
20007d0a:	60f8      	str	r0, [r7, #12]
20007d0c:	60b9      	str	r1, [r7, #8]
20007d0e:	4613      	mov	r3, r2
20007d10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
20007d12:	2300      	movs	r3, #0
20007d14:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
20007d16:	68fb      	ldr	r3, [r7, #12]
20007d18:	689b      	ldr	r3, [r3, #8]
20007d1a:	2b00      	cmp	r3, #0
20007d1c:	d110      	bne.n	20007d40 <HAL_SPI_Receive_DMA+0x3c>
20007d1e:	68fb      	ldr	r3, [r7, #12]
20007d20:	685b      	ldr	r3, [r3, #4]
20007d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20007d26:	d10b      	bne.n	20007d40 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20007d28:	68fb      	ldr	r3, [r7, #12]
20007d2a:	2204      	movs	r2, #4
20007d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
20007d30:	88fb      	ldrh	r3, [r7, #6]
20007d32:	68ba      	ldr	r2, [r7, #8]
20007d34:	68b9      	ldr	r1, [r7, #8]
20007d36:	68f8      	ldr	r0, [r7, #12]
20007d38:	f000 f8ac 	bl	20007e94 <HAL_SPI_TransmitReceive_DMA>
20007d3c:	4603      	mov	r3, r0
20007d3e:	e09f      	b.n	20007e80 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20007d40:	68fb      	ldr	r3, [r7, #12]
20007d42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007d46:	2b01      	cmp	r3, #1
20007d48:	d101      	bne.n	20007d4e <HAL_SPI_Receive_DMA+0x4a>
20007d4a:	2302      	movs	r3, #2
20007d4c:	e098      	b.n	20007e80 <HAL_SPI_Receive_DMA+0x17c>
20007d4e:	68fb      	ldr	r3, [r7, #12]
20007d50:	2201      	movs	r2, #1
20007d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
20007d56:	68fb      	ldr	r3, [r7, #12]
20007d58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007d5c:	b2db      	uxtb	r3, r3
20007d5e:	2b01      	cmp	r3, #1
20007d60:	d002      	beq.n	20007d68 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
20007d62:	2302      	movs	r3, #2
20007d64:	75fb      	strb	r3, [r7, #23]
    goto error;
20007d66:	e086      	b.n	20007e76 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
20007d68:	68bb      	ldr	r3, [r7, #8]
20007d6a:	2b00      	cmp	r3, #0
20007d6c:	d002      	beq.n	20007d74 <HAL_SPI_Receive_DMA+0x70>
20007d6e:	88fb      	ldrh	r3, [r7, #6]
20007d70:	2b00      	cmp	r3, #0
20007d72:	d102      	bne.n	20007d7a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
20007d74:	2301      	movs	r3, #1
20007d76:	75fb      	strb	r3, [r7, #23]
    goto error;
20007d78:	e07d      	b.n	20007e76 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
20007d7a:	68fb      	ldr	r3, [r7, #12]
20007d7c:	2204      	movs	r2, #4
20007d7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007d82:	68fb      	ldr	r3, [r7, #12]
20007d84:	2200      	movs	r2, #0
20007d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
20007d88:	68fb      	ldr	r3, [r7, #12]
20007d8a:	68ba      	ldr	r2, [r7, #8]
20007d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20007d8e:	68fb      	ldr	r3, [r7, #12]
20007d90:	88fa      	ldrh	r2, [r7, #6]
20007d92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20007d94:	68fb      	ldr	r3, [r7, #12]
20007d96:	88fa      	ldrh	r2, [r7, #6]
20007d98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20007d9a:	68fb      	ldr	r3, [r7, #12]
20007d9c:	2200      	movs	r2, #0
20007d9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20007da0:	68fb      	ldr	r3, [r7, #12]
20007da2:	2200      	movs	r2, #0
20007da4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
20007da6:	68fb      	ldr	r3, [r7, #12]
20007da8:	2200      	movs	r2, #0
20007daa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
20007dac:	68fb      	ldr	r3, [r7, #12]
20007dae:	2200      	movs	r2, #0
20007db0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20007db2:	68fb      	ldr	r3, [r7, #12]
20007db4:	689b      	ldr	r3, [r3, #8]
20007db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20007dba:	d10f      	bne.n	20007ddc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
20007dbc:	68fb      	ldr	r3, [r7, #12]
20007dbe:	681b      	ldr	r3, [r3, #0]
20007dc0:	681a      	ldr	r2, [r3, #0]
20007dc2:	68fb      	ldr	r3, [r7, #12]
20007dc4:	681b      	ldr	r3, [r3, #0]
20007dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20007dca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
20007dcc:	68fb      	ldr	r3, [r7, #12]
20007dce:	681b      	ldr	r3, [r3, #0]
20007dd0:	681a      	ldr	r2, [r3, #0]
20007dd2:	68fb      	ldr	r3, [r7, #12]
20007dd4:	681b      	ldr	r3, [r3, #0]
20007dd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
20007dda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
20007ddc:	68fb      	ldr	r3, [r7, #12]
20007dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007de0:	4a29      	ldr	r2, [pc, #164]	; (20007e88 <HAL_SPI_Receive_DMA+0x184>)
20007de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
20007de4:	68fb      	ldr	r3, [r7, #12]
20007de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007de8:	4a28      	ldr	r2, [pc, #160]	; (20007e8c <HAL_SPI_Receive_DMA+0x188>)
20007dea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
20007dec:	68fb      	ldr	r3, [r7, #12]
20007dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007df0:	4a27      	ldr	r2, [pc, #156]	; (20007e90 <HAL_SPI_Receive_DMA+0x18c>)
20007df2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
20007df4:	68fb      	ldr	r3, [r7, #12]
20007df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007df8:	2200      	movs	r2, #0
20007dfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20007dfc:	68fb      	ldr	r3, [r7, #12]
20007dfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
20007e00:	68fb      	ldr	r3, [r7, #12]
20007e02:	681b      	ldr	r3, [r3, #0]
20007e04:	330c      	adds	r3, #12
20007e06:	4619      	mov	r1, r3
20007e08:	68fb      	ldr	r3, [r7, #12]
20007e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007e0c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
20007e0e:	68fb      	ldr	r3, [r7, #12]
20007e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007e12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20007e14:	f7fa fb49 	bl	200024aa <HAL_DMA_Start_IT>
20007e18:	4603      	mov	r3, r0
20007e1a:	2b00      	cmp	r3, #0
20007e1c:	d00c      	beq.n	20007e38 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20007e1e:	68fb      	ldr	r3, [r7, #12]
20007e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007e22:	f043 0210 	orr.w	r2, r3, #16
20007e26:	68fb      	ldr	r3, [r7, #12]
20007e28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20007e2a:	2301      	movs	r3, #1
20007e2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
20007e2e:	68fb      	ldr	r3, [r7, #12]
20007e30:	2201      	movs	r2, #1
20007e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20007e36:	e01e      	b.n	20007e76 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20007e38:	68fb      	ldr	r3, [r7, #12]
20007e3a:	681b      	ldr	r3, [r3, #0]
20007e3c:	681b      	ldr	r3, [r3, #0]
20007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
20007e42:	2b40      	cmp	r3, #64	; 0x40
20007e44:	d007      	beq.n	20007e56 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20007e46:	68fb      	ldr	r3, [r7, #12]
20007e48:	681b      	ldr	r3, [r3, #0]
20007e4a:	681a      	ldr	r2, [r3, #0]
20007e4c:	68fb      	ldr	r3, [r7, #12]
20007e4e:	681b      	ldr	r3, [r3, #0]
20007e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20007e54:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20007e56:	68fb      	ldr	r3, [r7, #12]
20007e58:	681b      	ldr	r3, [r3, #0]
20007e5a:	685a      	ldr	r2, [r3, #4]
20007e5c:	68fb      	ldr	r3, [r7, #12]
20007e5e:	681b      	ldr	r3, [r3, #0]
20007e60:	f042 0220 	orr.w	r2, r2, #32
20007e64:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20007e66:	68fb      	ldr	r3, [r7, #12]
20007e68:	681b      	ldr	r3, [r3, #0]
20007e6a:	685a      	ldr	r2, [r3, #4]
20007e6c:	68fb      	ldr	r3, [r7, #12]
20007e6e:	681b      	ldr	r3, [r3, #0]
20007e70:	f042 0201 	orr.w	r2, r2, #1
20007e74:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20007e76:	68fb      	ldr	r3, [r7, #12]
20007e78:	2200      	movs	r2, #0
20007e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
20007e7e:	7dfb      	ldrb	r3, [r7, #23]
}
20007e80:	4618      	mov	r0, r3
20007e82:	3718      	adds	r7, #24
20007e84:	46bd      	mov	sp, r7
20007e86:	bd80      	pop	{r7, pc}
20007e88:	20008a3d 	.word	0x20008a3d
20007e8c:	200088e9 	.word	0x200088e9
20007e90:	20008a75 	.word	0x20008a75

20007e94 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
20007e94:	b580      	push	{r7, lr}
20007e96:	b086      	sub	sp, #24
20007e98:	af00      	add	r7, sp, #0
20007e9a:	60f8      	str	r0, [r7, #12]
20007e9c:	60b9      	str	r1, [r7, #8]
20007e9e:	607a      	str	r2, [r7, #4]
20007ea0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
20007ea2:	2300      	movs	r3, #0
20007ea4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
20007ea6:	68fb      	ldr	r3, [r7, #12]
20007ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20007eac:	2b01      	cmp	r3, #1
20007eae:	d101      	bne.n	20007eb4 <HAL_SPI_TransmitReceive_DMA+0x20>
20007eb0:	2302      	movs	r3, #2
20007eb2:	e0e3      	b.n	2000807c <HAL_SPI_TransmitReceive_DMA+0x1e8>
20007eb4:	68fb      	ldr	r3, [r7, #12]
20007eb6:	2201      	movs	r2, #1
20007eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
20007ebc:	68fb      	ldr	r3, [r7, #12]
20007ebe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007ec2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
20007ec4:	68fb      	ldr	r3, [r7, #12]
20007ec6:	685b      	ldr	r3, [r3, #4]
20007ec8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
20007eca:	7dbb      	ldrb	r3, [r7, #22]
20007ecc:	2b01      	cmp	r3, #1
20007ece:	d00d      	beq.n	20007eec <HAL_SPI_TransmitReceive_DMA+0x58>
20007ed0:	693b      	ldr	r3, [r7, #16]
20007ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20007ed6:	d106      	bne.n	20007ee6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
20007ed8:	68fb      	ldr	r3, [r7, #12]
20007eda:	689b      	ldr	r3, [r3, #8]
20007edc:	2b00      	cmp	r3, #0
20007ede:	d102      	bne.n	20007ee6 <HAL_SPI_TransmitReceive_DMA+0x52>
20007ee0:	7dbb      	ldrb	r3, [r7, #22]
20007ee2:	2b04      	cmp	r3, #4
20007ee4:	d002      	beq.n	20007eec <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
20007ee6:	2302      	movs	r3, #2
20007ee8:	75fb      	strb	r3, [r7, #23]
    goto error;
20007eea:	e0c2      	b.n	20008072 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
20007eec:	68bb      	ldr	r3, [r7, #8]
20007eee:	2b00      	cmp	r3, #0
20007ef0:	d005      	beq.n	20007efe <HAL_SPI_TransmitReceive_DMA+0x6a>
20007ef2:	687b      	ldr	r3, [r7, #4]
20007ef4:	2b00      	cmp	r3, #0
20007ef6:	d002      	beq.n	20007efe <HAL_SPI_TransmitReceive_DMA+0x6a>
20007ef8:	887b      	ldrh	r3, [r7, #2]
20007efa:	2b00      	cmp	r3, #0
20007efc:	d102      	bne.n	20007f04 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
20007efe:	2301      	movs	r3, #1
20007f00:	75fb      	strb	r3, [r7, #23]
    goto error;
20007f02:	e0b6      	b.n	20008072 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
20007f04:	68fb      	ldr	r3, [r7, #12]
20007f06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007f0a:	b2db      	uxtb	r3, r3
20007f0c:	2b04      	cmp	r3, #4
20007f0e:	d003      	beq.n	20007f18 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20007f10:	68fb      	ldr	r3, [r7, #12]
20007f12:	2205      	movs	r2, #5
20007f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
20007f18:	68fb      	ldr	r3, [r7, #12]
20007f1a:	2200      	movs	r2, #0
20007f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
20007f1e:	68fb      	ldr	r3, [r7, #12]
20007f20:	68ba      	ldr	r2, [r7, #8]
20007f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
20007f24:	68fb      	ldr	r3, [r7, #12]
20007f26:	887a      	ldrh	r2, [r7, #2]
20007f28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
20007f2a:	68fb      	ldr	r3, [r7, #12]
20007f2c:	887a      	ldrh	r2, [r7, #2]
20007f2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20007f30:	68fb      	ldr	r3, [r7, #12]
20007f32:	687a      	ldr	r2, [r7, #4]
20007f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
20007f36:	68fb      	ldr	r3, [r7, #12]
20007f38:	887a      	ldrh	r2, [r7, #2]
20007f3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
20007f3c:	68fb      	ldr	r3, [r7, #12]
20007f3e:	887a      	ldrh	r2, [r7, #2]
20007f40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
20007f42:	68fb      	ldr	r3, [r7, #12]
20007f44:	2200      	movs	r2, #0
20007f46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
20007f48:	68fb      	ldr	r3, [r7, #12]
20007f4a:	2200      	movs	r2, #0
20007f4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
20007f4e:	68fb      	ldr	r3, [r7, #12]
20007f50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20007f54:	b2db      	uxtb	r3, r3
20007f56:	2b04      	cmp	r3, #4
20007f58:	d108      	bne.n	20007f6c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
20007f5a:	68fb      	ldr	r3, [r7, #12]
20007f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007f5e:	4a49      	ldr	r2, [pc, #292]	; (20008084 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
20007f60:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
20007f62:	68fb      	ldr	r3, [r7, #12]
20007f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007f66:	4a48      	ldr	r2, [pc, #288]	; (20008088 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
20007f68:	63da      	str	r2, [r3, #60]	; 0x3c
20007f6a:	e007      	b.n	20007f7c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
20007f6c:	68fb      	ldr	r3, [r7, #12]
20007f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007f70:	4a46      	ldr	r2, [pc, #280]	; (2000808c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
20007f72:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
20007f74:	68fb      	ldr	r3, [r7, #12]
20007f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007f78:	4a45      	ldr	r2, [pc, #276]	; (20008090 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
20007f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
20007f7c:	68fb      	ldr	r3, [r7, #12]
20007f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007f80:	4a44      	ldr	r2, [pc, #272]	; (20008094 <HAL_SPI_TransmitReceive_DMA+0x200>)
20007f82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
20007f84:	68fb      	ldr	r3, [r7, #12]
20007f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20007f88:	2200      	movs	r2, #0
20007f8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20007f8c:	68fb      	ldr	r3, [r7, #12]
20007f8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
20007f90:	68fb      	ldr	r3, [r7, #12]
20007f92:	681b      	ldr	r3, [r3, #0]
20007f94:	330c      	adds	r3, #12
20007f96:	4619      	mov	r1, r3
20007f98:	68fb      	ldr	r3, [r7, #12]
20007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20007f9c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
20007f9e:	68fb      	ldr	r3, [r7, #12]
20007fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20007fa2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
20007fa4:	f7fa fa81 	bl	200024aa <HAL_DMA_Start_IT>
20007fa8:	4603      	mov	r3, r0
20007faa:	2b00      	cmp	r3, #0
20007fac:	d00c      	beq.n	20007fc8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20007fae:	68fb      	ldr	r3, [r7, #12]
20007fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20007fb2:	f043 0210 	orr.w	r2, r3, #16
20007fb6:	68fb      	ldr	r3, [r7, #12]
20007fb8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20007fba:	2301      	movs	r3, #1
20007fbc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
20007fbe:	68fb      	ldr	r3, [r7, #12]
20007fc0:	2201      	movs	r2, #1
20007fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20007fc6:	e054      	b.n	20008072 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20007fc8:	68fb      	ldr	r3, [r7, #12]
20007fca:	681b      	ldr	r3, [r3, #0]
20007fcc:	685a      	ldr	r2, [r3, #4]
20007fce:	68fb      	ldr	r3, [r7, #12]
20007fd0:	681b      	ldr	r3, [r3, #0]
20007fd2:	f042 0201 	orr.w	r2, r2, #1
20007fd6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
20007fd8:	68fb      	ldr	r3, [r7, #12]
20007fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007fdc:	2200      	movs	r2, #0
20007fde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
20007fe0:	68fb      	ldr	r3, [r7, #12]
20007fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007fe4:	2200      	movs	r2, #0
20007fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
20007fe8:	68fb      	ldr	r3, [r7, #12]
20007fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007fec:	2200      	movs	r2, #0
20007fee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
20007ff0:	68fb      	ldr	r3, [r7, #12]
20007ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20007ff4:	2200      	movs	r2, #0
20007ff6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20007ff8:	68fb      	ldr	r3, [r7, #12]
20007ffa:	6c98      	ldr	r0, [r3, #72]	; 0x48
20007ffc:	68fb      	ldr	r3, [r7, #12]
20007ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008000:	4619      	mov	r1, r3
20008002:	68fb      	ldr	r3, [r7, #12]
20008004:	681b      	ldr	r3, [r3, #0]
20008006:	330c      	adds	r3, #12
20008008:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
2000800a:	68fb      	ldr	r3, [r7, #12]
2000800c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
2000800e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
20008010:	f7fa fa4b 	bl	200024aa <HAL_DMA_Start_IT>
20008014:	4603      	mov	r3, r0
20008016:	2b00      	cmp	r3, #0
20008018:	d00c      	beq.n	20008034 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
2000801a:	68fb      	ldr	r3, [r7, #12]
2000801c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000801e:	f043 0210 	orr.w	r2, r3, #16
20008022:	68fb      	ldr	r3, [r7, #12]
20008024:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
20008026:	2301      	movs	r3, #1
20008028:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
2000802a:	68fb      	ldr	r3, [r7, #12]
2000802c:	2201      	movs	r2, #1
2000802e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
20008032:	e01e      	b.n	20008072 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
20008034:	68fb      	ldr	r3, [r7, #12]
20008036:	681b      	ldr	r3, [r3, #0]
20008038:	681b      	ldr	r3, [r3, #0]
2000803a:	f003 0340 	and.w	r3, r3, #64	; 0x40
2000803e:	2b40      	cmp	r3, #64	; 0x40
20008040:	d007      	beq.n	20008052 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20008042:	68fb      	ldr	r3, [r7, #12]
20008044:	681b      	ldr	r3, [r3, #0]
20008046:	681a      	ldr	r2, [r3, #0]
20008048:	68fb      	ldr	r3, [r7, #12]
2000804a:	681b      	ldr	r3, [r3, #0]
2000804c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20008050:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
20008052:	68fb      	ldr	r3, [r7, #12]
20008054:	681b      	ldr	r3, [r3, #0]
20008056:	685a      	ldr	r2, [r3, #4]
20008058:	68fb      	ldr	r3, [r7, #12]
2000805a:	681b      	ldr	r3, [r3, #0]
2000805c:	f042 0220 	orr.w	r2, r2, #32
20008060:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20008062:	68fb      	ldr	r3, [r7, #12]
20008064:	681b      	ldr	r3, [r3, #0]
20008066:	685a      	ldr	r2, [r3, #4]
20008068:	68fb      	ldr	r3, [r7, #12]
2000806a:	681b      	ldr	r3, [r3, #0]
2000806c:	f042 0202 	orr.w	r2, r2, #2
20008070:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008072:	68fb      	ldr	r3, [r7, #12]
20008074:	2200      	movs	r2, #0
20008076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
2000807a:	7dfb      	ldrb	r3, [r7, #23]
}
2000807c:	4618      	mov	r0, r3
2000807e:	3718      	adds	r7, #24
20008080:	46bd      	mov	sp, r7
20008082:	bd80      	pop	{r7, pc}
20008084:	20008a3d 	.word	0x20008a3d
20008088:	200088e9 	.word	0x200088e9
2000808c:	20008a59 	.word	0x20008a59
20008090:	20008991 	.word	0x20008991
20008094:	20008a75 	.word	0x20008a75

20008098 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
20008098:	b580      	push	{r7, lr}
2000809a:	b088      	sub	sp, #32
2000809c:	af00      	add	r7, sp, #0
2000809e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
200080a0:	2300      	movs	r3, #0
200080a2:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200080a4:	4b6e      	ldr	r3, [pc, #440]	; (20008260 <HAL_SPI_Abort+0x1c8>)
200080a6:	681b      	ldr	r3, [r3, #0]
200080a8:	4a6e      	ldr	r2, [pc, #440]	; (20008264 <HAL_SPI_Abort+0x1cc>)
200080aa:	fba2 2303 	umull	r2, r3, r2, r3
200080ae:	0a5b      	lsrs	r3, r3, #9
200080b0:	2264      	movs	r2, #100	; 0x64
200080b2:	fb02 f303 	mul.w	r3, r2, r3
200080b6:	617b      	str	r3, [r7, #20]
  count = resetcount;
200080b8:	697b      	ldr	r3, [r7, #20]
200080ba:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
200080bc:	687b      	ldr	r3, [r7, #4]
200080be:	681b      	ldr	r3, [r3, #0]
200080c0:	685a      	ldr	r2, [r3, #4]
200080c2:	687b      	ldr	r3, [r7, #4]
200080c4:	681b      	ldr	r3, [r3, #0]
200080c6:	f022 0220 	bic.w	r2, r2, #32
200080ca:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
200080cc:	687b      	ldr	r3, [r7, #4]
200080ce:	681b      	ldr	r3, [r3, #0]
200080d0:	685b      	ldr	r3, [r3, #4]
200080d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
200080d6:	2b80      	cmp	r3, #128	; 0x80
200080d8:	d117      	bne.n	2000810a <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
200080da:	687b      	ldr	r3, [r7, #4]
200080dc:	4a62      	ldr	r2, [pc, #392]	; (20008268 <HAL_SPI_Abort+0x1d0>)
200080de:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200080e0:	69bb      	ldr	r3, [r7, #24]
200080e2:	2b00      	cmp	r3, #0
200080e4:	d106      	bne.n	200080f4 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200080e6:	687b      	ldr	r3, [r7, #4]
200080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200080ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200080ee:	687b      	ldr	r3, [r7, #4]
200080f0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
200080f2:	e008      	b.n	20008106 <HAL_SPI_Abort+0x6e>
      }
      count--;
200080f4:	69bb      	ldr	r3, [r7, #24]
200080f6:	3b01      	subs	r3, #1
200080f8:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
200080fa:	687b      	ldr	r3, [r7, #4]
200080fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008100:	b2db      	uxtb	r3, r3
20008102:	2b07      	cmp	r3, #7
20008104:	d1ec      	bne.n	200080e0 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
20008106:	697b      	ldr	r3, [r7, #20]
20008108:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
2000810a:	687b      	ldr	r3, [r7, #4]
2000810c:	681b      	ldr	r3, [r3, #0]
2000810e:	685b      	ldr	r3, [r3, #4]
20008110:	f003 0340 	and.w	r3, r3, #64	; 0x40
20008114:	2b40      	cmp	r3, #64	; 0x40
20008116:	d117      	bne.n	20008148 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
20008118:	687b      	ldr	r3, [r7, #4]
2000811a:	4a54      	ldr	r2, [pc, #336]	; (2000826c <HAL_SPI_Abort+0x1d4>)
2000811c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
2000811e:	69bb      	ldr	r3, [r7, #24]
20008120:	2b00      	cmp	r3, #0
20008122:	d106      	bne.n	20008132 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008124:	687b      	ldr	r3, [r7, #4]
20008126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008128:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000812c:	687b      	ldr	r3, [r7, #4]
2000812e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
20008130:	e008      	b.n	20008144 <HAL_SPI_Abort+0xac>
      }
      count--;
20008132:	69bb      	ldr	r3, [r7, #24]
20008134:	3b01      	subs	r3, #1
20008136:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20008138:	687b      	ldr	r3, [r7, #4]
2000813a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000813e:	b2db      	uxtb	r3, r3
20008140:	2b07      	cmp	r3, #7
20008142:	d1ec      	bne.n	2000811e <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
20008144:	697b      	ldr	r3, [r7, #20]
20008146:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20008148:	687b      	ldr	r3, [r7, #4]
2000814a:	681b      	ldr	r3, [r3, #0]
2000814c:	685b      	ldr	r3, [r3, #4]
2000814e:	f003 0302 	and.w	r3, r3, #2
20008152:	2b02      	cmp	r3, #2
20008154:	d12e      	bne.n	200081b4 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
20008156:	687b      	ldr	r3, [r7, #4]
20008158:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000815a:	2b00      	cmp	r3, #0
2000815c:	d02a      	beq.n	200081b4 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
2000815e:	687b      	ldr	r3, [r7, #4]
20008160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008162:	2200      	movs	r2, #0
20008164:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
20008166:	687b      	ldr	r3, [r7, #4]
20008168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000816a:	4618      	mov	r0, r3
2000816c:	f7fa f9f5 	bl	2000255a <HAL_DMA_Abort>
20008170:	4603      	mov	r3, r0
20008172:	2b00      	cmp	r3, #0
20008174:	d002      	beq.n	2000817c <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
20008176:	687b      	ldr	r3, [r7, #4]
20008178:	2240      	movs	r2, #64	; 0x40
2000817a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
2000817c:	687b      	ldr	r3, [r7, #4]
2000817e:	681b      	ldr	r3, [r3, #0]
20008180:	685a      	ldr	r2, [r3, #4]
20008182:	687b      	ldr	r3, [r7, #4]
20008184:	681b      	ldr	r3, [r3, #0]
20008186:	f022 0202 	bic.w	r2, r2, #2
2000818a:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
2000818c:	69bb      	ldr	r3, [r7, #24]
2000818e:	2b00      	cmp	r3, #0
20008190:	d106      	bne.n	200081a0 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008192:	687b      	ldr	r3, [r7, #4]
20008194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008196:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000819a:	687b      	ldr	r3, [r7, #4]
2000819c:	655a      	str	r2, [r3, #84]	; 0x54
          break;
2000819e:	e009      	b.n	200081b4 <HAL_SPI_Abort+0x11c>
        }
        count--;
200081a0:	69bb      	ldr	r3, [r7, #24]
200081a2:	3b01      	subs	r3, #1
200081a4:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
200081a6:	687b      	ldr	r3, [r7, #4]
200081a8:	681b      	ldr	r3, [r3, #0]
200081aa:	689b      	ldr	r3, [r3, #8]
200081ac:	f003 0302 	and.w	r3, r3, #2
200081b0:	2b00      	cmp	r3, #0
200081b2:	d0eb      	beq.n	2000818c <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
200081b4:	687b      	ldr	r3, [r7, #4]
200081b6:	681b      	ldr	r3, [r3, #0]
200081b8:	685b      	ldr	r3, [r3, #4]
200081ba:	f003 0301 	and.w	r3, r3, #1
200081be:	2b01      	cmp	r3, #1
200081c0:	d122      	bne.n	20008208 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
200081c2:	687b      	ldr	r3, [r7, #4]
200081c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200081c6:	2b00      	cmp	r3, #0
200081c8:	d01e      	beq.n	20008208 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
200081ca:	687b      	ldr	r3, [r7, #4]
200081cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200081ce:	2200      	movs	r2, #0
200081d0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
200081d2:	687b      	ldr	r3, [r7, #4]
200081d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200081d6:	4618      	mov	r0, r3
200081d8:	f7fa f9bf 	bl	2000255a <HAL_DMA_Abort>
200081dc:	4603      	mov	r3, r0
200081de:	2b00      	cmp	r3, #0
200081e0:	d002      	beq.n	200081e8 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
200081e2:	687b      	ldr	r3, [r7, #4]
200081e4:	2240      	movs	r2, #64	; 0x40
200081e6:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
200081e8:	687b      	ldr	r3, [r7, #4]
200081ea:	681b      	ldr	r3, [r3, #0]
200081ec:	681a      	ldr	r2, [r3, #0]
200081ee:	687b      	ldr	r3, [r7, #4]
200081f0:	681b      	ldr	r3, [r3, #0]
200081f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200081f6:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
200081f8:	687b      	ldr	r3, [r7, #4]
200081fa:	681b      	ldr	r3, [r3, #0]
200081fc:	685a      	ldr	r2, [r3, #4]
200081fe:	687b      	ldr	r3, [r7, #4]
20008200:	681b      	ldr	r3, [r3, #0]
20008202:	f022 0201 	bic.w	r2, r2, #1
20008206:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
20008208:	687b      	ldr	r3, [r7, #4]
2000820a:	2200      	movs	r2, #0
2000820c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
2000820e:	687b      	ldr	r3, [r7, #4]
20008210:	2200      	movs	r2, #0
20008212:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
20008214:	687b      	ldr	r3, [r7, #4]
20008216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008218:	2b40      	cmp	r3, #64	; 0x40
2000821a:	d102      	bne.n	20008222 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
2000821c:	2301      	movs	r3, #1
2000821e:	77fb      	strb	r3, [r7, #31]
20008220:	e002      	b.n	20008228 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008222:	687b      	ldr	r3, [r7, #4]
20008224:	2200      	movs	r2, #0
20008226:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008228:	2300      	movs	r3, #0
2000822a:	613b      	str	r3, [r7, #16]
2000822c:	687b      	ldr	r3, [r7, #4]
2000822e:	681b      	ldr	r3, [r3, #0]
20008230:	68db      	ldr	r3, [r3, #12]
20008232:	613b      	str	r3, [r7, #16]
20008234:	687b      	ldr	r3, [r7, #4]
20008236:	681b      	ldr	r3, [r3, #0]
20008238:	689b      	ldr	r3, [r3, #8]
2000823a:	613b      	str	r3, [r7, #16]
2000823c:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
2000823e:	2300      	movs	r3, #0
20008240:	60fb      	str	r3, [r7, #12]
20008242:	687b      	ldr	r3, [r7, #4]
20008244:	681b      	ldr	r3, [r3, #0]
20008246:	689b      	ldr	r3, [r3, #8]
20008248:	60fb      	str	r3, [r7, #12]
2000824a:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
2000824c:	687b      	ldr	r3, [r7, #4]
2000824e:	2201      	movs	r2, #1
20008250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
20008254:	7ffb      	ldrb	r3, [r7, #31]
}
20008256:	4618      	mov	r0, r3
20008258:	3720      	adds	r7, #32
2000825a:	46bd      	mov	sp, r7
2000825c:	bd80      	pop	{r7, pc}
2000825e:	bf00      	nop
20008260:	200003a0 	.word	0x200003a0
20008264:	057619f1 	.word	0x057619f1
20008268:	20009429 	.word	0x20009429
2000826c:	20009399 	.word	0x20009399

20008270 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
20008270:	b580      	push	{r7, lr}
20008272:	b088      	sub	sp, #32
20008274:	af00      	add	r7, sp, #0
20008276:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
20008278:	2300      	movs	r3, #0
2000827a:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
2000827c:	2301      	movs	r3, #1
2000827e:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20008280:	4b72      	ldr	r3, [pc, #456]	; (2000844c <HAL_SPI_Abort_IT+0x1dc>)
20008282:	681b      	ldr	r3, [r3, #0]
20008284:	4a72      	ldr	r2, [pc, #456]	; (20008450 <HAL_SPI_Abort_IT+0x1e0>)
20008286:	fba2 2303 	umull	r2, r3, r2, r3
2000828a:	0a5b      	lsrs	r3, r3, #9
2000828c:	2264      	movs	r2, #100	; 0x64
2000828e:	fb02 f303 	mul.w	r3, r2, r3
20008292:	613b      	str	r3, [r7, #16]
  count = resetcount;
20008294:	693b      	ldr	r3, [r7, #16]
20008296:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
20008298:	687b      	ldr	r3, [r7, #4]
2000829a:	681b      	ldr	r3, [r3, #0]
2000829c:	685a      	ldr	r2, [r3, #4]
2000829e:	687b      	ldr	r3, [r7, #4]
200082a0:	681b      	ldr	r3, [r3, #0]
200082a2:	f022 0220 	bic.w	r2, r2, #32
200082a6:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
200082a8:	687b      	ldr	r3, [r7, #4]
200082aa:	681b      	ldr	r3, [r3, #0]
200082ac:	685b      	ldr	r3, [r3, #4]
200082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
200082b2:	2b80      	cmp	r3, #128	; 0x80
200082b4:	d117      	bne.n	200082e6 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
200082b6:	687b      	ldr	r3, [r7, #4]
200082b8:	4a66      	ldr	r2, [pc, #408]	; (20008454 <HAL_SPI_Abort_IT+0x1e4>)
200082ba:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200082bc:	697b      	ldr	r3, [r7, #20]
200082be:	2b00      	cmp	r3, #0
200082c0:	d106      	bne.n	200082d0 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200082c2:	687b      	ldr	r3, [r7, #4]
200082c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200082c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200082ca:	687b      	ldr	r3, [r7, #4]
200082cc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
200082ce:	e008      	b.n	200082e2 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
200082d0:	697b      	ldr	r3, [r7, #20]
200082d2:	3b01      	subs	r3, #1
200082d4:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
200082d6:	687b      	ldr	r3, [r7, #4]
200082d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
200082dc:	b2db      	uxtb	r3, r3
200082de:	2b07      	cmp	r3, #7
200082e0:	d1ec      	bne.n	200082bc <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
200082e2:	693b      	ldr	r3, [r7, #16]
200082e4:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
200082e6:	687b      	ldr	r3, [r7, #4]
200082e8:	681b      	ldr	r3, [r3, #0]
200082ea:	685b      	ldr	r3, [r3, #4]
200082ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
200082f0:	2b40      	cmp	r3, #64	; 0x40
200082f2:	d117      	bne.n	20008324 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
200082f4:	687b      	ldr	r3, [r7, #4]
200082f6:	4a58      	ldr	r2, [pc, #352]	; (20008458 <HAL_SPI_Abort_IT+0x1e8>)
200082f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
200082fa:	697b      	ldr	r3, [r7, #20]
200082fc:	2b00      	cmp	r3, #0
200082fe:	d106      	bne.n	2000830e <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008300:	687b      	ldr	r3, [r7, #4]
20008302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008304:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20008308:	687b      	ldr	r3, [r7, #4]
2000830a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
2000830c:	e008      	b.n	20008320 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
2000830e:	697b      	ldr	r3, [r7, #20]
20008310:	3b01      	subs	r3, #1
20008312:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
20008314:	687b      	ldr	r3, [r7, #4]
20008316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000831a:	b2db      	uxtb	r3, r3
2000831c:	2b07      	cmp	r3, #7
2000831e:	d1ec      	bne.n	200082fa <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
20008320:	693b      	ldr	r3, [r7, #16]
20008322:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
20008324:	687b      	ldr	r3, [r7, #4]
20008326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008328:	2b00      	cmp	r3, #0
2000832a:	d00f      	beq.n	2000834c <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
2000832c:	687b      	ldr	r3, [r7, #4]
2000832e:	681b      	ldr	r3, [r3, #0]
20008330:	685b      	ldr	r3, [r3, #4]
20008332:	f003 0302 	and.w	r3, r3, #2
20008336:	2b02      	cmp	r3, #2
20008338:	d104      	bne.n	20008344 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
2000833a:	687b      	ldr	r3, [r7, #4]
2000833c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000833e:	4a47      	ldr	r2, [pc, #284]	; (2000845c <HAL_SPI_Abort_IT+0x1ec>)
20008340:	651a      	str	r2, [r3, #80]	; 0x50
20008342:	e003      	b.n	2000834c <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
20008344:	687b      	ldr	r3, [r7, #4]
20008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008348:	2200      	movs	r2, #0
2000834a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
2000834c:	687b      	ldr	r3, [r7, #4]
2000834e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008350:	2b00      	cmp	r3, #0
20008352:	d00f      	beq.n	20008374 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
20008354:	687b      	ldr	r3, [r7, #4]
20008356:	681b      	ldr	r3, [r3, #0]
20008358:	685b      	ldr	r3, [r3, #4]
2000835a:	f003 0301 	and.w	r3, r3, #1
2000835e:	2b01      	cmp	r3, #1
20008360:	d104      	bne.n	2000836c <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
20008362:	687b      	ldr	r3, [r7, #4]
20008364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008366:	4a3e      	ldr	r2, [pc, #248]	; (20008460 <HAL_SPI_Abort_IT+0x1f0>)
20008368:	651a      	str	r2, [r3, #80]	; 0x50
2000836a:	e003      	b.n	20008374 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
2000836c:	687b      	ldr	r3, [r7, #4]
2000836e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008370:	2200      	movs	r2, #0
20008372:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
20008374:	687b      	ldr	r3, [r7, #4]
20008376:	681b      	ldr	r3, [r3, #0]
20008378:	685b      	ldr	r3, [r3, #4]
2000837a:	f003 0302 	and.w	r3, r3, #2
2000837e:	2b02      	cmp	r3, #2
20008380:	d115      	bne.n	200083ae <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
20008382:	687b      	ldr	r3, [r7, #4]
20008384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008386:	2b00      	cmp	r3, #0
20008388:	d011      	beq.n	200083ae <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
2000838a:	687b      	ldr	r3, [r7, #4]
2000838c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000838e:	4618      	mov	r0, r3
20008390:	f7fa f953 	bl	2000263a <HAL_DMA_Abort_IT>
20008394:	4603      	mov	r3, r0
20008396:	2b00      	cmp	r3, #0
20008398:	d007      	beq.n	200083aa <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
2000839a:	687b      	ldr	r3, [r7, #4]
2000839c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000839e:	2200      	movs	r2, #0
200083a0:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
200083a2:	687b      	ldr	r3, [r7, #4]
200083a4:	2240      	movs	r2, #64	; 0x40
200083a6:	655a      	str	r2, [r3, #84]	; 0x54
200083a8:	e001      	b.n	200083ae <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
200083aa:	2300      	movs	r3, #0
200083ac:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
200083ae:	687b      	ldr	r3, [r7, #4]
200083b0:	681b      	ldr	r3, [r3, #0]
200083b2:	685b      	ldr	r3, [r3, #4]
200083b4:	f003 0301 	and.w	r3, r3, #1
200083b8:	2b01      	cmp	r3, #1
200083ba:	d115      	bne.n	200083e8 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
200083bc:	687b      	ldr	r3, [r7, #4]
200083be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200083c0:	2b00      	cmp	r3, #0
200083c2:	d011      	beq.n	200083e8 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
200083c4:	687b      	ldr	r3, [r7, #4]
200083c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200083c8:	4618      	mov	r0, r3
200083ca:	f7fa f936 	bl	2000263a <HAL_DMA_Abort_IT>
200083ce:	4603      	mov	r3, r0
200083d0:	2b00      	cmp	r3, #0
200083d2:	d007      	beq.n	200083e4 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
200083d4:	687b      	ldr	r3, [r7, #4]
200083d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200083d8:	2200      	movs	r2, #0
200083da:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
200083dc:	687b      	ldr	r3, [r7, #4]
200083de:	2240      	movs	r2, #64	; 0x40
200083e0:	655a      	str	r2, [r3, #84]	; 0x54
200083e2:	e001      	b.n	200083e8 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
200083e4:	2300      	movs	r3, #0
200083e6:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
200083e8:	69bb      	ldr	r3, [r7, #24]
200083ea:	2b01      	cmp	r3, #1
200083ec:	d128      	bne.n	20008440 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
200083ee:	687b      	ldr	r3, [r7, #4]
200083f0:	2200      	movs	r2, #0
200083f2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
200083f4:	687b      	ldr	r3, [r7, #4]
200083f6:	2200      	movs	r2, #0
200083f8:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
200083fa:	687b      	ldr	r3, [r7, #4]
200083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200083fe:	2b40      	cmp	r3, #64	; 0x40
20008400:	d102      	bne.n	20008408 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
20008402:	2301      	movs	r3, #1
20008404:	77fb      	strb	r3, [r7, #31]
20008406:	e002      	b.n	2000840e <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008408:	687b      	ldr	r3, [r7, #4]
2000840a:	2200      	movs	r2, #0
2000840c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000840e:	2300      	movs	r3, #0
20008410:	60fb      	str	r3, [r7, #12]
20008412:	687b      	ldr	r3, [r7, #4]
20008414:	681b      	ldr	r3, [r3, #0]
20008416:	68db      	ldr	r3, [r3, #12]
20008418:	60fb      	str	r3, [r7, #12]
2000841a:	687b      	ldr	r3, [r7, #4]
2000841c:	681b      	ldr	r3, [r3, #0]
2000841e:	689b      	ldr	r3, [r3, #8]
20008420:	60fb      	str	r3, [r7, #12]
20008422:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
20008424:	2300      	movs	r3, #0
20008426:	60bb      	str	r3, [r7, #8]
20008428:	687b      	ldr	r3, [r7, #4]
2000842a:	681b      	ldr	r3, [r3, #0]
2000842c:	689b      	ldr	r3, [r3, #8]
2000842e:	60bb      	str	r3, [r7, #8]
20008430:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
20008432:	687b      	ldr	r3, [r7, #4]
20008434:	2201      	movs	r2, #1
20008436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
2000843a:	6878      	ldr	r0, [r7, #4]
2000843c:	f000 f9dc 	bl	200087f8 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
20008440:	7ffb      	ldrb	r3, [r7, #31]
}
20008442:	4618      	mov	r0, r3
20008444:	3720      	adds	r7, #32
20008446:	46bd      	mov	sp, r7
20008448:	bd80      	pop	{r7, pc}
2000844a:	bf00      	nop
2000844c:	200003a0 	.word	0x200003a0
20008450:	057619f1 	.word	0x057619f1
20008454:	20009429 	.word	0x20009429
20008458:	20009399 	.word	0x20009399
2000845c:	20008add 	.word	0x20008add
20008460:	20008bb1 	.word	0x20008bb1

20008464 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
20008464:	b480      	push	{r7}
20008466:	b083      	sub	sp, #12
20008468:	af00      	add	r7, sp, #0
2000846a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
2000846c:	687b      	ldr	r3, [r7, #4]
2000846e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
20008472:	2b01      	cmp	r3, #1
20008474:	d101      	bne.n	2000847a <HAL_SPI_DMAPause+0x16>
20008476:	2302      	movs	r3, #2
20008478:	e010      	b.n	2000849c <HAL_SPI_DMAPause+0x38>
2000847a:	687b      	ldr	r3, [r7, #4]
2000847c:	2201      	movs	r2, #1
2000847e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008482:	687b      	ldr	r3, [r7, #4]
20008484:	681b      	ldr	r3, [r3, #0]
20008486:	685a      	ldr	r2, [r3, #4]
20008488:	687b      	ldr	r3, [r7, #4]
2000848a:	681b      	ldr	r3, [r3, #0]
2000848c:	f022 0203 	bic.w	r2, r2, #3
20008490:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20008492:	687b      	ldr	r3, [r7, #4]
20008494:	2200      	movs	r2, #0
20008496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
2000849a:	2300      	movs	r3, #0
}
2000849c:	4618      	mov	r0, r3
2000849e:	370c      	adds	r7, #12
200084a0:	46bd      	mov	sp, r7
200084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200084a6:	4770      	bx	lr

200084a8 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
200084a8:	b480      	push	{r7}
200084aa:	b083      	sub	sp, #12
200084ac:	af00      	add	r7, sp, #0
200084ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
200084b0:	687b      	ldr	r3, [r7, #4]
200084b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
200084b6:	2b01      	cmp	r3, #1
200084b8:	d101      	bne.n	200084be <HAL_SPI_DMAResume+0x16>
200084ba:	2302      	movs	r3, #2
200084bc:	e010      	b.n	200084e0 <HAL_SPI_DMAResume+0x38>
200084be:	687b      	ldr	r3, [r7, #4]
200084c0:	2201      	movs	r2, #1
200084c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
200084c6:	687b      	ldr	r3, [r7, #4]
200084c8:	681b      	ldr	r3, [r3, #0]
200084ca:	685a      	ldr	r2, [r3, #4]
200084cc:	687b      	ldr	r3, [r7, #4]
200084ce:	681b      	ldr	r3, [r3, #0]
200084d0:	f042 0203 	orr.w	r2, r2, #3
200084d4:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
200084d6:	687b      	ldr	r3, [r7, #4]
200084d8:	2200      	movs	r2, #0
200084da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
200084de:	2300      	movs	r3, #0
}
200084e0:	4618      	mov	r0, r3
200084e2:	370c      	adds	r7, #12
200084e4:	46bd      	mov	sp, r7
200084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
200084ea:	4770      	bx	lr

200084ec <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
200084ec:	b580      	push	{r7, lr}
200084ee:	b084      	sub	sp, #16
200084f0:	af00      	add	r7, sp, #0
200084f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
200084f4:	2300      	movs	r3, #0
200084f6:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
200084f8:	687b      	ldr	r3, [r7, #4]
200084fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
200084fc:	2b00      	cmp	r3, #0
200084fe:	d00f      	beq.n	20008520 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
20008500:	687b      	ldr	r3, [r7, #4]
20008502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008504:	4618      	mov	r0, r3
20008506:	f7fa f828 	bl	2000255a <HAL_DMA_Abort>
2000850a:	4603      	mov	r3, r0
2000850c:	2b00      	cmp	r3, #0
2000850e:	d007      	beq.n	20008520 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008510:	687b      	ldr	r3, [r7, #4]
20008512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008514:	f043 0210 	orr.w	r2, r3, #16
20008518:	687b      	ldr	r3, [r7, #4]
2000851a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
2000851c:	2301      	movs	r3, #1
2000851e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
20008520:	687b      	ldr	r3, [r7, #4]
20008522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008524:	2b00      	cmp	r3, #0
20008526:	d00f      	beq.n	20008548 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
20008528:	687b      	ldr	r3, [r7, #4]
2000852a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000852c:	4618      	mov	r0, r3
2000852e:	f7fa f814 	bl	2000255a <HAL_DMA_Abort>
20008532:	4603      	mov	r3, r0
20008534:	2b00      	cmp	r3, #0
20008536:	d007      	beq.n	20008548 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008538:	687b      	ldr	r3, [r7, #4]
2000853a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000853c:	f043 0210 	orr.w	r2, r3, #16
20008540:	687b      	ldr	r3, [r7, #4]
20008542:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
20008544:	2301      	movs	r3, #1
20008546:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008548:	687b      	ldr	r3, [r7, #4]
2000854a:	681b      	ldr	r3, [r3, #0]
2000854c:	685a      	ldr	r2, [r3, #4]
2000854e:	687b      	ldr	r3, [r7, #4]
20008550:	681b      	ldr	r3, [r3, #0]
20008552:	f022 0203 	bic.w	r2, r2, #3
20008556:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
20008558:	687b      	ldr	r3, [r7, #4]
2000855a:	2201      	movs	r2, #1
2000855c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
20008560:	7bfb      	ldrb	r3, [r7, #15]
}
20008562:	4618      	mov	r0, r3
20008564:	3710      	adds	r7, #16
20008566:	46bd      	mov	sp, r7
20008568:	bd80      	pop	{r7, pc}
	...

2000856c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
2000856c:	b580      	push	{r7, lr}
2000856e:	b088      	sub	sp, #32
20008570:	af00      	add	r7, sp, #0
20008572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
20008574:	687b      	ldr	r3, [r7, #4]
20008576:	681b      	ldr	r3, [r3, #0]
20008578:	685b      	ldr	r3, [r3, #4]
2000857a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
2000857c:	687b      	ldr	r3, [r7, #4]
2000857e:	681b      	ldr	r3, [r3, #0]
20008580:	689b      	ldr	r3, [r3, #8]
20008582:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20008584:	69bb      	ldr	r3, [r7, #24]
20008586:	099b      	lsrs	r3, r3, #6
20008588:	f003 0301 	and.w	r3, r3, #1
2000858c:	2b00      	cmp	r3, #0
2000858e:	d10f      	bne.n	200085b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
20008590:	69bb      	ldr	r3, [r7, #24]
20008592:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
20008596:	2b00      	cmp	r3, #0
20008598:	d00a      	beq.n	200085b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
2000859a:	69fb      	ldr	r3, [r7, #28]
2000859c:	099b      	lsrs	r3, r3, #6
2000859e:	f003 0301 	and.w	r3, r3, #1
200085a2:	2b00      	cmp	r3, #0
200085a4:	d004      	beq.n	200085b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
200085a6:	687b      	ldr	r3, [r7, #4]
200085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200085aa:	6878      	ldr	r0, [r7, #4]
200085ac:	4798      	blx	r3
    return;
200085ae:	e0d7      	b.n	20008760 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
200085b0:	69bb      	ldr	r3, [r7, #24]
200085b2:	085b      	lsrs	r3, r3, #1
200085b4:	f003 0301 	and.w	r3, r3, #1
200085b8:	2b00      	cmp	r3, #0
200085ba:	d00a      	beq.n	200085d2 <HAL_SPI_IRQHandler+0x66>
200085bc:	69fb      	ldr	r3, [r7, #28]
200085be:	09db      	lsrs	r3, r3, #7
200085c0:	f003 0301 	and.w	r3, r3, #1
200085c4:	2b00      	cmp	r3, #0
200085c6:	d004      	beq.n	200085d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
200085c8:	687b      	ldr	r3, [r7, #4]
200085ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
200085cc:	6878      	ldr	r0, [r7, #4]
200085ce:	4798      	blx	r3
    return;
200085d0:	e0c6      	b.n	20008760 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
200085d2:	69bb      	ldr	r3, [r7, #24]
200085d4:	095b      	lsrs	r3, r3, #5
200085d6:	f003 0301 	and.w	r3, r3, #1
200085da:	2b00      	cmp	r3, #0
200085dc:	d10c      	bne.n	200085f8 <HAL_SPI_IRQHandler+0x8c>
200085de:	69bb      	ldr	r3, [r7, #24]
200085e0:	099b      	lsrs	r3, r3, #6
200085e2:	f003 0301 	and.w	r3, r3, #1
200085e6:	2b00      	cmp	r3, #0
200085e8:	d106      	bne.n	200085f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
200085ea:	69bb      	ldr	r3, [r7, #24]
200085ec:	0a1b      	lsrs	r3, r3, #8
200085ee:	f003 0301 	and.w	r3, r3, #1
200085f2:	2b00      	cmp	r3, #0
200085f4:	f000 80b4 	beq.w	20008760 <HAL_SPI_IRQHandler+0x1f4>
200085f8:	69fb      	ldr	r3, [r7, #28]
200085fa:	095b      	lsrs	r3, r3, #5
200085fc:	f003 0301 	and.w	r3, r3, #1
20008600:	2b00      	cmp	r3, #0
20008602:	f000 80ad 	beq.w	20008760 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
20008606:	69bb      	ldr	r3, [r7, #24]
20008608:	099b      	lsrs	r3, r3, #6
2000860a:	f003 0301 	and.w	r3, r3, #1
2000860e:	2b00      	cmp	r3, #0
20008610:	d023      	beq.n	2000865a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
20008612:	687b      	ldr	r3, [r7, #4]
20008614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
20008618:	b2db      	uxtb	r3, r3
2000861a:	2b03      	cmp	r3, #3
2000861c:	d011      	beq.n	20008642 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
2000861e:	687b      	ldr	r3, [r7, #4]
20008620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008622:	f043 0204 	orr.w	r2, r3, #4
20008626:	687b      	ldr	r3, [r7, #4]
20008628:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
2000862a:	2300      	movs	r3, #0
2000862c:	617b      	str	r3, [r7, #20]
2000862e:	687b      	ldr	r3, [r7, #4]
20008630:	681b      	ldr	r3, [r3, #0]
20008632:	68db      	ldr	r3, [r3, #12]
20008634:	617b      	str	r3, [r7, #20]
20008636:	687b      	ldr	r3, [r7, #4]
20008638:	681b      	ldr	r3, [r3, #0]
2000863a:	689b      	ldr	r3, [r3, #8]
2000863c:	617b      	str	r3, [r7, #20]
2000863e:	697b      	ldr	r3, [r7, #20]
20008640:	e00b      	b.n	2000865a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008642:	2300      	movs	r3, #0
20008644:	613b      	str	r3, [r7, #16]
20008646:	687b      	ldr	r3, [r7, #4]
20008648:	681b      	ldr	r3, [r3, #0]
2000864a:	68db      	ldr	r3, [r3, #12]
2000864c:	613b      	str	r3, [r7, #16]
2000864e:	687b      	ldr	r3, [r7, #4]
20008650:	681b      	ldr	r3, [r3, #0]
20008652:	689b      	ldr	r3, [r3, #8]
20008654:	613b      	str	r3, [r7, #16]
20008656:	693b      	ldr	r3, [r7, #16]
        return;
20008658:	e082      	b.n	20008760 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
2000865a:	69bb      	ldr	r3, [r7, #24]
2000865c:	095b      	lsrs	r3, r3, #5
2000865e:	f003 0301 	and.w	r3, r3, #1
20008662:	2b00      	cmp	r3, #0
20008664:	d014      	beq.n	20008690 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
20008666:	687b      	ldr	r3, [r7, #4]
20008668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000866a:	f043 0201 	orr.w	r2, r3, #1
2000866e:	687b      	ldr	r3, [r7, #4]
20008670:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
20008672:	2300      	movs	r3, #0
20008674:	60fb      	str	r3, [r7, #12]
20008676:	687b      	ldr	r3, [r7, #4]
20008678:	681b      	ldr	r3, [r3, #0]
2000867a:	689b      	ldr	r3, [r3, #8]
2000867c:	60fb      	str	r3, [r7, #12]
2000867e:	687b      	ldr	r3, [r7, #4]
20008680:	681b      	ldr	r3, [r3, #0]
20008682:	681a      	ldr	r2, [r3, #0]
20008684:	687b      	ldr	r3, [r7, #4]
20008686:	681b      	ldr	r3, [r3, #0]
20008688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000868c:	601a      	str	r2, [r3, #0]
2000868e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
20008690:	69bb      	ldr	r3, [r7, #24]
20008692:	0a1b      	lsrs	r3, r3, #8
20008694:	f003 0301 	and.w	r3, r3, #1
20008698:	2b00      	cmp	r3, #0
2000869a:	d00c      	beq.n	200086b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
2000869c:	687b      	ldr	r3, [r7, #4]
2000869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200086a0:	f043 0208 	orr.w	r2, r3, #8
200086a4:	687b      	ldr	r3, [r7, #4]
200086a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
200086a8:	2300      	movs	r3, #0
200086aa:	60bb      	str	r3, [r7, #8]
200086ac:	687b      	ldr	r3, [r7, #4]
200086ae:	681b      	ldr	r3, [r3, #0]
200086b0:	689b      	ldr	r3, [r3, #8]
200086b2:	60bb      	str	r3, [r7, #8]
200086b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200086b6:	687b      	ldr	r3, [r7, #4]
200086b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200086ba:	2b00      	cmp	r3, #0
200086bc:	d04f      	beq.n	2000875e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
200086be:	687b      	ldr	r3, [r7, #4]
200086c0:	681b      	ldr	r3, [r3, #0]
200086c2:	685a      	ldr	r2, [r3, #4]
200086c4:	687b      	ldr	r3, [r7, #4]
200086c6:	681b      	ldr	r3, [r3, #0]
200086c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
200086cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
200086ce:	687b      	ldr	r3, [r7, #4]
200086d0:	2201      	movs	r2, #1
200086d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
200086d6:	69fb      	ldr	r3, [r7, #28]
200086d8:	f003 0302 	and.w	r3, r3, #2
200086dc:	2b00      	cmp	r3, #0
200086de:	d104      	bne.n	200086ea <HAL_SPI_IRQHandler+0x17e>
200086e0:	69fb      	ldr	r3, [r7, #28]
200086e2:	f003 0301 	and.w	r3, r3, #1
200086e6:	2b00      	cmp	r3, #0
200086e8:	d034      	beq.n	20008754 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
200086ea:	687b      	ldr	r3, [r7, #4]
200086ec:	681b      	ldr	r3, [r3, #0]
200086ee:	685a      	ldr	r2, [r3, #4]
200086f0:	687b      	ldr	r3, [r7, #4]
200086f2:	681b      	ldr	r3, [r3, #0]
200086f4:	f022 0203 	bic.w	r2, r2, #3
200086f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
200086fa:	687b      	ldr	r3, [r7, #4]
200086fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200086fe:	2b00      	cmp	r3, #0
20008700:	d011      	beq.n	20008726 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
20008702:	687b      	ldr	r3, [r7, #4]
20008704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008706:	4a18      	ldr	r2, [pc, #96]	; (20008768 <HAL_SPI_IRQHandler+0x1fc>)
20008708:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
2000870a:	687b      	ldr	r3, [r7, #4]
2000870c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2000870e:	4618      	mov	r0, r3
20008710:	f7f9 ff93 	bl	2000263a <HAL_DMA_Abort_IT>
20008714:	4603      	mov	r3, r0
20008716:	2b00      	cmp	r3, #0
20008718:	d005      	beq.n	20008726 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
2000871a:	687b      	ldr	r3, [r7, #4]
2000871c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000871e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20008722:	687b      	ldr	r3, [r7, #4]
20008724:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
20008726:	687b      	ldr	r3, [r7, #4]
20008728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000872a:	2b00      	cmp	r3, #0
2000872c:	d016      	beq.n	2000875c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
2000872e:	687b      	ldr	r3, [r7, #4]
20008730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008732:	4a0d      	ldr	r2, [pc, #52]	; (20008768 <HAL_SPI_IRQHandler+0x1fc>)
20008734:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
20008736:	687b      	ldr	r3, [r7, #4]
20008738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2000873a:	4618      	mov	r0, r3
2000873c:	f7f9 ff7d 	bl	2000263a <HAL_DMA_Abort_IT>
20008740:	4603      	mov	r3, r0
20008742:	2b00      	cmp	r3, #0
20008744:	d00a      	beq.n	2000875c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008746:	687b      	ldr	r3, [r7, #4]
20008748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000874a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
2000874e:	687b      	ldr	r3, [r7, #4]
20008750:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
20008752:	e003      	b.n	2000875c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
20008754:	6878      	ldr	r0, [r7, #4]
20008756:	f000 f845 	bl	200087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
2000875a:	e000      	b.n	2000875e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
2000875c:	bf00      	nop
    return;
2000875e:	bf00      	nop
  }
}
20008760:	3720      	adds	r7, #32
20008762:	46bd      	mov	sp, r7
20008764:	bd80      	pop	{r7, pc}
20008766:	bf00      	nop
20008768:	20008ab5 	.word	0x20008ab5

2000876c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
2000876c:	b480      	push	{r7}
2000876e:	b083      	sub	sp, #12
20008770:	af00      	add	r7, sp, #0
20008772:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
20008774:	bf00      	nop
20008776:	370c      	adds	r7, #12
20008778:	46bd      	mov	sp, r7
2000877a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000877e:	4770      	bx	lr

20008780 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008780:	b480      	push	{r7}
20008782:	b083      	sub	sp, #12
20008784:	af00      	add	r7, sp, #0
20008786:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
20008788:	bf00      	nop
2000878a:	370c      	adds	r7, #12
2000878c:	46bd      	mov	sp, r7
2000878e:	f85d 7b04 	ldr.w	r7, [sp], #4
20008792:	4770      	bx	lr

20008794 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
20008794:	b480      	push	{r7}
20008796:	b083      	sub	sp, #12
20008798:	af00      	add	r7, sp, #0
2000879a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
2000879c:	bf00      	nop
2000879e:	370c      	adds	r7, #12
200087a0:	46bd      	mov	sp, r7
200087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
200087a6:	4770      	bx	lr

200087a8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
200087a8:	b480      	push	{r7}
200087aa:	b083      	sub	sp, #12
200087ac:	af00      	add	r7, sp, #0
200087ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
200087b0:	bf00      	nop
200087b2:	370c      	adds	r7, #12
200087b4:	46bd      	mov	sp, r7
200087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
200087ba:	4770      	bx	lr

200087bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
200087bc:	b480      	push	{r7}
200087be:	b083      	sub	sp, #12
200087c0:	af00      	add	r7, sp, #0
200087c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
200087c4:	bf00      	nop
200087c6:	370c      	adds	r7, #12
200087c8:	46bd      	mov	sp, r7
200087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
200087ce:	4770      	bx	lr

200087d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
200087d0:	b480      	push	{r7}
200087d2:	b083      	sub	sp, #12
200087d4:	af00      	add	r7, sp, #0
200087d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
200087d8:	bf00      	nop
200087da:	370c      	adds	r7, #12
200087dc:	46bd      	mov	sp, r7
200087de:	f85d 7b04 	ldr.w	r7, [sp], #4
200087e2:	4770      	bx	lr

200087e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
200087e4:	b480      	push	{r7}
200087e6:	b083      	sub	sp, #12
200087e8:	af00      	add	r7, sp, #0
200087ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
200087ec:	bf00      	nop
200087ee:	370c      	adds	r7, #12
200087f0:	46bd      	mov	sp, r7
200087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
200087f6:	4770      	bx	lr

200087f8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
200087f8:	b480      	push	{r7}
200087fa:	b083      	sub	sp, #12
200087fc:	af00      	add	r7, sp, #0
200087fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
20008800:	bf00      	nop
20008802:	370c      	adds	r7, #12
20008804:	46bd      	mov	sp, r7
20008806:	f85d 7b04 	ldr.w	r7, [sp], #4
2000880a:	4770      	bx	lr

2000880c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
2000880c:	b480      	push	{r7}
2000880e:	b083      	sub	sp, #12
20008810:	af00      	add	r7, sp, #0
20008812:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
20008814:	687b      	ldr	r3, [r7, #4]
20008816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000881a:	b2db      	uxtb	r3, r3
}
2000881c:	4618      	mov	r0, r3
2000881e:	370c      	adds	r7, #12
20008820:	46bd      	mov	sp, r7
20008822:	f85d 7b04 	ldr.w	r7, [sp], #4
20008826:	4770      	bx	lr

20008828 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
20008828:	b480      	push	{r7}
2000882a:	b083      	sub	sp, #12
2000882c:	af00      	add	r7, sp, #0
2000882e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
20008830:	687b      	ldr	r3, [r7, #4]
20008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
20008834:	4618      	mov	r0, r3
20008836:	370c      	adds	r7, #12
20008838:	46bd      	mov	sp, r7
2000883a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000883e:	4770      	bx	lr

20008840 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
20008840:	b580      	push	{r7, lr}
20008842:	b086      	sub	sp, #24
20008844:	af00      	add	r7, sp, #0
20008846:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008848:	687b      	ldr	r3, [r7, #4]
2000884a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000884c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000884e:	f7f9 f85b 	bl	20001908 <HAL_GetTick>
20008852:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
20008854:	687b      	ldr	r3, [r7, #4]
20008856:	681b      	ldr	r3, [r3, #0]
20008858:	681b      	ldr	r3, [r3, #0]
2000885a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000885e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
20008862:	d03b      	beq.n	200088dc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
20008864:	697b      	ldr	r3, [r7, #20]
20008866:	681b      	ldr	r3, [r3, #0]
20008868:	685a      	ldr	r2, [r3, #4]
2000886a:	697b      	ldr	r3, [r7, #20]
2000886c:	681b      	ldr	r3, [r3, #0]
2000886e:	f022 0220 	bic.w	r2, r2, #32
20008872:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20008874:	697b      	ldr	r3, [r7, #20]
20008876:	681b      	ldr	r3, [r3, #0]
20008878:	685a      	ldr	r2, [r3, #4]
2000887a:	697b      	ldr	r3, [r7, #20]
2000887c:	681b      	ldr	r3, [r3, #0]
2000887e:	f022 0202 	bic.w	r2, r2, #2
20008882:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20008884:	693a      	ldr	r2, [r7, #16]
20008886:	2164      	movs	r1, #100	; 0x64
20008888:	6978      	ldr	r0, [r7, #20]
2000888a:	f000 fc2d 	bl	200090e8 <SPI_EndRxTxTransaction>
2000888e:	4603      	mov	r3, r0
20008890:	2b00      	cmp	r3, #0
20008892:	d005      	beq.n	200088a0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20008894:	697b      	ldr	r3, [r7, #20]
20008896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008898:	f043 0220 	orr.w	r2, r3, #32
2000889c:	697b      	ldr	r3, [r7, #20]
2000889e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200088a0:	697b      	ldr	r3, [r7, #20]
200088a2:	689b      	ldr	r3, [r3, #8]
200088a4:	2b00      	cmp	r3, #0
200088a6:	d10a      	bne.n	200088be <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
200088a8:	2300      	movs	r3, #0
200088aa:	60fb      	str	r3, [r7, #12]
200088ac:	697b      	ldr	r3, [r7, #20]
200088ae:	681b      	ldr	r3, [r3, #0]
200088b0:	68db      	ldr	r3, [r3, #12]
200088b2:	60fb      	str	r3, [r7, #12]
200088b4:	697b      	ldr	r3, [r7, #20]
200088b6:	681b      	ldr	r3, [r3, #0]
200088b8:	689b      	ldr	r3, [r3, #8]
200088ba:	60fb      	str	r3, [r7, #12]
200088bc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
200088be:	697b      	ldr	r3, [r7, #20]
200088c0:	2200      	movs	r2, #0
200088c2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
200088c4:	697b      	ldr	r3, [r7, #20]
200088c6:	2201      	movs	r2, #1
200088c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200088cc:	697b      	ldr	r3, [r7, #20]
200088ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200088d0:	2b00      	cmp	r3, #0
200088d2:	d003      	beq.n	200088dc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
200088d4:	6978      	ldr	r0, [r7, #20]
200088d6:	f7ff ff85 	bl	200087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
200088da:	e002      	b.n	200088e2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
200088dc:	6978      	ldr	r0, [r7, #20]
200088de:	f7ff ff45 	bl	2000876c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
200088e2:	3718      	adds	r7, #24
200088e4:	46bd      	mov	sp, r7
200088e6:	bd80      	pop	{r7, pc}

200088e8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
200088e8:	b580      	push	{r7, lr}
200088ea:	b084      	sub	sp, #16
200088ec:	af00      	add	r7, sp, #0
200088ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
200088f0:	687b      	ldr	r3, [r7, #4]
200088f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200088f4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200088f6:	f7f9 f807 	bl	20001908 <HAL_GetTick>
200088fa:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
200088fc:	687b      	ldr	r3, [r7, #4]
200088fe:	681b      	ldr	r3, [r3, #0]
20008900:	681b      	ldr	r3, [r3, #0]
20008902:	f403 7380 	and.w	r3, r3, #256	; 0x100
20008906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2000890a:	d03b      	beq.n	20008984 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000890c:	68fb      	ldr	r3, [r7, #12]
2000890e:	681b      	ldr	r3, [r3, #0]
20008910:	685a      	ldr	r2, [r3, #4]
20008912:	68fb      	ldr	r3, [r7, #12]
20008914:	681b      	ldr	r3, [r3, #0]
20008916:	f022 0220 	bic.w	r2, r2, #32
2000891a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
2000891c:	68fb      	ldr	r3, [r7, #12]
2000891e:	689b      	ldr	r3, [r3, #8]
20008920:	2b00      	cmp	r3, #0
20008922:	d10d      	bne.n	20008940 <SPI_DMAReceiveCplt+0x58>
20008924:	68fb      	ldr	r3, [r7, #12]
20008926:	685b      	ldr	r3, [r3, #4]
20008928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000892c:	d108      	bne.n	20008940 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
2000892e:	68fb      	ldr	r3, [r7, #12]
20008930:	681b      	ldr	r3, [r3, #0]
20008932:	685a      	ldr	r2, [r3, #4]
20008934:	68fb      	ldr	r3, [r7, #12]
20008936:	681b      	ldr	r3, [r3, #0]
20008938:	f022 0203 	bic.w	r2, r2, #3
2000893c:	605a      	str	r2, [r3, #4]
2000893e:	e007      	b.n	20008950 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20008940:	68fb      	ldr	r3, [r7, #12]
20008942:	681b      	ldr	r3, [r3, #0]
20008944:	685a      	ldr	r2, [r3, #4]
20008946:	68fb      	ldr	r3, [r7, #12]
20008948:	681b      	ldr	r3, [r3, #0]
2000894a:	f022 0201 	bic.w	r2, r2, #1
2000894e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
20008950:	68ba      	ldr	r2, [r7, #8]
20008952:	2164      	movs	r1, #100	; 0x64
20008954:	68f8      	ldr	r0, [r7, #12]
20008956:	f000 fb61 	bl	2000901c <SPI_EndRxTransaction>
2000895a:	4603      	mov	r3, r0
2000895c:	2b00      	cmp	r3, #0
2000895e:	d002      	beq.n	20008966 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20008960:	68fb      	ldr	r3, [r7, #12]
20008962:	2220      	movs	r2, #32
20008964:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
20008966:	68fb      	ldr	r3, [r7, #12]
20008968:	2200      	movs	r2, #0
2000896a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
2000896c:	68fb      	ldr	r3, [r7, #12]
2000896e:	2201      	movs	r2, #1
20008970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20008974:	68fb      	ldr	r3, [r7, #12]
20008976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008978:	2b00      	cmp	r3, #0
2000897a:	d003      	beq.n	20008984 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
2000897c:	68f8      	ldr	r0, [r7, #12]
2000897e:	f7ff ff31 	bl	200087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
20008982:	e002      	b.n	2000898a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
20008984:	68f8      	ldr	r0, [r7, #12]
20008986:	f7ff fefb 	bl	20008780 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
2000898a:	3710      	adds	r7, #16
2000898c:	46bd      	mov	sp, r7
2000898e:	bd80      	pop	{r7, pc}

20008990 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
20008990:	b580      	push	{r7, lr}
20008992:	b084      	sub	sp, #16
20008994:	af00      	add	r7, sp, #0
20008996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008998:	687b      	ldr	r3, [r7, #4]
2000899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000899c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000899e:	f7f8 ffb3 	bl	20001908 <HAL_GetTick>
200089a2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
200089a4:	687b      	ldr	r3, [r7, #4]
200089a6:	681b      	ldr	r3, [r3, #0]
200089a8:	681b      	ldr	r3, [r3, #0]
200089aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
200089ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
200089b2:	d02f      	beq.n	20008a14 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
200089b4:	68fb      	ldr	r3, [r7, #12]
200089b6:	681b      	ldr	r3, [r3, #0]
200089b8:	685a      	ldr	r2, [r3, #4]
200089ba:	68fb      	ldr	r3, [r7, #12]
200089bc:	681b      	ldr	r3, [r3, #0]
200089be:	f022 0220 	bic.w	r2, r2, #32
200089c2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
200089c4:	68ba      	ldr	r2, [r7, #8]
200089c6:	2164      	movs	r1, #100	; 0x64
200089c8:	68f8      	ldr	r0, [r7, #12]
200089ca:	f000 fb8d 	bl	200090e8 <SPI_EndRxTxTransaction>
200089ce:	4603      	mov	r3, r0
200089d0:	2b00      	cmp	r3, #0
200089d2:	d005      	beq.n	200089e0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200089d4:	68fb      	ldr	r3, [r7, #12]
200089d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200089d8:	f043 0220 	orr.w	r2, r3, #32
200089dc:	68fb      	ldr	r3, [r7, #12]
200089de:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
200089e0:	68fb      	ldr	r3, [r7, #12]
200089e2:	681b      	ldr	r3, [r3, #0]
200089e4:	685a      	ldr	r2, [r3, #4]
200089e6:	68fb      	ldr	r3, [r7, #12]
200089e8:	681b      	ldr	r3, [r3, #0]
200089ea:	f022 0203 	bic.w	r2, r2, #3
200089ee:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
200089f0:	68fb      	ldr	r3, [r7, #12]
200089f2:	2200      	movs	r2, #0
200089f4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
200089f6:	68fb      	ldr	r3, [r7, #12]
200089f8:	2200      	movs	r2, #0
200089fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
200089fc:	68fb      	ldr	r3, [r7, #12]
200089fe:	2201      	movs	r2, #1
20008a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20008a04:	68fb      	ldr	r3, [r7, #12]
20008a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008a08:	2b00      	cmp	r3, #0
20008a0a:	d003      	beq.n	20008a14 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
20008a0c:	68f8      	ldr	r0, [r7, #12]
20008a0e:	f7ff fee9 	bl	200087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
20008a12:	e002      	b.n	20008a1a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
20008a14:	68f8      	ldr	r0, [r7, #12]
20008a16:	f7ff febd 	bl	20008794 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008a1a:	3710      	adds	r7, #16
20008a1c:	46bd      	mov	sp, r7
20008a1e:	bd80      	pop	{r7, pc}

20008a20 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
20008a20:	b580      	push	{r7, lr}
20008a22:	b084      	sub	sp, #16
20008a24:	af00      	add	r7, sp, #0
20008a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008a28:	687b      	ldr	r3, [r7, #4]
20008a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008a2c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
20008a2e:	68f8      	ldr	r0, [r7, #12]
20008a30:	f7ff feba 	bl	200087a8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008a34:	bf00      	nop
20008a36:	3710      	adds	r7, #16
20008a38:	46bd      	mov	sp, r7
20008a3a:	bd80      	pop	{r7, pc}

20008a3c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
20008a3c:	b580      	push	{r7, lr}
20008a3e:	b084      	sub	sp, #16
20008a40:	af00      	add	r7, sp, #0
20008a42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008a44:	687b      	ldr	r3, [r7, #4]
20008a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008a48:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
20008a4a:	68f8      	ldr	r0, [r7, #12]
20008a4c:	f7ff feb6 	bl	200087bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008a50:	bf00      	nop
20008a52:	3710      	adds	r7, #16
20008a54:	46bd      	mov	sp, r7
20008a56:	bd80      	pop	{r7, pc}

20008a58 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
20008a58:	b580      	push	{r7, lr}
20008a5a:	b084      	sub	sp, #16
20008a5c:	af00      	add	r7, sp, #0
20008a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008a60:	687b      	ldr	r3, [r7, #4]
20008a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008a64:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
20008a66:	68f8      	ldr	r0, [r7, #12]
20008a68:	f7ff feb2 	bl	200087d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008a6c:	bf00      	nop
20008a6e:	3710      	adds	r7, #16
20008a70:	46bd      	mov	sp, r7
20008a72:	bd80      	pop	{r7, pc}

20008a74 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
20008a74:	b580      	push	{r7, lr}
20008a76:	b084      	sub	sp, #16
20008a78:	af00      	add	r7, sp, #0
20008a7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008a7c:	687b      	ldr	r3, [r7, #4]
20008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008a80:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
20008a82:	68fb      	ldr	r3, [r7, #12]
20008a84:	681b      	ldr	r3, [r3, #0]
20008a86:	685a      	ldr	r2, [r3, #4]
20008a88:	68fb      	ldr	r3, [r7, #12]
20008a8a:	681b      	ldr	r3, [r3, #0]
20008a8c:	f022 0203 	bic.w	r2, r2, #3
20008a90:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
20008a92:	68fb      	ldr	r3, [r7, #12]
20008a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008a96:	f043 0210 	orr.w	r2, r3, #16
20008a9a:	68fb      	ldr	r3, [r7, #12]
20008a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
20008a9e:	68fb      	ldr	r3, [r7, #12]
20008aa0:	2201      	movs	r2, #1
20008aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
20008aa6:	68f8      	ldr	r0, [r7, #12]
20008aa8:	f7ff fe9c 	bl	200087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008aac:	bf00      	nop
20008aae:	3710      	adds	r7, #16
20008ab0:	46bd      	mov	sp, r7
20008ab2:	bd80      	pop	{r7, pc}

20008ab4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
20008ab4:	b580      	push	{r7, lr}
20008ab6:	b084      	sub	sp, #16
20008ab8:	af00      	add	r7, sp, #0
20008aba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008abc:	687b      	ldr	r3, [r7, #4]
20008abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008ac0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
20008ac2:	68fb      	ldr	r3, [r7, #12]
20008ac4:	2200      	movs	r2, #0
20008ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20008ac8:	68fb      	ldr	r3, [r7, #12]
20008aca:	2200      	movs	r2, #0
20008acc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
20008ace:	68f8      	ldr	r0, [r7, #12]
20008ad0:	f7ff fe88 	bl	200087e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008ad4:	bf00      	nop
20008ad6:	3710      	adds	r7, #16
20008ad8:	46bd      	mov	sp, r7
20008ada:	bd80      	pop	{r7, pc}

20008adc <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
20008adc:	b580      	push	{r7, lr}
20008ade:	b086      	sub	sp, #24
20008ae0:	af00      	add	r7, sp, #0
20008ae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008ae4:	687b      	ldr	r3, [r7, #4]
20008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008ae8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
20008aea:	697b      	ldr	r3, [r7, #20]
20008aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008aee:	2200      	movs	r2, #0
20008af0:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20008af2:	4b2d      	ldr	r3, [pc, #180]	; (20008ba8 <SPI_DMATxAbortCallback+0xcc>)
20008af4:	681b      	ldr	r3, [r3, #0]
20008af6:	4a2d      	ldr	r2, [pc, #180]	; (20008bac <SPI_DMATxAbortCallback+0xd0>)
20008af8:	fba2 2303 	umull	r2, r3, r2, r3
20008afc:	0a5b      	lsrs	r3, r3, #9
20008afe:	2264      	movs	r2, #100	; 0x64
20008b00:	fb02 f303 	mul.w	r3, r2, r3
20008b04:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
20008b06:	697b      	ldr	r3, [r7, #20]
20008b08:	681b      	ldr	r3, [r3, #0]
20008b0a:	685a      	ldr	r2, [r3, #4]
20008b0c:	697b      	ldr	r3, [r7, #20]
20008b0e:	681b      	ldr	r3, [r3, #0]
20008b10:	f022 0202 	bic.w	r2, r2, #2
20008b14:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
20008b16:	693b      	ldr	r3, [r7, #16]
20008b18:	2b00      	cmp	r3, #0
20008b1a:	d106      	bne.n	20008b2a <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008b1c:	697b      	ldr	r3, [r7, #20]
20008b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008b20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20008b24:	697b      	ldr	r3, [r7, #20]
20008b26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
20008b28:	e009      	b.n	20008b3e <SPI_DMATxAbortCallback+0x62>
    }
    count--;
20008b2a:	693b      	ldr	r3, [r7, #16]
20008b2c:	3b01      	subs	r3, #1
20008b2e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20008b30:	697b      	ldr	r3, [r7, #20]
20008b32:	681b      	ldr	r3, [r3, #0]
20008b34:	689b      	ldr	r3, [r3, #8]
20008b36:	f003 0302 	and.w	r3, r3, #2
20008b3a:	2b00      	cmp	r3, #0
20008b3c:	d0eb      	beq.n	20008b16 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
20008b3e:	697b      	ldr	r3, [r7, #20]
20008b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008b42:	2b00      	cmp	r3, #0
20008b44:	d004      	beq.n	20008b50 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
20008b46:	697b      	ldr	r3, [r7, #20]
20008b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20008b4c:	2b00      	cmp	r3, #0
20008b4e:	d126      	bne.n	20008b9e <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
20008b50:	697b      	ldr	r3, [r7, #20]
20008b52:	2200      	movs	r2, #0
20008b54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20008b56:	697b      	ldr	r3, [r7, #20]
20008b58:	2200      	movs	r2, #0
20008b5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
20008b5c:	697b      	ldr	r3, [r7, #20]
20008b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008b60:	2b40      	cmp	r3, #64	; 0x40
20008b62:	d002      	beq.n	20008b6a <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008b64:	697b      	ldr	r3, [r7, #20]
20008b66:	2200      	movs	r2, #0
20008b68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008b6a:	2300      	movs	r3, #0
20008b6c:	60fb      	str	r3, [r7, #12]
20008b6e:	697b      	ldr	r3, [r7, #20]
20008b70:	681b      	ldr	r3, [r3, #0]
20008b72:	68db      	ldr	r3, [r3, #12]
20008b74:	60fb      	str	r3, [r7, #12]
20008b76:	697b      	ldr	r3, [r7, #20]
20008b78:	681b      	ldr	r3, [r3, #0]
20008b7a:	689b      	ldr	r3, [r3, #8]
20008b7c:	60fb      	str	r3, [r7, #12]
20008b7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
20008b80:	2300      	movs	r3, #0
20008b82:	60bb      	str	r3, [r7, #8]
20008b84:	697b      	ldr	r3, [r7, #20]
20008b86:	681b      	ldr	r3, [r3, #0]
20008b88:	689b      	ldr	r3, [r3, #8]
20008b8a:	60bb      	str	r3, [r7, #8]
20008b8c:	68bb      	ldr	r3, [r7, #8]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
20008b8e:	697b      	ldr	r3, [r7, #20]
20008b90:	2201      	movs	r2, #1
20008b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
20008b96:	6978      	ldr	r0, [r7, #20]
20008b98:	f7ff fe2e 	bl	200087f8 <HAL_SPI_AbortCpltCallback>
20008b9c:	e000      	b.n	20008ba0 <SPI_DMATxAbortCallback+0xc4>
      return;
20008b9e:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008ba0:	3718      	adds	r7, #24
20008ba2:	46bd      	mov	sp, r7
20008ba4:	bd80      	pop	{r7, pc}
20008ba6:	bf00      	nop
20008ba8:	200003a0 	.word	0x200003a0
20008bac:	057619f1 	.word	0x057619f1

20008bb0 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
20008bb0:	b580      	push	{r7, lr}
20008bb2:	b086      	sub	sp, #24
20008bb4:	af00      	add	r7, sp, #0
20008bb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
20008bb8:	687b      	ldr	r3, [r7, #4]
20008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008bbc:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20008bbe:	697b      	ldr	r3, [r7, #20]
20008bc0:	681b      	ldr	r3, [r3, #0]
20008bc2:	681a      	ldr	r2, [r3, #0]
20008bc4:	697b      	ldr	r3, [r7, #20]
20008bc6:	681b      	ldr	r3, [r3, #0]
20008bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20008bcc:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
20008bce:	697b      	ldr	r3, [r7, #20]
20008bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20008bd2:	2200      	movs	r2, #0
20008bd4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
20008bd6:	697b      	ldr	r3, [r7, #20]
20008bd8:	681b      	ldr	r3, [r3, #0]
20008bda:	685a      	ldr	r2, [r3, #4]
20008bdc:	697b      	ldr	r3, [r7, #20]
20008bde:	681b      	ldr	r3, [r3, #0]
20008be0:	f022 0201 	bic.w	r2, r2, #1
20008be4:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
20008be6:	f7f8 fe8f 	bl	20001908 <HAL_GetTick>
20008bea:	4603      	mov	r3, r0
20008bec:	461a      	mov	r2, r3
20008bee:	2164      	movs	r1, #100	; 0x64
20008bf0:	6978      	ldr	r0, [r7, #20]
20008bf2:	f000 fa79 	bl	200090e8 <SPI_EndRxTxTransaction>
20008bf6:	4603      	mov	r3, r0
20008bf8:	2b00      	cmp	r3, #0
20008bfa:	d005      	beq.n	20008c08 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
20008bfc:	697b      	ldr	r3, [r7, #20]
20008bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008c00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
20008c04:	697b      	ldr	r3, [r7, #20]
20008c06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
20008c08:	697b      	ldr	r3, [r7, #20]
20008c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008c0c:	2b00      	cmp	r3, #0
20008c0e:	d004      	beq.n	20008c1a <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
20008c10:	697b      	ldr	r3, [r7, #20]
20008c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
20008c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
20008c16:	2b00      	cmp	r3, #0
20008c18:	d126      	bne.n	20008c68 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
20008c1a:	697b      	ldr	r3, [r7, #20]
20008c1c:	2200      	movs	r2, #0
20008c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
20008c20:	697b      	ldr	r3, [r7, #20]
20008c22:	2200      	movs	r2, #0
20008c24:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
20008c26:	697b      	ldr	r3, [r7, #20]
20008c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20008c2a:	2b40      	cmp	r3, #64	; 0x40
20008c2c:	d002      	beq.n	20008c34 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
20008c2e:	697b      	ldr	r3, [r7, #20]
20008c30:	2200      	movs	r2, #0
20008c32:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
20008c34:	2300      	movs	r3, #0
20008c36:	613b      	str	r3, [r7, #16]
20008c38:	697b      	ldr	r3, [r7, #20]
20008c3a:	681b      	ldr	r3, [r3, #0]
20008c3c:	68db      	ldr	r3, [r3, #12]
20008c3e:	613b      	str	r3, [r7, #16]
20008c40:	697b      	ldr	r3, [r7, #20]
20008c42:	681b      	ldr	r3, [r3, #0]
20008c44:	689b      	ldr	r3, [r3, #8]
20008c46:	613b      	str	r3, [r7, #16]
20008c48:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
20008c4a:	2300      	movs	r3, #0
20008c4c:	60fb      	str	r3, [r7, #12]
20008c4e:	697b      	ldr	r3, [r7, #20]
20008c50:	681b      	ldr	r3, [r3, #0]
20008c52:	689b      	ldr	r3, [r3, #8]
20008c54:	60fb      	str	r3, [r7, #12]
20008c56:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
20008c58:	697b      	ldr	r3, [r7, #20]
20008c5a:	2201      	movs	r2, #1
20008c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
20008c60:	6978      	ldr	r0, [r7, #20]
20008c62:	f7ff fdc9 	bl	200087f8 <HAL_SPI_AbortCpltCallback>
20008c66:	e000      	b.n	20008c6a <SPI_DMARxAbortCallback+0xba>
      return;
20008c68:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
20008c6a:	3718      	adds	r7, #24
20008c6c:	46bd      	mov	sp, r7
20008c6e:	bd80      	pop	{r7, pc}

20008c70 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20008c70:	b580      	push	{r7, lr}
20008c72:	b082      	sub	sp, #8
20008c74:	af00      	add	r7, sp, #0
20008c76:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
20008c78:	687b      	ldr	r3, [r7, #4]
20008c7a:	681b      	ldr	r3, [r3, #0]
20008c7c:	f103 020c 	add.w	r2, r3, #12
20008c80:	687b      	ldr	r3, [r7, #4]
20008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008c84:	7812      	ldrb	r2, [r2, #0]
20008c86:	b2d2      	uxtb	r2, r2
20008c88:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
20008c8a:	687b      	ldr	r3, [r7, #4]
20008c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008c8e:	1c5a      	adds	r2, r3, #1
20008c90:	687b      	ldr	r3, [r7, #4]
20008c92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
20008c94:	687b      	ldr	r3, [r7, #4]
20008c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008c98:	b29b      	uxth	r3, r3
20008c9a:	3b01      	subs	r3, #1
20008c9c:	b29a      	uxth	r2, r3
20008c9e:	687b      	ldr	r3, [r7, #4]
20008ca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
20008ca2:	687b      	ldr	r3, [r7, #4]
20008ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008ca6:	b29b      	uxth	r3, r3
20008ca8:	2b00      	cmp	r3, #0
20008caa:	d10f      	bne.n	20008ccc <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
20008cac:	687b      	ldr	r3, [r7, #4]
20008cae:	681b      	ldr	r3, [r3, #0]
20008cb0:	685a      	ldr	r2, [r3, #4]
20008cb2:	687b      	ldr	r3, [r7, #4]
20008cb4:	681b      	ldr	r3, [r3, #0]
20008cb6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
20008cba:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
20008cbc:	687b      	ldr	r3, [r7, #4]
20008cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008cc0:	b29b      	uxth	r3, r3
20008cc2:	2b00      	cmp	r3, #0
20008cc4:	d102      	bne.n	20008ccc <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
20008cc6:	6878      	ldr	r0, [r7, #4]
20008cc8:	f000 fa50 	bl	2000916c <SPI_CloseRxTx_ISR>
    }
  }
}
20008ccc:	bf00      	nop
20008cce:	3708      	adds	r7, #8
20008cd0:	46bd      	mov	sp, r7
20008cd2:	bd80      	pop	{r7, pc}

20008cd4 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20008cd4:	b580      	push	{r7, lr}
20008cd6:	b082      	sub	sp, #8
20008cd8:	af00      	add	r7, sp, #0
20008cda:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
20008cdc:	687b      	ldr	r3, [r7, #4]
20008cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20008ce0:	687b      	ldr	r3, [r7, #4]
20008ce2:	681b      	ldr	r3, [r3, #0]
20008ce4:	330c      	adds	r3, #12
20008ce6:	7812      	ldrb	r2, [r2, #0]
20008ce8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
20008cea:	687b      	ldr	r3, [r7, #4]
20008cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008cee:	1c5a      	adds	r2, r3, #1
20008cf0:	687b      	ldr	r3, [r7, #4]
20008cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
20008cf4:	687b      	ldr	r3, [r7, #4]
20008cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008cf8:	b29b      	uxth	r3, r3
20008cfa:	3b01      	subs	r3, #1
20008cfc:	b29a      	uxth	r2, r3
20008cfe:	687b      	ldr	r3, [r7, #4]
20008d00:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
20008d02:	687b      	ldr	r3, [r7, #4]
20008d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008d06:	b29b      	uxth	r3, r3
20008d08:	2b00      	cmp	r3, #0
20008d0a:	d10f      	bne.n	20008d2c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
20008d0c:	687b      	ldr	r3, [r7, #4]
20008d0e:	681b      	ldr	r3, [r3, #0]
20008d10:	685a      	ldr	r2, [r3, #4]
20008d12:	687b      	ldr	r3, [r7, #4]
20008d14:	681b      	ldr	r3, [r3, #0]
20008d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20008d1a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
20008d1c:	687b      	ldr	r3, [r7, #4]
20008d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008d20:	b29b      	uxth	r3, r3
20008d22:	2b00      	cmp	r3, #0
20008d24:	d102      	bne.n	20008d2c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
20008d26:	6878      	ldr	r0, [r7, #4]
20008d28:	f000 fa20 	bl	2000916c <SPI_CloseRxTx_ISR>
    }
  }
}
20008d2c:	bf00      	nop
20008d2e:	3708      	adds	r7, #8
20008d30:	46bd      	mov	sp, r7
20008d32:	bd80      	pop	{r7, pc}

20008d34 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20008d34:	b580      	push	{r7, lr}
20008d36:	b082      	sub	sp, #8
20008d38:	af00      	add	r7, sp, #0
20008d3a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
20008d3c:	687b      	ldr	r3, [r7, #4]
20008d3e:	681b      	ldr	r3, [r3, #0]
20008d40:	68da      	ldr	r2, [r3, #12]
20008d42:	687b      	ldr	r3, [r7, #4]
20008d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008d46:	b292      	uxth	r2, r2
20008d48:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
20008d4a:	687b      	ldr	r3, [r7, #4]
20008d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008d4e:	1c9a      	adds	r2, r3, #2
20008d50:	687b      	ldr	r3, [r7, #4]
20008d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
20008d54:	687b      	ldr	r3, [r7, #4]
20008d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008d58:	b29b      	uxth	r3, r3
20008d5a:	3b01      	subs	r3, #1
20008d5c:	b29a      	uxth	r2, r3
20008d5e:	687b      	ldr	r3, [r7, #4]
20008d60:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
20008d62:	687b      	ldr	r3, [r7, #4]
20008d64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008d66:	b29b      	uxth	r3, r3
20008d68:	2b00      	cmp	r3, #0
20008d6a:	d10f      	bne.n	20008d8c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
20008d6c:	687b      	ldr	r3, [r7, #4]
20008d6e:	681b      	ldr	r3, [r3, #0]
20008d70:	685a      	ldr	r2, [r3, #4]
20008d72:	687b      	ldr	r3, [r7, #4]
20008d74:	681b      	ldr	r3, [r3, #0]
20008d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20008d7a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
20008d7c:	687b      	ldr	r3, [r7, #4]
20008d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008d80:	b29b      	uxth	r3, r3
20008d82:	2b00      	cmp	r3, #0
20008d84:	d102      	bne.n	20008d8c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
20008d86:	6878      	ldr	r0, [r7, #4]
20008d88:	f000 f9f0 	bl	2000916c <SPI_CloseRxTx_ISR>
    }
  }
}
20008d8c:	bf00      	nop
20008d8e:	3708      	adds	r7, #8
20008d90:	46bd      	mov	sp, r7
20008d92:	bd80      	pop	{r7, pc}

20008d94 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20008d94:	b580      	push	{r7, lr}
20008d96:	b082      	sub	sp, #8
20008d98:	af00      	add	r7, sp, #0
20008d9a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20008d9c:	687b      	ldr	r3, [r7, #4]
20008d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008da0:	881a      	ldrh	r2, [r3, #0]
20008da2:	687b      	ldr	r3, [r7, #4]
20008da4:	681b      	ldr	r3, [r3, #0]
20008da6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
20008da8:	687b      	ldr	r3, [r7, #4]
20008daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008dac:	1c9a      	adds	r2, r3, #2
20008dae:	687b      	ldr	r3, [r7, #4]
20008db0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
20008db2:	687b      	ldr	r3, [r7, #4]
20008db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008db6:	b29b      	uxth	r3, r3
20008db8:	3b01      	subs	r3, #1
20008dba:	b29a      	uxth	r2, r3
20008dbc:	687b      	ldr	r3, [r7, #4]
20008dbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
20008dc0:	687b      	ldr	r3, [r7, #4]
20008dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008dc4:	b29b      	uxth	r3, r3
20008dc6:	2b00      	cmp	r3, #0
20008dc8:	d10f      	bne.n	20008dea <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
20008dca:	687b      	ldr	r3, [r7, #4]
20008dcc:	681b      	ldr	r3, [r3, #0]
20008dce:	685a      	ldr	r2, [r3, #4]
20008dd0:	687b      	ldr	r3, [r7, #4]
20008dd2:	681b      	ldr	r3, [r3, #0]
20008dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
20008dd8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
20008dda:	687b      	ldr	r3, [r7, #4]
20008ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008dde:	b29b      	uxth	r3, r3
20008de0:	2b00      	cmp	r3, #0
20008de2:	d102      	bne.n	20008dea <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
20008de4:	6878      	ldr	r0, [r7, #4]
20008de6:	f000 f9c1 	bl	2000916c <SPI_CloseRxTx_ISR>
    }
  }
}
20008dea:	bf00      	nop
20008dec:	3708      	adds	r7, #8
20008dee:	46bd      	mov	sp, r7
20008df0:	bd80      	pop	{r7, pc}

20008df2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20008df2:	b580      	push	{r7, lr}
20008df4:	b082      	sub	sp, #8
20008df6:	af00      	add	r7, sp, #0
20008df8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
20008dfa:	687b      	ldr	r3, [r7, #4]
20008dfc:	681b      	ldr	r3, [r3, #0]
20008dfe:	f103 020c 	add.w	r2, r3, #12
20008e02:	687b      	ldr	r3, [r7, #4]
20008e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008e06:	7812      	ldrb	r2, [r2, #0]
20008e08:	b2d2      	uxtb	r2, r2
20008e0a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
20008e0c:	687b      	ldr	r3, [r7, #4]
20008e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008e10:	1c5a      	adds	r2, r3, #1
20008e12:	687b      	ldr	r3, [r7, #4]
20008e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
20008e16:	687b      	ldr	r3, [r7, #4]
20008e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008e1a:	b29b      	uxth	r3, r3
20008e1c:	3b01      	subs	r3, #1
20008e1e:	b29a      	uxth	r2, r3
20008e20:	687b      	ldr	r3, [r7, #4]
20008e22:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
20008e24:	687b      	ldr	r3, [r7, #4]
20008e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008e28:	b29b      	uxth	r3, r3
20008e2a:	2b00      	cmp	r3, #0
20008e2c:	d102      	bne.n	20008e34 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
20008e2e:	6878      	ldr	r0, [r7, #4]
20008e30:	f000 fa10 	bl	20009254 <SPI_CloseRx_ISR>
  }
}
20008e34:	bf00      	nop
20008e36:	3708      	adds	r7, #8
20008e38:	46bd      	mov	sp, r7
20008e3a:	bd80      	pop	{r7, pc}

20008e3c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20008e3c:	b580      	push	{r7, lr}
20008e3e:	b082      	sub	sp, #8
20008e40:	af00      	add	r7, sp, #0
20008e42:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
20008e44:	687b      	ldr	r3, [r7, #4]
20008e46:	681b      	ldr	r3, [r3, #0]
20008e48:	68da      	ldr	r2, [r3, #12]
20008e4a:	687b      	ldr	r3, [r7, #4]
20008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008e4e:	b292      	uxth	r2, r2
20008e50:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
20008e52:	687b      	ldr	r3, [r7, #4]
20008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20008e56:	1c9a      	adds	r2, r3, #2
20008e58:	687b      	ldr	r3, [r7, #4]
20008e5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
20008e5c:	687b      	ldr	r3, [r7, #4]
20008e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008e60:	b29b      	uxth	r3, r3
20008e62:	3b01      	subs	r3, #1
20008e64:	b29a      	uxth	r2, r3
20008e66:	687b      	ldr	r3, [r7, #4]
20008e68:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
20008e6a:	687b      	ldr	r3, [r7, #4]
20008e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20008e6e:	b29b      	uxth	r3, r3
20008e70:	2b00      	cmp	r3, #0
20008e72:	d102      	bne.n	20008e7a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
20008e74:	6878      	ldr	r0, [r7, #4]
20008e76:	f000 f9ed 	bl	20009254 <SPI_CloseRx_ISR>
  }
}
20008e7a:	bf00      	nop
20008e7c:	3708      	adds	r7, #8
20008e7e:	46bd      	mov	sp, r7
20008e80:	bd80      	pop	{r7, pc}

20008e82 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
20008e82:	b580      	push	{r7, lr}
20008e84:	b082      	sub	sp, #8
20008e86:	af00      	add	r7, sp, #0
20008e88:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
20008e8a:	687b      	ldr	r3, [r7, #4]
20008e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20008e8e:	687b      	ldr	r3, [r7, #4]
20008e90:	681b      	ldr	r3, [r3, #0]
20008e92:	330c      	adds	r3, #12
20008e94:	7812      	ldrb	r2, [r2, #0]
20008e96:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
20008e98:	687b      	ldr	r3, [r7, #4]
20008e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008e9c:	1c5a      	adds	r2, r3, #1
20008e9e:	687b      	ldr	r3, [r7, #4]
20008ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
20008ea2:	687b      	ldr	r3, [r7, #4]
20008ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008ea6:	b29b      	uxth	r3, r3
20008ea8:	3b01      	subs	r3, #1
20008eaa:	b29a      	uxth	r2, r3
20008eac:	687b      	ldr	r3, [r7, #4]
20008eae:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
20008eb0:	687b      	ldr	r3, [r7, #4]
20008eb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008eb4:	b29b      	uxth	r3, r3
20008eb6:	2b00      	cmp	r3, #0
20008eb8:	d102      	bne.n	20008ec0 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
20008eba:	6878      	ldr	r0, [r7, #4]
20008ebc:	f000 fa0a 	bl	200092d4 <SPI_CloseTx_ISR>
  }
}
20008ec0:	bf00      	nop
20008ec2:	3708      	adds	r7, #8
20008ec4:	46bd      	mov	sp, r7
20008ec6:	bd80      	pop	{r7, pc}

20008ec8 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
20008ec8:	b580      	push	{r7, lr}
20008eca:	b082      	sub	sp, #8
20008ecc:	af00      	add	r7, sp, #0
20008ece:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20008ed0:	687b      	ldr	r3, [r7, #4]
20008ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008ed4:	881a      	ldrh	r2, [r3, #0]
20008ed6:	687b      	ldr	r3, [r7, #4]
20008ed8:	681b      	ldr	r3, [r3, #0]
20008eda:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
20008edc:	687b      	ldr	r3, [r7, #4]
20008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20008ee0:	1c9a      	adds	r2, r3, #2
20008ee2:	687b      	ldr	r3, [r7, #4]
20008ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
20008ee6:	687b      	ldr	r3, [r7, #4]
20008ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008eea:	b29b      	uxth	r3, r3
20008eec:	3b01      	subs	r3, #1
20008eee:	b29a      	uxth	r2, r3
20008ef0:	687b      	ldr	r3, [r7, #4]
20008ef2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
20008ef4:	687b      	ldr	r3, [r7, #4]
20008ef6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
20008ef8:	b29b      	uxth	r3, r3
20008efa:	2b00      	cmp	r3, #0
20008efc:	d102      	bne.n	20008f04 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
20008efe:	6878      	ldr	r0, [r7, #4]
20008f00:	f000 f9e8 	bl	200092d4 <SPI_CloseTx_ISR>
  }
}
20008f04:	bf00      	nop
20008f06:	3708      	adds	r7, #8
20008f08:	46bd      	mov	sp, r7
20008f0a:	bd80      	pop	{r7, pc}

20008f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
20008f0c:	b580      	push	{r7, lr}
20008f0e:	b088      	sub	sp, #32
20008f10:	af00      	add	r7, sp, #0
20008f12:	60f8      	str	r0, [r7, #12]
20008f14:	60b9      	str	r1, [r7, #8]
20008f16:	603b      	str	r3, [r7, #0]
20008f18:	4613      	mov	r3, r2
20008f1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
20008f1c:	f7f8 fcf4 	bl	20001908 <HAL_GetTick>
20008f20:	4602      	mov	r2, r0
20008f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
20008f24:	1a9b      	subs	r3, r3, r2
20008f26:	683a      	ldr	r2, [r7, #0]
20008f28:	4413      	add	r3, r2
20008f2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
20008f2c:	f7f8 fcec 	bl	20001908 <HAL_GetTick>
20008f30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
20008f32:	4b39      	ldr	r3, [pc, #228]	; (20009018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
20008f34:	681b      	ldr	r3, [r3, #0]
20008f36:	015b      	lsls	r3, r3, #5
20008f38:	0d1b      	lsrs	r3, r3, #20
20008f3a:	69fa      	ldr	r2, [r7, #28]
20008f3c:	fb02 f303 	mul.w	r3, r2, r3
20008f40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
20008f42:	e054      	b.n	20008fee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
20008f44:	683b      	ldr	r3, [r7, #0]
20008f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
20008f4a:	d050      	beq.n	20008fee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
20008f4c:	f7f8 fcdc 	bl	20001908 <HAL_GetTick>
20008f50:	4602      	mov	r2, r0
20008f52:	69bb      	ldr	r3, [r7, #24]
20008f54:	1ad3      	subs	r3, r2, r3
20008f56:	69fa      	ldr	r2, [r7, #28]
20008f58:	429a      	cmp	r2, r3
20008f5a:	d902      	bls.n	20008f62 <SPI_WaitFlagStateUntilTimeout+0x56>
20008f5c:	69fb      	ldr	r3, [r7, #28]
20008f5e:	2b00      	cmp	r3, #0
20008f60:	d13d      	bne.n	20008fde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20008f62:	68fb      	ldr	r3, [r7, #12]
20008f64:	681b      	ldr	r3, [r3, #0]
20008f66:	685a      	ldr	r2, [r3, #4]
20008f68:	68fb      	ldr	r3, [r7, #12]
20008f6a:	681b      	ldr	r3, [r3, #0]
20008f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20008f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20008f72:	68fb      	ldr	r3, [r7, #12]
20008f74:	685b      	ldr	r3, [r3, #4]
20008f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20008f7a:	d111      	bne.n	20008fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
20008f7c:	68fb      	ldr	r3, [r7, #12]
20008f7e:	689b      	ldr	r3, [r3, #8]
20008f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20008f84:	d004      	beq.n	20008f90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20008f86:	68fb      	ldr	r3, [r7, #12]
20008f88:	689b      	ldr	r3, [r3, #8]
20008f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20008f8e:	d107      	bne.n	20008fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
20008f90:	68fb      	ldr	r3, [r7, #12]
20008f92:	681b      	ldr	r3, [r3, #0]
20008f94:	681a      	ldr	r2, [r3, #0]
20008f96:	68fb      	ldr	r3, [r7, #12]
20008f98:	681b      	ldr	r3, [r3, #0]
20008f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20008f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
20008fa0:	68fb      	ldr	r3, [r7, #12]
20008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20008fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
20008fa8:	d10f      	bne.n	20008fca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
20008faa:	68fb      	ldr	r3, [r7, #12]
20008fac:	681b      	ldr	r3, [r3, #0]
20008fae:	681a      	ldr	r2, [r3, #0]
20008fb0:	68fb      	ldr	r3, [r7, #12]
20008fb2:	681b      	ldr	r3, [r3, #0]
20008fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20008fb8:	601a      	str	r2, [r3, #0]
20008fba:	68fb      	ldr	r3, [r7, #12]
20008fbc:	681b      	ldr	r3, [r3, #0]
20008fbe:	681a      	ldr	r2, [r3, #0]
20008fc0:	68fb      	ldr	r3, [r7, #12]
20008fc2:	681b      	ldr	r3, [r3, #0]
20008fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20008fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
20008fca:	68fb      	ldr	r3, [r7, #12]
20008fcc:	2201      	movs	r2, #1
20008fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
20008fd2:	68fb      	ldr	r3, [r7, #12]
20008fd4:	2200      	movs	r2, #0
20008fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
20008fda:	2303      	movs	r3, #3
20008fdc:	e017      	b.n	2000900e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
20008fde:	697b      	ldr	r3, [r7, #20]
20008fe0:	2b00      	cmp	r3, #0
20008fe2:	d101      	bne.n	20008fe8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
20008fe4:	2300      	movs	r3, #0
20008fe6:	61fb      	str	r3, [r7, #28]
      }
      count--;
20008fe8:	697b      	ldr	r3, [r7, #20]
20008fea:	3b01      	subs	r3, #1
20008fec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
20008fee:	68fb      	ldr	r3, [r7, #12]
20008ff0:	681b      	ldr	r3, [r3, #0]
20008ff2:	689a      	ldr	r2, [r3, #8]
20008ff4:	68bb      	ldr	r3, [r7, #8]
20008ff6:	4013      	ands	r3, r2
20008ff8:	68ba      	ldr	r2, [r7, #8]
20008ffa:	429a      	cmp	r2, r3
20008ffc:	bf0c      	ite	eq
20008ffe:	2301      	moveq	r3, #1
20009000:	2300      	movne	r3, #0
20009002:	b2db      	uxtb	r3, r3
20009004:	461a      	mov	r2, r3
20009006:	79fb      	ldrb	r3, [r7, #7]
20009008:	429a      	cmp	r2, r3
2000900a:	d19b      	bne.n	20008f44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
2000900c:	2300      	movs	r3, #0
}
2000900e:	4618      	mov	r0, r3
20009010:	3720      	adds	r7, #32
20009012:	46bd      	mov	sp, r7
20009014:	bd80      	pop	{r7, pc}
20009016:	bf00      	nop
20009018:	200003a0 	.word	0x200003a0

2000901c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
2000901c:	b580      	push	{r7, lr}
2000901e:	b086      	sub	sp, #24
20009020:	af02      	add	r7, sp, #8
20009022:	60f8      	str	r0, [r7, #12]
20009024:	60b9      	str	r1, [r7, #8]
20009026:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20009028:	68fb      	ldr	r3, [r7, #12]
2000902a:	685b      	ldr	r3, [r3, #4]
2000902c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20009030:	d111      	bne.n	20009056 <SPI_EndRxTransaction+0x3a>
20009032:	68fb      	ldr	r3, [r7, #12]
20009034:	689b      	ldr	r3, [r3, #8]
20009036:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000903a:	d004      	beq.n	20009046 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
2000903c:	68fb      	ldr	r3, [r7, #12]
2000903e:	689b      	ldr	r3, [r3, #8]
20009040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20009044:	d107      	bne.n	20009056 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
20009046:	68fb      	ldr	r3, [r7, #12]
20009048:	681b      	ldr	r3, [r3, #0]
2000904a:	681a      	ldr	r2, [r3, #0]
2000904c:	68fb      	ldr	r3, [r7, #12]
2000904e:	681b      	ldr	r3, [r3, #0]
20009050:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20009054:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
20009056:	68fb      	ldr	r3, [r7, #12]
20009058:	685b      	ldr	r3, [r3, #4]
2000905a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000905e:	d12a      	bne.n	200090b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
20009060:	68fb      	ldr	r3, [r7, #12]
20009062:	689b      	ldr	r3, [r3, #8]
20009064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20009068:	d012      	beq.n	20009090 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
2000906a:	687b      	ldr	r3, [r7, #4]
2000906c:	9300      	str	r3, [sp, #0]
2000906e:	68bb      	ldr	r3, [r7, #8]
20009070:	2200      	movs	r2, #0
20009072:	2180      	movs	r1, #128	; 0x80
20009074:	68f8      	ldr	r0, [r7, #12]
20009076:	f7ff ff49 	bl	20008f0c <SPI_WaitFlagStateUntilTimeout>
2000907a:	4603      	mov	r3, r0
2000907c:	2b00      	cmp	r3, #0
2000907e:	d02d      	beq.n	200090dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009080:	68fb      	ldr	r3, [r7, #12]
20009082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009084:	f043 0220 	orr.w	r2, r3, #32
20009088:	68fb      	ldr	r3, [r7, #12]
2000908a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
2000908c:	2303      	movs	r3, #3
2000908e:	e026      	b.n	200090de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
20009090:	687b      	ldr	r3, [r7, #4]
20009092:	9300      	str	r3, [sp, #0]
20009094:	68bb      	ldr	r3, [r7, #8]
20009096:	2200      	movs	r2, #0
20009098:	2101      	movs	r1, #1
2000909a:	68f8      	ldr	r0, [r7, #12]
2000909c:	f7ff ff36 	bl	20008f0c <SPI_WaitFlagStateUntilTimeout>
200090a0:	4603      	mov	r3, r0
200090a2:	2b00      	cmp	r3, #0
200090a4:	d01a      	beq.n	200090dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200090a6:	68fb      	ldr	r3, [r7, #12]
200090a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200090aa:	f043 0220 	orr.w	r2, r3, #32
200090ae:	68fb      	ldr	r3, [r7, #12]
200090b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
200090b2:	2303      	movs	r3, #3
200090b4:	e013      	b.n	200090de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
200090b6:	687b      	ldr	r3, [r7, #4]
200090b8:	9300      	str	r3, [sp, #0]
200090ba:	68bb      	ldr	r3, [r7, #8]
200090bc:	2200      	movs	r2, #0
200090be:	2101      	movs	r1, #1
200090c0:	68f8      	ldr	r0, [r7, #12]
200090c2:	f7ff ff23 	bl	20008f0c <SPI_WaitFlagStateUntilTimeout>
200090c6:	4603      	mov	r3, r0
200090c8:	2b00      	cmp	r3, #0
200090ca:	d007      	beq.n	200090dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200090cc:	68fb      	ldr	r3, [r7, #12]
200090ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200090d0:	f043 0220 	orr.w	r2, r3, #32
200090d4:	68fb      	ldr	r3, [r7, #12]
200090d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
200090d8:	2303      	movs	r3, #3
200090da:	e000      	b.n	200090de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
200090dc:	2300      	movs	r3, #0
}
200090de:	4618      	mov	r0, r3
200090e0:	3710      	adds	r7, #16
200090e2:	46bd      	mov	sp, r7
200090e4:	bd80      	pop	{r7, pc}
	...

200090e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
200090e8:	b580      	push	{r7, lr}
200090ea:	b088      	sub	sp, #32
200090ec:	af02      	add	r7, sp, #8
200090ee:	60f8      	str	r0, [r7, #12]
200090f0:	60b9      	str	r1, [r7, #8]
200090f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
200090f4:	4b1b      	ldr	r3, [pc, #108]	; (20009164 <SPI_EndRxTxTransaction+0x7c>)
200090f6:	681b      	ldr	r3, [r3, #0]
200090f8:	4a1b      	ldr	r2, [pc, #108]	; (20009168 <SPI_EndRxTxTransaction+0x80>)
200090fa:	fba2 2303 	umull	r2, r3, r2, r3
200090fe:	0d5b      	lsrs	r3, r3, #21
20009100:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
20009104:	fb02 f303 	mul.w	r3, r2, r3
20009108:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
2000910a:	68fb      	ldr	r3, [r7, #12]
2000910c:	685b      	ldr	r3, [r3, #4]
2000910e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20009112:	d112      	bne.n	2000913a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
20009114:	687b      	ldr	r3, [r7, #4]
20009116:	9300      	str	r3, [sp, #0]
20009118:	68bb      	ldr	r3, [r7, #8]
2000911a:	2200      	movs	r2, #0
2000911c:	2180      	movs	r1, #128	; 0x80
2000911e:	68f8      	ldr	r0, [r7, #12]
20009120:	f7ff fef4 	bl	20008f0c <SPI_WaitFlagStateUntilTimeout>
20009124:	4603      	mov	r3, r0
20009126:	2b00      	cmp	r3, #0
20009128:	d016      	beq.n	20009158 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000912a:	68fb      	ldr	r3, [r7, #12]
2000912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2000912e:	f043 0220 	orr.w	r2, r3, #32
20009132:	68fb      	ldr	r3, [r7, #12]
20009134:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
20009136:	2303      	movs	r3, #3
20009138:	e00f      	b.n	2000915a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
2000913a:	697b      	ldr	r3, [r7, #20]
2000913c:	2b00      	cmp	r3, #0
2000913e:	d00a      	beq.n	20009156 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
20009140:	697b      	ldr	r3, [r7, #20]
20009142:	3b01      	subs	r3, #1
20009144:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
20009146:	68fb      	ldr	r3, [r7, #12]
20009148:	681b      	ldr	r3, [r3, #0]
2000914a:	689b      	ldr	r3, [r3, #8]
2000914c:	f003 0380 	and.w	r3, r3, #128	; 0x80
20009150:	2b80      	cmp	r3, #128	; 0x80
20009152:	d0f2      	beq.n	2000913a <SPI_EndRxTxTransaction+0x52>
20009154:	e000      	b.n	20009158 <SPI_EndRxTxTransaction+0x70>
        break;
20009156:	bf00      	nop
  }

  return HAL_OK;
20009158:	2300      	movs	r3, #0
}
2000915a:	4618      	mov	r0, r3
2000915c:	3718      	adds	r7, #24
2000915e:	46bd      	mov	sp, r7
20009160:	bd80      	pop	{r7, pc}
20009162:	bf00      	nop
20009164:	200003a0 	.word	0x200003a0
20009168:	165e9f81 	.word	0x165e9f81

2000916c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
2000916c:	b580      	push	{r7, lr}
2000916e:	b086      	sub	sp, #24
20009170:	af00      	add	r7, sp, #0
20009172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
20009174:	4b35      	ldr	r3, [pc, #212]	; (2000924c <SPI_CloseRxTx_ISR+0xe0>)
20009176:	681b      	ldr	r3, [r3, #0]
20009178:	4a35      	ldr	r2, [pc, #212]	; (20009250 <SPI_CloseRxTx_ISR+0xe4>)
2000917a:	fba2 2303 	umull	r2, r3, r2, r3
2000917e:	0a5b      	lsrs	r3, r3, #9
20009180:	2264      	movs	r2, #100	; 0x64
20009182:	fb02 f303 	mul.w	r3, r2, r3
20009186:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
20009188:	f7f8 fbbe 	bl	20001908 <HAL_GetTick>
2000918c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
2000918e:	687b      	ldr	r3, [r7, #4]
20009190:	681b      	ldr	r3, [r3, #0]
20009192:	685a      	ldr	r2, [r3, #4]
20009194:	687b      	ldr	r3, [r7, #4]
20009196:	681b      	ldr	r3, [r3, #0]
20009198:	f022 0220 	bic.w	r2, r2, #32
2000919c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
2000919e:	693b      	ldr	r3, [r7, #16]
200091a0:	2b00      	cmp	r3, #0
200091a2:	d106      	bne.n	200091b2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200091a4:	687b      	ldr	r3, [r7, #4]
200091a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200091a8:	f043 0220 	orr.w	r2, r3, #32
200091ac:	687b      	ldr	r3, [r7, #4]
200091ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
200091b0:	e009      	b.n	200091c6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
200091b2:	693b      	ldr	r3, [r7, #16]
200091b4:	3b01      	subs	r3, #1
200091b6:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
200091b8:	687b      	ldr	r3, [r7, #4]
200091ba:	681b      	ldr	r3, [r3, #0]
200091bc:	689b      	ldr	r3, [r3, #8]
200091be:	f003 0302 	and.w	r3, r3, #2
200091c2:	2b00      	cmp	r3, #0
200091c4:	d0eb      	beq.n	2000919e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
200091c6:	697a      	ldr	r2, [r7, #20]
200091c8:	2164      	movs	r1, #100	; 0x64
200091ca:	6878      	ldr	r0, [r7, #4]
200091cc:	f7ff ff8c 	bl	200090e8 <SPI_EndRxTxTransaction>
200091d0:	4603      	mov	r3, r0
200091d2:	2b00      	cmp	r3, #0
200091d4:	d005      	beq.n	200091e2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200091d6:	687b      	ldr	r3, [r7, #4]
200091d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200091da:	f043 0220 	orr.w	r2, r3, #32
200091de:	687b      	ldr	r3, [r7, #4]
200091e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200091e2:	687b      	ldr	r3, [r7, #4]
200091e4:	689b      	ldr	r3, [r3, #8]
200091e6:	2b00      	cmp	r3, #0
200091e8:	d10a      	bne.n	20009200 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200091ea:	2300      	movs	r3, #0
200091ec:	60fb      	str	r3, [r7, #12]
200091ee:	687b      	ldr	r3, [r7, #4]
200091f0:	681b      	ldr	r3, [r3, #0]
200091f2:	68db      	ldr	r3, [r3, #12]
200091f4:	60fb      	str	r3, [r7, #12]
200091f6:	687b      	ldr	r3, [r7, #4]
200091f8:	681b      	ldr	r3, [r3, #0]
200091fa:	689b      	ldr	r3, [r3, #8]
200091fc:	60fb      	str	r3, [r7, #12]
200091fe:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
20009200:	687b      	ldr	r3, [r7, #4]
20009202:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009204:	2b00      	cmp	r3, #0
20009206:	d115      	bne.n	20009234 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
20009208:	687b      	ldr	r3, [r7, #4]
2000920a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
2000920e:	b2db      	uxtb	r3, r3
20009210:	2b04      	cmp	r3, #4
20009212:	d107      	bne.n	20009224 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
20009214:	687b      	ldr	r3, [r7, #4]
20009216:	2201      	movs	r2, #1
20009218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
2000921c:	6878      	ldr	r0, [r7, #4]
2000921e:	f7ff faaf 	bl	20008780 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
20009222:	e00e      	b.n	20009242 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
20009224:	687b      	ldr	r3, [r7, #4]
20009226:	2201      	movs	r2, #1
20009228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
2000922c:	6878      	ldr	r0, [r7, #4]
2000922e:	f7ff fab1 	bl	20008794 <HAL_SPI_TxRxCpltCallback>
}
20009232:	e006      	b.n	20009242 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
20009234:	687b      	ldr	r3, [r7, #4]
20009236:	2201      	movs	r2, #1
20009238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
2000923c:	6878      	ldr	r0, [r7, #4]
2000923e:	f7ff fad1 	bl	200087e4 <HAL_SPI_ErrorCallback>
}
20009242:	bf00      	nop
20009244:	3718      	adds	r7, #24
20009246:	46bd      	mov	sp, r7
20009248:	bd80      	pop	{r7, pc}
2000924a:	bf00      	nop
2000924c:	200003a0 	.word	0x200003a0
20009250:	057619f1 	.word	0x057619f1

20009254 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
20009254:	b580      	push	{r7, lr}
20009256:	b084      	sub	sp, #16
20009258:	af00      	add	r7, sp, #0
2000925a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
2000925c:	687b      	ldr	r3, [r7, #4]
2000925e:	681b      	ldr	r3, [r3, #0]
20009260:	685a      	ldr	r2, [r3, #4]
20009262:	687b      	ldr	r3, [r7, #4]
20009264:	681b      	ldr	r3, [r3, #0]
20009266:	f022 0260 	bic.w	r2, r2, #96	; 0x60
2000926a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
2000926c:	f7f8 fb4c 	bl	20001908 <HAL_GetTick>
20009270:	4603      	mov	r3, r0
20009272:	461a      	mov	r2, r3
20009274:	2164      	movs	r1, #100	; 0x64
20009276:	6878      	ldr	r0, [r7, #4]
20009278:	f7ff fed0 	bl	2000901c <SPI_EndRxTransaction>
2000927c:	4603      	mov	r3, r0
2000927e:	2b00      	cmp	r3, #0
20009280:	d005      	beq.n	2000928e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20009282:	687b      	ldr	r3, [r7, #4]
20009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009286:	f043 0220 	orr.w	r2, r3, #32
2000928a:	687b      	ldr	r3, [r7, #4]
2000928c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000928e:	687b      	ldr	r3, [r7, #4]
20009290:	689b      	ldr	r3, [r3, #8]
20009292:	2b00      	cmp	r3, #0
20009294:	d10a      	bne.n	200092ac <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009296:	2300      	movs	r3, #0
20009298:	60fb      	str	r3, [r7, #12]
2000929a:	687b      	ldr	r3, [r7, #4]
2000929c:	681b      	ldr	r3, [r3, #0]
2000929e:	68db      	ldr	r3, [r3, #12]
200092a0:	60fb      	str	r3, [r7, #12]
200092a2:	687b      	ldr	r3, [r7, #4]
200092a4:	681b      	ldr	r3, [r3, #0]
200092a6:	689b      	ldr	r3, [r3, #8]
200092a8:	60fb      	str	r3, [r7, #12]
200092aa:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
200092ac:	687b      	ldr	r3, [r7, #4]
200092ae:	2201      	movs	r2, #1
200092b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
200092b4:	687b      	ldr	r3, [r7, #4]
200092b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200092b8:	2b00      	cmp	r3, #0
200092ba:	d103      	bne.n	200092c4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
200092bc:	6878      	ldr	r0, [r7, #4]
200092be:	f7ff fa5f 	bl	20008780 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
200092c2:	e002      	b.n	200092ca <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
200092c4:	6878      	ldr	r0, [r7, #4]
200092c6:	f7ff fa8d 	bl	200087e4 <HAL_SPI_ErrorCallback>
}
200092ca:	bf00      	nop
200092cc:	3710      	adds	r7, #16
200092ce:	46bd      	mov	sp, r7
200092d0:	bd80      	pop	{r7, pc}
	...

200092d4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
200092d4:	b580      	push	{r7, lr}
200092d6:	b086      	sub	sp, #24
200092d8:	af00      	add	r7, sp, #0
200092da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200092dc:	4b2c      	ldr	r3, [pc, #176]	; (20009390 <SPI_CloseTx_ISR+0xbc>)
200092de:	681b      	ldr	r3, [r3, #0]
200092e0:	4a2c      	ldr	r2, [pc, #176]	; (20009394 <SPI_CloseTx_ISR+0xc0>)
200092e2:	fba2 2303 	umull	r2, r3, r2, r3
200092e6:	0a5b      	lsrs	r3, r3, #9
200092e8:	2264      	movs	r2, #100	; 0x64
200092ea:	fb02 f303 	mul.w	r3, r2, r3
200092ee:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200092f0:	f7f8 fb0a 	bl	20001908 <HAL_GetTick>
200092f4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
200092f6:	693b      	ldr	r3, [r7, #16]
200092f8:	2b00      	cmp	r3, #0
200092fa:	d106      	bne.n	2000930a <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
200092fc:	687b      	ldr	r3, [r7, #4]
200092fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009300:	f043 0220 	orr.w	r2, r3, #32
20009304:	687b      	ldr	r3, [r7, #4]
20009306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
20009308:	e009      	b.n	2000931e <SPI_CloseTx_ISR+0x4a>
    }
    count--;
2000930a:	693b      	ldr	r3, [r7, #16]
2000930c:	3b01      	subs	r3, #1
2000930e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
20009310:	687b      	ldr	r3, [r7, #4]
20009312:	681b      	ldr	r3, [r3, #0]
20009314:	689b      	ldr	r3, [r3, #8]
20009316:	f003 0302 	and.w	r3, r3, #2
2000931a:	2b00      	cmp	r3, #0
2000931c:	d0eb      	beq.n	200092f6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
2000931e:	687b      	ldr	r3, [r7, #4]
20009320:	681b      	ldr	r3, [r3, #0]
20009322:	685a      	ldr	r2, [r3, #4]
20009324:	687b      	ldr	r3, [r7, #4]
20009326:	681b      	ldr	r3, [r3, #0]
20009328:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
2000932c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
2000932e:	697a      	ldr	r2, [r7, #20]
20009330:	2164      	movs	r1, #100	; 0x64
20009332:	6878      	ldr	r0, [r7, #4]
20009334:	f7ff fed8 	bl	200090e8 <SPI_EndRxTxTransaction>
20009338:	4603      	mov	r3, r0
2000933a:	2b00      	cmp	r3, #0
2000933c:	d005      	beq.n	2000934a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
2000933e:	687b      	ldr	r3, [r7, #4]
20009340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009342:	f043 0220 	orr.w	r2, r3, #32
20009346:	687b      	ldr	r3, [r7, #4]
20009348:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
2000934a:	687b      	ldr	r3, [r7, #4]
2000934c:	689b      	ldr	r3, [r3, #8]
2000934e:	2b00      	cmp	r3, #0
20009350:	d10a      	bne.n	20009368 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
20009352:	2300      	movs	r3, #0
20009354:	60fb      	str	r3, [r7, #12]
20009356:	687b      	ldr	r3, [r7, #4]
20009358:	681b      	ldr	r3, [r3, #0]
2000935a:	68db      	ldr	r3, [r3, #12]
2000935c:	60fb      	str	r3, [r7, #12]
2000935e:	687b      	ldr	r3, [r7, #4]
20009360:	681b      	ldr	r3, [r3, #0]
20009362:	689b      	ldr	r3, [r3, #8]
20009364:	60fb      	str	r3, [r7, #12]
20009366:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
20009368:	687b      	ldr	r3, [r7, #4]
2000936a:	2201      	movs	r2, #1
2000936c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20009370:	687b      	ldr	r3, [r7, #4]
20009372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
20009374:	2b00      	cmp	r3, #0
20009376:	d003      	beq.n	20009380 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
20009378:	6878      	ldr	r0, [r7, #4]
2000937a:	f7ff fa33 	bl	200087e4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
2000937e:	e002      	b.n	20009386 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
20009380:	6878      	ldr	r0, [r7, #4]
20009382:	f7ff f9f3 	bl	2000876c <HAL_SPI_TxCpltCallback>
}
20009386:	bf00      	nop
20009388:	3718      	adds	r7, #24
2000938a:	46bd      	mov	sp, r7
2000938c:	bd80      	pop	{r7, pc}
2000938e:	bf00      	nop
20009390:	200003a0 	.word	0x200003a0
20009394:	057619f1 	.word	0x057619f1

20009398 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
20009398:	b480      	push	{r7}
2000939a:	b085      	sub	sp, #20
2000939c:	af00      	add	r7, sp, #0
2000939e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
200093a0:	2300      	movs	r3, #0
200093a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
200093a4:	4b1e      	ldr	r3, [pc, #120]	; (20009420 <SPI_AbortRx_ISR+0x88>)
200093a6:	681b      	ldr	r3, [r3, #0]
200093a8:	4a1e      	ldr	r2, [pc, #120]	; (20009424 <SPI_AbortRx_ISR+0x8c>)
200093aa:	fba2 2303 	umull	r2, r3, r2, r3
200093ae:	0a5b      	lsrs	r3, r3, #9
200093b0:	2264      	movs	r2, #100	; 0x64
200093b2:	fb02 f303 	mul.w	r3, r2, r3
200093b6:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
200093b8:	68bb      	ldr	r3, [r7, #8]
200093ba:	2b00      	cmp	r3, #0
200093bc:	d106      	bne.n	200093cc <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
200093be:	687b      	ldr	r3, [r7, #4]
200093c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
200093c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
200093c6:	687b      	ldr	r3, [r7, #4]
200093c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
200093ca:	e009      	b.n	200093e0 <SPI_AbortRx_ISR+0x48>
    }
    count--;
200093cc:	68bb      	ldr	r3, [r7, #8]
200093ce:	3b01      	subs	r3, #1
200093d0:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
200093d2:	687b      	ldr	r3, [r7, #4]
200093d4:	681b      	ldr	r3, [r3, #0]
200093d6:	689b      	ldr	r3, [r3, #8]
200093d8:	f003 0302 	and.w	r3, r3, #2
200093dc:	2b00      	cmp	r3, #0
200093de:	d0eb      	beq.n	200093b8 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
200093e0:	687b      	ldr	r3, [r7, #4]
200093e2:	681b      	ldr	r3, [r3, #0]
200093e4:	681a      	ldr	r2, [r3, #0]
200093e6:	687b      	ldr	r3, [r7, #4]
200093e8:	681b      	ldr	r3, [r3, #0]
200093ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200093ee:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
200093f0:	687b      	ldr	r3, [r7, #4]
200093f2:	681b      	ldr	r3, [r3, #0]
200093f4:	685a      	ldr	r2, [r3, #4]
200093f6:	687b      	ldr	r3, [r7, #4]
200093f8:	681b      	ldr	r3, [r3, #0]
200093fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
200093fe:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
20009400:	687b      	ldr	r3, [r7, #4]
20009402:	681b      	ldr	r3, [r3, #0]
20009404:	68db      	ldr	r3, [r3, #12]
20009406:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
20009408:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
2000940a:	687b      	ldr	r3, [r7, #4]
2000940c:	2207      	movs	r2, #7
2000940e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
20009412:	bf00      	nop
20009414:	3714      	adds	r7, #20
20009416:	46bd      	mov	sp, r7
20009418:	f85d 7b04 	ldr.w	r7, [sp], #4
2000941c:	4770      	bx	lr
2000941e:	bf00      	nop
20009420:	200003a0 	.word	0x200003a0
20009424:	057619f1 	.word	0x057619f1

20009428 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
20009428:	b480      	push	{r7}
2000942a:	b083      	sub	sp, #12
2000942c:	af00      	add	r7, sp, #0
2000942e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
20009430:	687b      	ldr	r3, [r7, #4]
20009432:	681b      	ldr	r3, [r3, #0]
20009434:	685a      	ldr	r2, [r3, #4]
20009436:	687b      	ldr	r3, [r7, #4]
20009438:	681b      	ldr	r3, [r3, #0]
2000943a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
2000943e:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
20009440:	687b      	ldr	r3, [r7, #4]
20009442:	681b      	ldr	r3, [r3, #0]
20009444:	681a      	ldr	r2, [r3, #0]
20009446:	687b      	ldr	r3, [r7, #4]
20009448:	681b      	ldr	r3, [r3, #0]
2000944a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000944e:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
20009450:	687b      	ldr	r3, [r7, #4]
20009452:	2207      	movs	r2, #7
20009454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
20009458:	bf00      	nop
2000945a:	370c      	adds	r7, #12
2000945c:	46bd      	mov	sp, r7
2000945e:	f85d 7b04 	ldr.w	r7, [sp], #4
20009462:	4770      	bx	lr

20009464 <__errno>:
20009464:	4b01      	ldr	r3, [pc, #4]	; (2000946c <__errno+0x8>)
20009466:	6818      	ldr	r0, [r3, #0]
20009468:	4770      	bx	lr
2000946a:	bf00      	nop
2000946c:	200003ac 	.word	0x200003ac

20009470 <exit>:
20009470:	b508      	push	{r3, lr}
20009472:	4b07      	ldr	r3, [pc, #28]	; (20009490 <exit+0x20>)
20009474:	4604      	mov	r4, r0
20009476:	b113      	cbz	r3, 2000947e <exit+0xe>
20009478:	2100      	movs	r1, #0
2000947a:	f3af 8000 	nop.w
2000947e:	4b05      	ldr	r3, [pc, #20]	; (20009494 <exit+0x24>)
20009480:	6818      	ldr	r0, [r3, #0]
20009482:	6a83      	ldr	r3, [r0, #40]	; 0x28
20009484:	b103      	cbz	r3, 20009488 <exit+0x18>
20009486:	4798      	blx	r3
20009488:	4620      	mov	r0, r4
2000948a:	f7f7 ffc0 	bl	2000140e <_exit>
2000948e:	bf00      	nop
20009490:	00000000 	.word	0x00000000
20009494:	200095f4 	.word	0x200095f4

20009498 <__libc_init_array>:
20009498:	b570      	push	{r4, r5, r6, lr}
2000949a:	4d0d      	ldr	r5, [pc, #52]	; (200094d0 <__libc_init_array+0x38>)
2000949c:	4c0d      	ldr	r4, [pc, #52]	; (200094d4 <__libc_init_array+0x3c>)
2000949e:	1b64      	subs	r4, r4, r5
200094a0:	10a4      	asrs	r4, r4, #2
200094a2:	2600      	movs	r6, #0
200094a4:	42a6      	cmp	r6, r4
200094a6:	d109      	bne.n	200094bc <__libc_init_array+0x24>
200094a8:	4d0b      	ldr	r5, [pc, #44]	; (200094d8 <__libc_init_array+0x40>)
200094aa:	4c0c      	ldr	r4, [pc, #48]	; (200094dc <__libc_init_array+0x44>)
200094ac:	f000 f822 	bl	200094f4 <_init>
200094b0:	1b64      	subs	r4, r4, r5
200094b2:	10a4      	asrs	r4, r4, #2
200094b4:	2600      	movs	r6, #0
200094b6:	42a6      	cmp	r6, r4
200094b8:	d105      	bne.n	200094c6 <__libc_init_array+0x2e>
200094ba:	bd70      	pop	{r4, r5, r6, pc}
200094bc:	f855 3b04 	ldr.w	r3, [r5], #4
200094c0:	4798      	blx	r3
200094c2:	3601      	adds	r6, #1
200094c4:	e7ee      	b.n	200094a4 <__libc_init_array+0xc>
200094c6:	f855 3b04 	ldr.w	r3, [r5], #4
200094ca:	4798      	blx	r3
200094cc:	3601      	adds	r6, #1
200094ce:	e7f2      	b.n	200094b6 <__libc_init_array+0x1e>
200094d0:	20000390 	.word	0x20000390
200094d4:	20000390 	.word	0x20000390
200094d8:	20000390 	.word	0x20000390
200094dc:	20000394 	.word	0x20000394

200094e0 <memset>:
200094e0:	4402      	add	r2, r0
200094e2:	4603      	mov	r3, r0
200094e4:	4293      	cmp	r3, r2
200094e6:	d100      	bne.n	200094ea <memset+0xa>
200094e8:	4770      	bx	lr
200094ea:	f803 1b01 	strb.w	r1, [r3], #1
200094ee:	e7f9      	b.n	200094e4 <memset+0x4>

200094f0 <__EH_FRAME_BEGIN__>:
200094f0:	0000 0000                                   ....

200094f4 <_init>:
200094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200094f6:	bf00      	nop
200094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
200094fa:	bc08      	pop	{r3}
200094fc:	469e      	mov	lr, r3
200094fe:	4770      	bx	lr

20009500 <_fini>:
20009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20009502:	bf00      	nop
20009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
20009506:	bc08      	pop	{r3}
20009508:	469e      	mov	lr, r3
2000950a:	4770      	bx	lr
